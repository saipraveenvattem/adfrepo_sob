{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "datafactory-sobha-prod-uaen-001"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_PLN_SUBCONTRACT_MANPOWER')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_O_PLN_SUBCONTRACTOR_MANPOWER_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "Import data from DS_O_PLN_DOOR_DELIVERY_RAW_STG_TRG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PLN_SUBCONTRACT_MANPOWER_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to DS_DOOR_DELIVERY_M_TRG"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          Id_ as integer,",
						"          upload_time as timestamp,",
						"          tower as string,",
						"          project_id as integer,",
						"          sbu_id as integer,",
						"          SBU as string,",
						"          Project as string,",
						"          type as string,",
						"          Sub_Contractor as string,",
						"          Activity as string,",
						"          SCL_Engineer as string,",
						"          Shift as string,",
						"          Count as string,",
						"          Trade as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select \\n        GAR.Id_,\\n          GAR.upload_time,  \\n          GAR.tower, \\n          p.Sort_ID as project_id,\\n          sm.Sbu_Map_Id as sbu_id,\\n          RTRIM(GAR.SBU) as SBU,\\n          RTRIM(GAR.Project) as Project, \\n          RTRIM(GAR.type) as type,\\n          GAR.Sub_Contractor,\\n          GAR.Activity,\\n          GAR.SCL_Engineer,\\n          GAR.Shift, \\n          GAR.Count,\\n          GAR. Trade\\nfrom(\\nselect\\n          s.Id_,\\n          s.upload_time,  \\n          s.tower, \\n          RTRIM(s.SBU) as SBU,\\n          RTRIM(s.Project) as Project, \\n          RTRIM(s.type) as type,\\n          s.Sub_Contractor,\\n          s.Activity,\\n          s.SCL_Engineer,\\n          column_name.Trade_uncleaned as Trade,\\n          case when column_name.Trade_uncleaned like \\'%D\\' then \\'Day\\'\\n                when column_name.Trade_uncleaned like \\'%N\\' then \\'Night\\'\\n                when column_name.Trade_uncleaned like \\'%D/N\\' then \\'Day_Night\\'\\n                else \\'Error\\'\\n                end as Shift, \\n          column_name.Count\\nfrom STG.O_PLN_SUBCONTRACTOR_MANPOWER_STG s\\ncross Apply (\\n                         SELECT     PM_And_Engineers_D     ,     \\'PM & Engineers_D\\'\\n                         UNION ALL SELECT     PM_And_Engineers_N     ,     \\'PM & Engineers_N\\'\\n                         UNION ALL SELECT     PM_And_Engineers_D_N     ,     \\'PM_And_Engineers_D/N\\'\\n                         UNION ALL SELECT     Supervisor_D     ,     \\'Supervisor_D\\'\\n                         UNION ALL SELECT     Supervisor_N     ,     \\'Supervisor_N\\'\\n                         UNION ALL SELECT     Supervisor_D_N     ,     \\'Supervisor_D/N\\'\\n                         UNION ALL SELECT     Foreman_Staff_D     ,     \\'Foreman / Staff_D\\'\\n                         UNION ALL SELECT     Foreman_Staff_N     ,     \\'Foreman / Staff_N\\'\\n                         UNION ALL SELECT     Foreman_Staff_D_N     ,     \\'Foreman / Staff_D/N\\'\\n                         UNION ALL SELECT     Chargehand_D     ,     \\'Chargehand_D\\'\\n                         UNION ALL SELECT     Chargehand_N     ,     \\'Chargehand_N\\'\\n                         UNION ALL SELECT     Chargehand_D_N     ,     \\'Chargehand_D/N\\'\\n                         UNION ALL SELECT     Carpenter_D     ,     \\'Carpenter_D\\'\\n                         UNION ALL SELECT     Carpenter_N     ,     \\'Carpenter_N\\'\\n                         UNION ALL SELECT     Carpenter_D_N     ,     \\'Carpenter_D/N\\'\\n                         UNION ALL SELECT     Mason_D     ,     \\'Mason_D\\'\\n                         UNION ALL SELECT     Mason_N     ,     \\'Mason_N\\'\\n                         UNION ALL SELECT     Mason_D_N     ,     \\'Mason_D/N\\'\\n                         UNION ALL SELECT     Steel_Fitter_D     ,     \\'Steel Fitter_D\\'\\n                         UNION ALL SELECT     Steel_Fitter_N     ,     \\'Steel Fitter_N\\'\\n                         UNION ALL SELECT     Steel_Fitter_D_N     ,     \\'Steel Fitter_D/N\\'\\n                         UNION ALL SELECT     Scaffolder_D     ,     \\'Scaffolder_D\\'\\n                         UNION ALL SELECT     Scaffolder_N     ,     \\'Scaffolder_N\\'\\n                         UNION ALL SELECT     Scaffolder_D_N     ,     \\'Scaffolder_D/N\\'\\n                         UNION ALL SELECT     Operator_D     ,     \\'Operator_D\\'\\n                         UNION ALL SELECT     Operator_N     ,     \\'Operator_N\\'\\n                         UNION ALL SELECT     Operator_D_N     ,     \\'Operator_D/N\\'\\n                         UNION ALL SELECT     Security_D     ,     \\'Security_D\\'\\n                         UNION ALL SELECT     Security_N     ,     \\'Security_N\\'\\n                         UNION ALL SELECT     Security_D_N     ,     \\'Security_D/N\\'\\n                         UNION ALL SELECT     Helper_D     ,     \\'Helper_D\\'\\n                         UNION ALL SELECT     Helper_N     ,     \\'Helper_N\\'\\n                         UNION ALL SELECT     Helper_D_N     ,     \\'Helper_D/N\\'\\n                         UNION ALL SELECT     Steel_Fixers_D     ,     \\'Steel Fixers_D\\'\\n                         UNION ALL SELECT     Steel_Fixers_N     ,     \\'Steel Fixers_N\\'\\n                         UNION ALL SELECT     Steel_Fixers_D_N     ,     \\'Steel Fixers_D/N\\'\\n                         UNION ALL SELECT     Masons_D     ,     \\'Masons_D\\'\\n                         UNION ALL SELECT     Masons_N     ,     \\'Masons_N\\'\\n                         UNION ALL SELECT     Masons_D_N     ,     \\'Masons_D/N\\'\\n                         UNION ALL SELECT     Welder_D     ,     \\'Welder_D\\'\\n                         UNION ALL SELECT     Welder_N     ,     \\'Welder_N\\'\\n                         UNION ALL SELECT     Welder_D_N     ,     \\'Welder_D/N\\'\\n                         UNION ALL SELECT     Rigger_D     ,     \\'Rigger_D\\'\\n                         UNION ALL SELECT     Rigger_N     ,     \\'Rigger_N\\'\\n                         UNION ALL SELECT     Rigger_D_N     ,     \\'Rigger_D/N\\'\\n                         UNION ALL SELECT     Painter_D     ,     \\'Painter_D\\'\\n                         UNION ALL SELECT     Painter_N     ,     \\'Painter_N\\'\\n                         UNION ALL SELECT     Painter_D_N     ,     \\'Painter_D/N\\'\\n                         UNION ALL SELECT     Tile_Mason_D     ,     \\'Tile Mason_D\\'\\n                         UNION ALL SELECT     Tile_Mason_N     ,     \\'Tile Mason_N\\'\\n                         UNION ALL SELECT     Tile_Mason_D_N     ,     \\'Tile Mason_D/N\\'\\n                         UNION ALL SELECT     Gypsum_Carpenter_D     ,     \\'Gypsum Carpenter_D\\'\\n                         UNION ALL SELECT     Gypsum_Carpenter_N     ,     \\'Gypsum Carpenter_N\\'\\n                         UNION ALL SELECT     Gypsum_Carpenter_D_N     ,     \\'Gypsum Carpenter_D/N\\'\\n                         UNION ALL SELECT     Joinery_Carpenter_D     ,     \\'Joinery Carpenter_D\\'\\n                         UNION ALL SELECT     Joinery_Carpenter_N     ,     \\'Joinery Carpenter_N\\'\\n                         UNION ALL SELECT     Joinery_Carpenter_D_N     ,     \\'Joinery Carpenter_D/N\\'\\n                         UNION ALL SELECT     Screed_Mason_D     ,     \\'Screed Mason_D\\'\\n                         UNION ALL SELECT     Screed_Mason_N     ,     \\'Screed Mason_N\\'\\n                         UNION ALL SELECT     Screed_Mason_D_N     ,     \\'Screed Mason_D/N\\'\\n                         UNION ALL SELECT     Marble_Stone_Mason_D     ,     \\'Marble / Stone Mason_D\\'\\n                         UNION ALL SELECT     Marble_Stone_Mason_N     ,     \\'Marble / Stone Mason_N\\'\\n                         UNION ALL SELECT     Marble_Stone_Mason_D_N     ,     \\'Marble / Stone Mason_D/N\\'\\n                         UNION ALL SELECT     Electrician_D     ,     \\'Electrician_D\\'\\n                         UNION ALL SELECT     Electrician_N     ,     \\'Electrician_N\\'\\n                         UNION ALL SELECT     Electrician_D_N     ,     \\'Electrician_D/N\\'\\n                         UNION ALL SELECT     Plumber_D     ,     \\'Plumber_D\\'\\n                         UNION ALL SELECT     Plumber_N     ,     \\'Plumber_N\\'\\n                         UNION ALL SELECT     Plumber_D_N     ,     \\'Plumber_D/N\\'\\n                         UNION ALL SELECT     HVAC_D     ,     \\'HVAC_D\\'\\n                         UNION ALL SELECT     HVAC_N     ,     \\'HVAC_N\\'\\n                         UNION ALL SELECT     HVAC_D_N     ,     \\'HVAC_D/N\\'\\n                         UNION ALL SELECT     Sub_Contractor_D     ,     \\'Sub Contractor_D\\'\\n                         UNION ALL SELECT     Sub_Contractor_N     ,     \\'Sub Contractor_N\\'\\n                         UNION ALL SELECT     Sub_Contractor_D_N     ,     \\'Sub Contractor_D/N\\'\\n                         UNION ALL SELECT     Facade_Technicians_D     ,     \\'Facade Technicians_D\\'\\n                         UNION ALL SELECT     Facade_Technicians_N     ,     \\'Facade Technicians_N\\'\\n                         UNION ALL SELECT     Facade_Technicians_D_N     ,     \\'Facade Technicians_D/N\\'\\n                         UNION ALL SELECT     POP_Mason_D     ,     \\'POP Mason_D\\'\\n                         UNION ALL SELECT     POP_Mason_N     ,     \\'POP Mason_N\\'\\n                         UNION ALL SELECT     POP_Mason_D_N     ,     \\'POP Mason_D/N\\'\\n                         UNION ALL SELECT     Joinery_Polisher_D     ,     \\'Joinery Polisher_D\\'\\n                         UNION ALL SELECT     Joinery_Polisher_N     ,     \\'Joinery Polisher_N\\'\\n                         UNION ALL SELECT     Joinery_Polisher_D_N     ,     \\'Joinery Polisher_D/N\\'\\n                         UNION ALL SELECT     Fitter_D     ,     \\'Fitter_D\\'\\n                         UNION ALL SELECT     Fitter_N     ,     \\'Fitter_N\\'\\n                         UNION ALL SELECT     Fitter_D_N     ,     \\'Fitter_D/N\\'\\n                         UNION ALL SELECT     Deep_Cleaning_D     ,     \\'Deep Cleaning_D\\'\\n                         UNION ALL SELECT     Deep_Cleaning_N     ,     \\'Deep Cleaning_N\\'\\n                         UNION ALL SELECT     Deep_Cleaning_D_N     ,     \\'Deep Cleaning_D/N\\'\\n                         UNION ALL SELECT     Others_D     ,     \\'Others_D\\'\\n                         UNION ALL SELECT     Others_N     ,     \\'Others_N\\'\\n                         UNION ALL SELECT     Others_D_N     ,     \\'Others_D/N\\'\\n                         )as column_name(Count,Trade_uncleaned)\\n                         where \\n                         Count not in (\\'\\',\\' - \\',\\'D/N\\',\\'N\\',\\'D\\',\\'Total\\',\\'SCL Engineer\\',\\'Activity\\',\\'Sub Total\\',\\'Others\\',\\'Deep Cleaning\\',\\'Fitter\\',\\'Joinery Polisher\\',\\'POP Mason\\',\\'Facade Technicians\\',\\'Sub Contractor\\'\\n                         ,\\'HVAC\\',\\'Plumber\\',\\'Electrician\\',\\'Steel Fixer\\',\\'Marble / Stone Mason\\',\\'Screed Mason\\',\\'Joinery Carpenter\\',\\'Gypsum Carpenter\\',\\'Tile Mason\\',\\n                         \\'Painter\\',\\'Rigger\\',\\'Welder\\',\\'Masons\\',\\'Steel Fixers\\',\\'Carpenters\\',\\'Helper\\',\\'Security\\',\\'Operator\\',\\'Scaffolder\\',\\'Steel Fitter\\',\\'Mason\\',\\n                         \\'Carpenter\\',\\'Chargehand\\',\\'Foreman / Staff\\',\\'Supervisor\\',\\'PM_And_Engineers\\',\\'Supervisor\\')\\n                         and Project not in (\\'\\')\\n                         ) as GAR\\n                    LEFT JOIN  [DWH].[PROJECTS_NEW_DIM] P\\n                         ON  GAR.PROJECT=P.PROJECT_IDENTIFIER\\n              LEFT JOIN [DWH].[PLN_SBU_MAPPING_DIM] SM\\n                         ON   GAR.SBU=SM.SBU_IDENTIFIER\\n                    \\n\\n                    \\n\\n                    ',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          Upload_Time as timestamp,",
						"          Project_Id as integer,",
						"          Tower as string,",
						"          Sbu_Id as integer,",
						"          SBU as string,",
						"          Project as string,",
						"          Type as string,",
						"          Sub_Contractor as string,",
						"          Activity as string,",
						"          SCL_Engineer as string,",
						"          Trade as string,",
						"          Shift as string,",
						"          Count as string,",
						"          LoadDate_time as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE [DWH].[PLN_SUBCONTRACTOR_MANPOWER_FACT]'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Id = Id_,",
						"          Upload_Time = upload_time,",
						"          Project_Id = project_id,",
						"          Tower = tower,",
						"          Sbu_Id = sbu_id,",
						"          SBU,",
						"          Project,",
						"          Type = type,",
						"          Sub_Contractor,",
						"          Activity,",
						"          SCL_Engineer,",
						"          Trade,",
						"          Shift,",
						"          Count,",
						"          LoadDate_time = LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PLN_TELEPHONEROOM')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_O_PLN_TELEPHONEROOM_RAW_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "Import data from DS_O_PLN_TELEPHONEROOM_RAW_STG_TRG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PLN_TELEPHONEROOM_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to DS_PLN_TELEPHONEROOM_TRG"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          PROJECT_ID as integer,",
						"          LEVEL_ID as integer,",
						"          SBU_ID as integer,",
						"          PROJECT_IDENTIFIER as string,",
						"          tower as string,",
						"          Sclicer as string,",
						"          Level as string,",
						"          ACTIVITY_ID as integer,",
						"          value as string,",
						"          Type_of_work as string,",
						"          CATEGORY as string,",
						"          Upload_Date as date",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT \\n     P.Sort_ID as PROJECT_ID,\\n    LM.LEVEL_MAP_ID AS LEVEL_ID,\\n    SM.SBU_MAP_ID AS SBU_ID,\\n    P.PROJECT_IDENTIFIER ,\\n    TR.tower    ,\\n    \\'Telephone Room\\' as Sclicer,\\n    TR.[Level]    ,\\n     TR.ACTIVITY_ID    ,\\n    CASE \\n        WHEN TR.value IN (\\'\\',\\'NA\\') THEN \\'0%\\'\\n        ELSE TR.value\\n    END AS value,\\n    TR.Type_of_work    ,\\n    TR.CATEGORY    ,\\n    TR.Upload_Date \\nFROM (\\n        SELECT CAST(O_PLN_TELEPHONEROOM_RAW.upload_time AS DATE) AS Upload_Date,\\n        O_PLN_TELEPHONEROOM_RAW.project_id,\\n        O_PLN_TELEPHONEROOM_RAW.tower,\\n        O_PLN_TELEPHONEROOM_RAW.[Level],\\n        Column_Name.*,\\n        O_PLN_TELEPHONEROOM_MAP.ACTIVITY_ID,\\n        O_PLN_TELEPHONEROOM_MAP.SBU_ID,\\n        O_PLN_TELEPHONEROOM_MAP.CATEGORY,\\n        DENSE_RANK () OVER     (PARTITION BY  project_id\\n                            ORDER BY  CAST(upload_time AS DATE) DESC\\n                            )     Project_Udate_DRANK\\n    FROM STG.O_PLN_TELEPHONEROOM_RAW_STG   O_PLN_TELEPHONEROOM_RAW\\n    CROSS APPLY  (     \\n                 SELECT [Blockwork_Layout]  ,        \\'Blockwork Layout\\'  \\n   UNION ALL SELECT [Blockwork]  ,        \\'Blockwork\\'  \\n   UNION ALL SELECT [MEP_Marking_for_Builders_Work]  ,        \\'MEP Marking for Builders Work\\'  \\n   UNION ALL SELECT [Cutting_&_Chasing_of_Blockwork]  ,        \\'Cutting & Chasing of Blockwork\\'  \\n   UNION ALL SELECT [MEP_Services_Installation]  ,        \\'MEP Services Installation\\'  \\n   UNION ALL SELECT [Wall_MEP_Services_Packing]  ,        \\'Wall MEP Services Packing\\'  \\n   UNION ALL SELECT [Plaster]  ,        \\'Plaster\\'  \\n   UNION ALL SELECT [Screed]  ,        \\'Screed\\'  \\n   UNION ALL SELECT [Ceiling_Stucco_(1st_and_2nd_Coat)]  ,        \\'Ceiling Stucco (1st and 2nd Coat)\\'  \\n   UNION ALL SELECT [Wall_Stucco_(1st_and_2nd_Coat)]  ,        \\'Wall Stucco (1st and 2nd Coat)\\'  \\n   UNION ALL SELECT [Ceiling_First_Coat_Paint]  ,        \\'Ceiling First Coat Paint\\'  \\n   UNION ALL SELECT [Wall_First_Coat_Paint]  ,        \\'Wall First Coat Paint\\'  \\n   UNION ALL SELECT [Installation_of_cable_tray_and_trunking]  ,        \\'Installation of cable tray and trunking\\'  \\n   UNION ALL SELECT [Installation_of_Panels]  ,        \\'Installation of Panels\\'  \\n   UNION ALL SELECT [Cable_laying_and_glanding_works]  ,        \\'Cable laying and glanding works\\'  \\n   --UNION ALL SELECT [ELV_installation] , \\'ELV installation\\'\\n   --UNION ALL SELECT [Dressing_and_termination_of_SMDB]  ,        \\'Dressing and termination of SMDB\\'  \\n   --UNION ALL SELECT [Bus_bar_with_Tap_off_Box_completion]  ,        \\'Bus bar with Tap off Box completion\\'  \\n   UNION ALL SELECT [Fire_Sealant]  ,        \\'Fire Sealant\\'  \\n   UNION ALL SELECT [Epoxy_Grinding]  ,        \\'Epoxy Grinding\\'  \\n   UNION ALL SELECT [Epoxy_Bug_Fill]  ,        \\'Epoxy Bug Fill\\'  \\n   UNION ALL SELECT [Epoxy_Primer]  ,        \\'Epoxy Primer\\'  \\n   UNION ALL SELECT [Epoxy_First_Coat]  ,        \\'Epoxy First Coat\\'  \\n   UNION ALL SELECT [Epoxy_Final_Coat]  ,        \\'Epoxy Final Coat\\'  \\n   UNION ALL SELECT [Floor_Tile]  ,        \\'Floor Tile\\'  \\n   UNION ALL SELECT [Skirting]  ,        \\'Skirting\\'  \\n   UNION ALL SELECT [POP]  ,        \\'POP\\'  \\n   UNION ALL SELECT [Grout]  ,        \\'Grout\\'  \\n   UNION ALL SELECT [Threshold]  ,        \\'Threshold\\'  \\n   UNION ALL SELECT [Door_Frame_Installation]  ,        \\'Door-Frame Installation\\'  \\n   UNION ALL SELECT [Door_Architrave_Installation]  ,        \\'Door-Architrave Installation\\'  \\n   UNION ALL SELECT [Door_Shutter_Installation]  ,        \\'Door-Shutter Installation\\'  \\n   UNION ALL SELECT [Door_Ironmongery_Installation]  ,        \\'Door-Ironmongery Installation\\'  \\n   --UNION ALL SELECT [Signage]  ,        \\'Signage\\'  \\n   UNION ALL SELECT [MEP_Final_Fixtures]  ,        \\'MEP Final Fixtures\\'  \\n   UNION ALL SELECT [Final_Coat_Paint]       ,   \\'Final Coat Paint\\'  \\n                        \\n                              ) AS Column_Name (value,Type_of_work)\\n   INNER JOIN STG.O_PLN_TELEPHONEROOM_MAP_STG  O_PLN_TELEPHONEROOM_MAP \\n    ON Column_Name.Type_of_work = O_PLN_TELEPHONEROOM_MAP.ACTIVITY_SEQUENCE\\n    WHERE VALUE IS NOT NULL\\n     ) TR\\n\\nLEFT JOIN [DWH].[PLN_LEVEL_MAP_ALL_DIM] AS LM\\n     ON          TR.[LEVEL] = LM.[LEVEL]\\nLEFT JOIN  [DWH].[PROJECTS_NEW_DIM] P\\n      ON          TR.PROJECT_ID=P.PROJECT_IDENTIFIER \\nLEFT JOIN [DWH].[PLN_SBU_MAPPING_DIM] SM\\n     ON          TR.SBU_ID=SM.SBU_IDENTIFIER\\nwhere Project_Udate_DRANK=1',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Project_ID as integer,",
						"          Project_Identifier as string,",
						"          SBU_ID as integer,",
						"          Level_ID as integer,",
						"          Tower as string,",
						"          Level as string,",
						"          Sclicer as string,",
						"          Activity_ID as integer,",
						"          Value as string,",
						"          Type_of_work as string,",
						"          Category as string,",
						"          Update_Date as date,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE [DWH].[PLN_TELEPHONEROOM_FACT];'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Project_ID = PROJECT_ID,",
						"          Project_Identifier = PROJECT_IDENTIFIER,",
						"          SBU_ID,",
						"          Level_ID = LEVEL_ID,",
						"          Tower = tower,",
						"          Level,",
						"          Sclicer,",
						"          Activity_ID = ACTIVITY_ID,",
						"          Value = value,",
						"          Type_of_work,",
						"          Category = CATEGORY,",
						"          Update_Date = Upload_Date,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PLN_WATERROOM')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_O_PLN_WATERROOM_RAW_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "Import data from DS_O_PLN_WATERROOM_RAW_STG_TRG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PLN_WATERROOM_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to DS_PLN_WATERROOM_TRG"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          PROJECT_ID as integer,",
						"          LEVEL_ID as integer,",
						"          SBU_ID as integer,",
						"          PROJECT_IDENTIFIER as string,",
						"          tower as string,",
						"          Level as string,",
						"          ACTIVITY_ID as integer,",
						"          Sclicer as string,",
						"          value as string,",
						"          Type_of_work as string,",
						"          CATEGORY as string,",
						"          Upload_Date as date",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT \\n     P.Sort_ID as PROJECT_ID,\\n    LM.LEVEL_MAP_ID AS LEVEL_ID,\\n    SM.SBU_MAP_ID AS SBU_ID,\\n    P.PROJECT_IDENTIFIER ,\\n     WR.tower    ,\\n    WR.[Level]    ,\\n    WR.ACTIVITY_ID    ,\\n    \\'Water Room\\' as Sclicer,\\n    CASE \\n        WHEN WR.value IN (\\'\\',\\'NA\\') THEN \\'0%\\'\\n        ELSE WR.value\\n    END AS value,\\n    WR.Type_of_work    ,\\n    WR.CATEGORY    ,\\n    WR.Upload_Date \\n\\nFROM (\\n        SELECT CAST(O_PLN_WATERROOM_RAW.upload_time AS DATE) AS Upload_Date,\\n        O_PLN_WATERROOM_RAW.project_id,\\n        O_PLN_WATERROOM_RAW.tower,\\n        O_PLN_WATERROOM_RAW.[Level],\\n        Column_Name.*,\\n        O_PLN_WATERROOM_MAP.ACTIVITY_ID,\\n        O_PLN_WATERROOM_MAP.SBU_ID,\\n        O_PLN_WATERROOM_MAP.CATEGORY,\\n        DENSE_RANK () OVER     (PARTITION BY  project_id\\n                            ORDER BY  CAST(upload_time AS DATE) DESC\\n                            )     Project_Udate_DRANK\\n    from STG.O_PLN_WATERROOM_RAW_STG   O_PLN_WATERROOM_RAW\\n    CROSS APPLY  (\\n                SELECT  [Blockwork_Layout]  ,     \\'Blockwork Layout\\'  \\n   UNION ALL SELECT          [Blockwork]  ,        \\'Blockwork\\'  \\n   UNION ALL SELECT          [MEP_Marking_for_Builders_Work]  ,        \\'MEP Marking for Builders Work\\'  \\n   UNION ALL SELECT          [Cutting_AND_Chasing_of_Blockwork]  ,        \\'Cutting & Chasing of Blockwork\\'  \\n   UNION ALL SELECT          [MEP_Services_Installation]  ,        \\'MEP Services Installation\\'  \\n   UNION ALL SELECT          [Wall_MEP_Services_Packing]  ,        \\'Wall MEP Services Packing\\'  \\n   UNION ALL SELECT          [Plaster]  ,        \\'Plaster\\'  \\n   UNION ALL SELECT          [Core_Cutting_and_Chipping]  ,        \\'Core Cutting & Chipping\\'  \\n   UNION ALL SELECT          [MEP_Sleeve_Installation]  ,        \\'MEP Sleeve Installation\\'  \\n   UNION ALL SELECT          [Bore_Packing]  ,        \\'Bore Packing\\'  \\n   UNION ALL SELECT          [Screed]  ,        \\'Screed\\'  \\n   UNION ALL SELECT          [Wall_Primer]  ,        \\'Wall Primer\\'  \\n   UNION ALL SELECT          [Wall_Stucco_1st_and_2nd_Coat]  ,        \\'Wall Stucco (1st and 2nd Coat)\\'  \\n   UNION ALL SELECT          [Wall_First_Coat_Paint]  ,        \\'Wall First Coat Paint\\'  \\n   UNION ALL SELECT          [Installation_of_PPR_pipes]  ,        \\'Installation of PPR pipes\\'  \\n   UNION ALL SELECT          [Manifold_and_Valve_installation]  ,        \\'Manifold & Valve installation\\'  \\n   UNION ALL SELECT          [PRV_installation_and_connections]  ,        \\'PRV installation & connections\\'  \\n   UNION ALL SELECT          [Testing_of_Pipes]  ,        \\'Testing of Pipes\\'  \\n   UNION ALL SELECT          [Fire_Sealant_Works]  ,        \\'Fire Sealant Works\\'  \\n   UNION ALL SELECT          [MEP_Framing_Clearance]  ,        \\'MEP Framing Clearance\\'  \\n   UNION ALL SELECT          [False_Ceiling_Framing]  ,        \\'False Ceiling Framing\\'  \\n   UNION ALL SELECT          [MEP_Boarding_Clearance]  ,        \\'MEP Boarding Clearance\\'  \\n   UNION ALL SELECT          [False_Ceiling_Boarding]  ,        \\'False Ceiling Boarding\\'  \\n   UNION ALL SELECT          [Ceiling_Primer]  ,        \\'Ceiling Primer\\'  \\n   UNION ALL SELECT          [Ceiling_Stucco_1st_and_2nd_Coat]  ,        \\'Ceiling Stucco (1st and 2nd Coat)\\'  \\n   UNION ALL SELECT          [First_Coat_Paint]  ,        \\'First Coat Paint\\'  \\n   UNION ALL SELECT          [Threshold]  ,        \\'Threshold\\'  \\n   --UNION ALL SELECT          [Floor Tile]  ,        \\'Floor Tile\\'  \\n   UNION ALL SELECT          [Door_Frame_Installation]  ,        \\'Door-Frame Installation\\'  \\n   UNION ALL SELECT          [Door_Architrave_Installation]  ,        \\'Door-Architrave Installation\\'  \\n   UNION ALL SELECT          [Door_Shutter_Installation]  ,        \\'Door-Shutter Installation\\'  \\n   UNION ALL SELECT          [Door_Ironmongery_Installation]  ,        \\'Door-Ironmongery Installation\\'  \\n   --UNION ALL SELECT          [Door-Silicone]  ,        \\'Door-Silicone\\'  \\n   UNION ALL SELECT          [Epoxy_Grinding]  ,        \\'Epoxy Grinding\\'  \\n   UNION ALL SELECT          [Epoxy_Bug_Fill]  ,        \\'Epoxy Bug Fill\\'  \\n   UNION ALL SELECT          [Epoxy_Primer]  ,        \\'Epoxy Primer\\'  \\n   UNION ALL SELECT          [Epoxy_First_Coat]  ,        \\'Epoxy First Coat\\'  \\n   UNION ALL SELECT          [Epoxy_Final_Coat]  ,        \\'Epoxy Final Coat\\'  \\n   UNION ALL SELECT          [Skirting]  ,        \\'Skirting\\'  \\n   UNION ALL SELECT          [POP_Works]  ,        \\'POP Works\\'  \\n   UNION ALL SELECT          [Grouting]  ,        \\'Grouting\\'  \\n   UNION ALL SELECT          [Silicone]  ,        \\'Silicone\\'  \\n   --UNION ALL SELECT          [Signage]  ,        \\'Signage\\'  \\n   UNION ALL SELECT          [MEP_Final_Fixtures]  ,        \\'MEP Final Fixtures\\'  \\n   UNION ALL SELECT          [PSV_Installation]  ,        \\'Pressure Safety Valve Installation\\'  \\n   UNION ALL SELECT          [Water_Meter_Installation]  ,        \\'Water Meter Installation\\'  \\n   UNION ALL SELECT          [Final_Coat_Paint]       ,   \\'Final Coat Paint\\'\\n    )\\n        as Column_Name (value,Type_of_work)\\n          \\n    JOIN [STG].[O_PLN_WATERROOM_MAP_STG]  O_PLN_WATERROOM_MAP\\n    ON Column_Name.Type_of_work = O_PLN_WATERROOM_MAP.ACTIVITY_SEQUENCE\\n    WHERE value IS NOT NULL\\n     ) WR\\n\\nINNER JOIN [DWH].[PLN_LEVEL_MAP_ALL_DIM] AS LM\\n     ON          WR.[LEVEL] = LM.[LEVEL]\\nLEFT JOIN  [DWH].[PROJECTS_NEW_DIM] P\\n      ON          WR.PROJECT_ID=P.PROJECT_IDENTIFIER \\nLEFT JOIN [DWH].[PLN_SBU_MAPPING_DIM] SM\\n     ON          WR.SBU_ID=SM.SBU_IDENTIFIER\\nWHERE          WR.Project_Udate_DRANK = 1',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Project_ID as integer,",
						"          Project_Identifier as string,",
						"          SBU_ID as integer,",
						"          Level_ID as integer,",
						"          Tower as string,",
						"          Level as string,",
						"          Sclicer as string,",
						"          Activity_ID as integer,",
						"          Value as string,",
						"          Type_of_work as string,",
						"          Category as string,",
						"          Update_Date as date,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE [DWH].[PLN_WATERROOM_FACT];'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Project_ID = PROJECT_ID,",
						"          Project_Identifier = PROJECT_IDENTIFIER,",
						"          SBU_ID,",
						"          Level_ID = LEVEL_ID,",
						"          Tower = tower,",
						"          Level,",
						"          Sclicer,",
						"          Activity_ID = ACTIVITY_ID,",
						"          Value = value,",
						"          Type_of_work,",
						"          Category = CATEGORY,",
						"          Update_Date = Upload_Date,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PLN_WETAREA')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_O_PLN_WETAREA_RAW_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PLN_WETAREA_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          PROJECT_ID as integer,",
						"          LEVEL_ID as integer,",
						"          PROJECT_IDENTIFIER as string,",
						"          SBU_ID as integer,",
						"          TOWER as string,",
						"          LEVEL as string,",
						"          FLAT as string,",
						"          Sclicer as string,",
						"          ACTIVITY_ID as integer,",
						"          VALUE as string,",
						"          TYPE_OF_WORK as string,",
						"          CATEGORY as string,",
						"          UPLOAD_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT\\n     P.Sort_ID as PROJECT_ID,\\n    LM.LEVEL_MAP_ID AS LEVEL_ID,\\n    P.PROJECT_IDENTIFIER ,\\n     SM.SBU_MAP_ID AS SBU_ID,\\n    WT.TOWER,\\n    WT.[LEVEL],\\n    WT.FLAT,\\n    \\'Wet Area\\' as Sclicer,\\n     WT.ACTIVITY_ID,\\n    CASE \\n        WHEN WT.VALUE IN (\\'\\',\\'NA\\') THEN \\'0%\\'\\n        ELSE WT.VALUE\\n    END AS VALUE,\\n    WT.TYPE_OF_WORK,\\n    WT.CATEGORY,\\n     WT.UPLOAD_DATE\\nFROM\\n     (SELECT\\n          WR.UPLOAD_TIME AS UPLOAD_DATE,\\n          WR.PROJECT_ID,\\n          WR.TOWER,\\n          WR.[LEVEL],\\n          WR.FLAT,\\n          COLUMN_NAME.*,\\n          WM.ACTIVITY_ID,\\n          WM.SBU_ID,\\n          WM.CATEGORY,\\n          DENSE_RANK () OVER (PARTITION BY  PROJECT_ID ORDER BY Convert(Date,UPLOAD_TIME) DESC)   AS  DRANK\\n     FROM [STG].[O_PLN_WETAREA_RAW_STG] WR\\n     CROSS APPLY (\\n                                SELECT  [Plastering_Clearance_with_1_Mtr_Marking],\\'PLASTERING CLEARANCE WITH 1 MTR MARKING\\'\\n                    UNION ALL SELECT  [Wet_Area_Tile_Marking],\\'WET AREA TILE MARKING\\'\\n                    UNION ALL SELECT  [MEP_Marking],\\'MEP MARKING\\'\\n                    UNION ALL SELECT  [Wet_Area_Cutting_And_Chasing],\\'WET AREA CUTTING & CHASING\\'\\n                    UNION ALL SELECT  [Pex_pipe_installation],\\'PEX PIPE INSTALLATION\\'\\n                    UNION ALL SELECT  [Re_packing_of_MEP_Services],\\'RE PACKING OF MEP SERVICES\\'\\n                    UNION ALL SELECT  [MEP_Pipe_installation_Borepacking],\\'MEP PIPE INSTALLATION - BOREPACKING\\'\\n                    UNION ALL SELECT  [Wet_Area_Bore_Packing],\\'WET AREA BORE PACKING\\'\\n                    UNION ALL SELECT  [Cistern_installation],\\'CISTERN INSTALLATION\\'\\n                    UNION ALL SELECT  [Drywall_framing],\\'DRYWALL FRAMING\\'\\n                    UNION ALL SELECT  [Pex_Elbow_Connections],\\'PEX ELBOW & CONNECTIONS\\'\\n                    UNION ALL SELECT  [Bottom_Boarding_Clearance],\\'BOTTOM BOARDING CLEARANCE\\'\\n                    UNION ALL SELECT  [Bottom_boarding] ,\\'BOTTOM BOARDING\\'\\n                    UNION ALL SELECT  [Under_Screed_Waterproofing],\\'UNDER SCREED WATERPROOFING\\'\\n                    UNION ALL SELECT  [Wet_Area_Screed],\\'WET AREA SCREED\\'\\n                    UNION ALL SELECT  [Ledge_Wall_Full_Board_Closure_Clearance],\\'LEDGE WALL FULL BOARD CLOSURE CLEARANCE\\'\\n                    UNION ALL SELECT  [MEP_HL_Water_Supply_Drainage],\\'MEP HL WATER SUPPLY & DRAINAGE \\'\\n                    UNION ALL SELECT  [MEP_HL_Ducting_FCU_Works],\\'MEP HL DUCTING & FCU WORKS \\'\\n                    UNION ALL SELECT  [MEP_HL_Electrical_Services_Installation],\\'MEP HL ELECTRICAL SERVICES INSTALLATION\\'\\n                    UNION ALL SELECT  [MEP_HL_Works_Testing],\\'MEP HL WORKS & TESTING\\'\\n                    UNION ALL SELECT  [MEP_HL_Packing_Clearance],\\'MEP HL PACKING CLEARANCE\\'\\n                    UNION ALL SELECT  [Packing_for_all_builders_work_opening],\\'PACKING FOR ALL BUILDERS WORK OPENING \\'\\n                    UNION ALL SELECT  [Wet_Area_MEP_H_L_Fire_Sealent_Framing_Clearance],\\'WET AREA MEP H/L FIRE SEALENT & FRAMING CLEARANCE \\'\\n                    UNION ALL SELECT  [Wet_area_Wall_Tile],\\'WET AREA WALL TILE\\'\\n                    UNION ALL SELECT  [Wet_Area_FC_Framing],\\'WET AREA FC FRAMING\\'\\n                    UNION ALL SELECT  [Wet_Area_MEP_H_L_Boarding_Clearance],\\'WET AREA MEP H/L BOARDING CLEARANCE\\'\\n                    UNION ALL SELECT  [FC_Boarding_Joint_Taping],\\'FC BOARDING & JOINT TAPING\\'\\n                    UNION ALL SELECT  [Ceiling_Paint_Primer],\\'CEILING PAINT PRIMER\\'\\n                    UNION ALL SELECT  [Ceiling_Paint_Stucco_1st_Coat_2nd_Coat],\\'CEILING PAINT STUCCO 1ST COAT & 2ND COAT\\'\\n                    UNION ALL SELECT  [Wet_Area_Ceiling_First_Coat_Paint],\\'WET AREA CEILING FIRST COAT PAINT\\'\\n                    UNION ALL SELECT  [MEP_Grill_Diffuser_Installtion],\\'MEP GRILL & DIFFUSER INSTALLTION \\'\\n                    UNION ALL SELECT  [Shower_Threshold],\\'SHOWER THRESHOLD\\'\\n                    UNION ALL SELECT  [Linear_Drain_Supply],\\'LINEAR DRAIN SUPPLY\\'\\n                    UNION ALL SELECT  [Linear_Drain_Fixing],\\'LINEAR DRAIN FIXING \\'\\n                    UNION ALL SELECT  [Under_Tile_Waterproofing],\\'UNDER TILE WATERPROOFING\\'\\n                    UNION ALL SELECT  [Bathroom_Door_Threshold],\\'BATHROOM DOOR THRESHOLD\\'\\n                    UNION ALL SELECT  [Wet_Area_Floor_Tile],\\'WET AREA FLOOR TILE\\'\\n                    UNION ALL SELECT  [Wall_tile_bottom_Tile],\\'WALL TILE BOTTOM TILE\\'\\n                    UNION ALL SELECT  [Grouting_Wall_Floor],\\'GROUTING - WALL & FLOOR\\'\\n                    UNION ALL SELECT  [Silicone_Wall_Floor_Corners],\\'SILICONE - WALL & FLOOR CORNERS\\'\\n                    UNION ALL SELECT  [Shower_Partition_U_channel],\\'SHOWER PARTITION - U CHANNEL\\'\\n                    UNION ALL SELECT  [Shower_Partition_Glass],\\'SHOWER PARTITION - GLASS\\'\\n                    UNION ALL SELECT  [Accessories_Silicon],\\'ACCESSORIES & SILICON\\'\\n                    UNION ALL SELECT  [Bathroom_Door_Frame_Installation],\\'BATHROOM DOOR - FRAME INSTALLATION\\'\\n                    UNION ALL SELECT  [Bathroom_Door_Architrave_Installation],\\'BATHROOM DOOR - ARCHITRAVE INSTALLATION\\'\\n                    UNION ALL SELECT  [Bathroom_Door_Shutter_Installation],\\'BATHROOM DOOR - SHUTTER INSTALLATION\\'\\n                    UNION ALL SELECT  [Bathroom_Door_Ironmongery_Installation],\\'BATHROOM DOOR - IRONMONGERY INSTALLATION\\'\\n                    UNION ALL SELECT  [Vanity_Cabinet],\\'VANITY CABINET\\'\\n                    UNION ALL SELECT  [Vanity_Cabinet_Counter_top],\\'VANITY CABINET COUNTER TOP\\'\\n                    UNION ALL SELECT  [MEP_Final_Fixtures_Sanitary_CP_fittings_Lights_WB],\\'MEP FINAL FIXTURES (SANITARY ,CP FITTINGS & LIGHTS,WB)\\'\\n                    UNION ALL SELECT  [MEP_Ledge_Wall_Clearance],\\'MEP LEDGE WALL CLEARANCE \\'\\n                    UNION ALL SELECT  [Ledge_Wall_Closing],\\'LEDGE WALL CLOSING\\'\\n                    UNION ALL SELECT  [Silicone_around_MEP_Fixtures],\\'SILICONE AROUND MEP FIXTURES\\'\\n                    UNION ALL SELECT  [Wet_Area_Final_Coat_paint],\\'WET AREA FINAL COAT PAINT\\'\\n               )AS COLUMN_NAME(VALUE,TYPE_OF_WORK)\\n     INNER JOIN     [STG].[O_PLN_WETAREA_MAP_STG] WM\\n          ON          COLUMN_NAME.TYPE_OF_WORK = WM.ACTIVITY_SEQUENCE\\n     WHERE          VALUE IS NOT NULL) WT\\nLEFT JOIN [DWH].[PLN_LEVEL_MAP_ALL_DIM] AS LM\\n     ON          WT.[LEVEL] = LM.[LEVEL]\\nLEFT JOIN  [DWH].[PROJECTS_NEW_DIM] P\\n      ON          WT.PROJECT_ID=P.PROJECT_IDENTIFIER \\nLEFT JOIN [DWH].[PLN_SBU_MAPPING_DIM] SM\\n     ON          WT.SBU_ID=SM.SBU_IDENTIFIER\\nWHERE          WT.DRANK = 1',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Project_ID as integer,",
						"          Project_Identifier as string,",
						"          SBU_ID as integer,",
						"          Level_ID as integer,",
						"          Tower as string,",
						"          Level as string,",
						"          Flat as integer,",
						"          Sclicer as string,",
						"          Activity_ID as integer,",
						"          Value as string,",
						"          Type_of_work as string,",
						"          Category as string,",
						"          Update_Date as date,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE [DWH].[PLN_WETAREA_FACT];'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Project_ID = PROJECT_ID,",
						"          Project_Identifier = PROJECT_IDENTIFIER,",
						"          SBU_ID,",
						"          Level_ID = LEVEL_ID,",
						"          Tower = TOWER,",
						"          Level = LEVEL,",
						"          Flat = FLAT,",
						"          Sclicer,",
						"          Activity_ID = ACTIVITY_ID,",
						"          Value = VALUE,",
						"          Type_of_work = TYPE_OF_WORK,",
						"          Category = CATEGORY,",
						"          Update_Date = UPLOAD_DATE,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PROJECTS_NEW')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Dimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_PROJECTS_NEW_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "Import data from DS_PROJECTS_NEW_STG_TRG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PROJECTS_NEW_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to DS_PROJECTS_NEW_TRG"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          Sort_ID as integer,",
						"          Project_Identifier as string,",
						"          FLAT_COUNT as integer,",
						"          Project_Short as string,",
						"          Total_Floors as integer,",
						"          Total_Podiums as integer,",
						"          Total_Typical_Floor as integer,",
						"          Typical_Floor_Slab as integer,",
						"          Podium_Slab as integer,",
						"          ONE_BHK as integer,",
						"          TWO_BHK as integer,",
						"          ONE_FIVE_BHK as integer,",
						"          TWO_FIVE_BHK as integer,",
						"          THEREE_BHK as integer,",
						"          FOUR_BHK as integer,",
						"          FIVE_BHK as integer,",
						"          Actual_Start as timestamp,",
						"          BOQ_Value as string,",
						"          Bathrooms as integer,",
						"          Center_Tower as string,",
						"          Built_Up_Area as string,",
						"          Chairman_Lift as string,",
						"          Delay as string,",
						"          Duplex as string,",
						"          Fire_Lifts as integer,",
						"          Forecast_Duration as integer,",
						"          Forecast_Finish as timestamp,",
						"          Lat as string,",
						"          Long as string,",
						"          Office_Space as integer,",
						"          Office_Use_Lift as integer,",
						"          Parkings as integer,",
						"          Pent_House as integer,",
						"          Passenger_Lift as integer,",
						"          Project_Configuration as string,",
						"          Project_Duration as integer,",
						"          Project_Finish as timestamp,",
						"          Project_Start as timestamp,",
						"          Residence_Use_Lift as integer,",
						"          Retail as integer,",
						"          Service_Lift as integer,",
						"          Staircase_GF_L1 as integer,",
						"          Staircase_GF_Roof as integer,",
						"          Total_Units as integer,",
						"          Tower_A as string,",
						"          Tower_B as string,",
						"          Tower_C as string,",
						"          Tower_D as string,",
						"          Towers as string,",
						"          Image_Link as string,",
						"          Render_Image as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Sort_ID as integer,",
						"          Project_Identifier as string,",
						"          FLAT_COUNT as integer,",
						"          Project_Short as string,",
						"          Total_Floors as integer,",
						"          Total_Podiums as integer,",
						"          Total_Typical_Floor as integer,",
						"          Typical_Floor_Slab as integer,",
						"          Podium_Slab as integer,",
						"          ONE_BHK as integer,",
						"          TWO_BHK as integer,",
						"          ONE_FIVE_BHK as integer,",
						"          TWO_FIVE_BHK as integer,",
						"          THEREE_BHK as integer,",
						"          FOUR_BHK as integer,",
						"          FIVE_BHK as integer,",
						"          Actual_Start as timestamp,",
						"          BOQ_Value as string,",
						"          Bathrooms as integer,",
						"          Center_Tower as string,",
						"          Built_Up_Area as string,",
						"          Chairman_Lift as string,",
						"          Delay as string,",
						"          Duplex as string,",
						"          Fire_Lifts as integer,",
						"          Forecast_Duration as integer,",
						"          Forecast_Finish as timestamp,",
						"          Lat as string,",
						"          Long as string,",
						"          Office_Space as integer,",
						"          Office_Use_Lift as integer,",
						"          Parkings as integer,",
						"          Pent_House as integer,",
						"          Passenger_Lift as integer,",
						"          Project_Configuration as string,",
						"          Project_Duration as integer,",
						"          Project_Finish as timestamp,",
						"          Project_Start as timestamp,",
						"          Residence_Use_Lift as integer,",
						"          Retail as integer,",
						"          Service_Lift as integer,",
						"          Staircase_GF_L1 as integer,",
						"          Staircase_GF_Roof as integer,",
						"          Total_Units as integer,",
						"          Tower_A as string,",
						"          Tower_B as string,",
						"          Tower_C as string,",
						"          Tower_D as string,",
						"          Towers as string,",
						"          Image_Link as string,",
						"          Render_Image as string,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE [DWH].[PROJECTS_NEW_DIM];'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Sort_ID,",
						"          Project_Identifier,",
						"          FLAT_COUNT,",
						"          Project_Short,",
						"          Total_Floors,",
						"          Total_Podiums,",
						"          Total_Typical_Floor,",
						"          Typical_Floor_Slab,",
						"          Podium_Slab,",
						"          ONE_BHK,",
						"          TWO_BHK,",
						"          ONE_FIVE_BHK,",
						"          TWO_FIVE_BHK,",
						"          THEREE_BHK,",
						"          FOUR_BHK,",
						"          FIVE_BHK,",
						"          Actual_Start,",
						"          BOQ_Value,",
						"          Bathrooms,",
						"          Center_Tower,",
						"          Built_Up_Area,",
						"          Chairman_Lift,",
						"          Delay,",
						"          Duplex,",
						"          Fire_Lifts,",
						"          Forecast_Duration,",
						"          Forecast_Finish,",
						"          Lat,",
						"          Long,",
						"          Office_Space,",
						"          Office_Use_Lift,",
						"          Parkings,",
						"          Pent_House,",
						"          Passenger_Lift,",
						"          Project_Configuration,",
						"          Project_Duration,",
						"          Project_Finish,",
						"          Project_Start,",
						"          Residence_Use_Lift,",
						"          Retail,",
						"          Service_Lift,",
						"          Staircase_GF_L1,",
						"          Staircase_GF_Roof,",
						"          Total_Units,",
						"          Tower_A,",
						"          Tower_B,",
						"          Tower_C,",
						"          Tower_D,",
						"          Towers,",
						"          Image_Link,",
						"          Render_Image,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SA_DIM_USERINFO')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Dimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SA_DIM_USERINFO_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "Import data from DS_SA_DIM_USERINFO_STG_TRG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SA_DIM_USERINFO_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to DS_SA_DIM_USERINFO_TRG"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          UserID as integer,",
						"          Badgenumber as string,",
						"          DefaultdeptID as integer,",
						"          Name as string,",
						"          Password as string,",
						"          Card as string,",
						"          Privilege as string,",
						"          AccGroup as string,",
						"          TimeZones as string,",
						"          Gender as string,",
						"          Birthday as timestamp,",
						"          street as string,",
						"          zip as string,",
						"          ophone as string,",
						"          FPHONE as string,",
						"          pager as string,",
						"          minzu as string,",
						"          title as string,",
						"          SN as string,",
						"          SSN as string,",
						"          UTime as timestamp,",
						"          State as string,",
						"          City as string,",
						"          SECURITYFLAGS as short,",
						"          DelTag as short,",
						"          RegisterOT as integer,",
						"          AutoSchPlan as string,",
						"          MinAutoSchInterval as string,",
						"          Image_id as integer,",
						"          Last_Refresh_Date as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          UserID as integer,",
						"          Badgenumber as string,",
						"          DefaultdeptID as integer,",
						"          Name as string,",
						"          Password as string,",
						"          Card as string,",
						"          Privilege as string,",
						"          AccGroup as string,",
						"          TimeZones as string,",
						"          Gender as string,",
						"          Birthday as timestamp,",
						"          street as string,",
						"          zip as string,",
						"          ophone as string,",
						"          FPHONE as string,",
						"          pager as string,",
						"          minzu as string,",
						"          title as string,",
						"          SN as string,",
						"          SSN as string,",
						"          UTime as timestamp,",
						"          State as string,",
						"          City as string,",
						"          SECURITYFLAGS as integer,",
						"          DelTag as integer,",
						"          RegisterOT as integer,",
						"          AutoSchPlan as string,",
						"          MinAutoSchInterval as string,",
						"          Image_id as integer,",
						"          Last_Refresh_Date as timestamp,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE [DWH].[SA_DIM_USERINFO_DIM];'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          UserID,",
						"          Badgenumber,",
						"          DefaultdeptID,",
						"          Name,",
						"          Password,",
						"          Card,",
						"          Privilege,",
						"          AccGroup,",
						"          TimeZones,",
						"          Gender,",
						"          Birthday,",
						"          street,",
						"          zip,",
						"          ophone,",
						"          FPHONE,",
						"          pager,",
						"          minzu,",
						"          title,",
						"          SN,",
						"          SSN,",
						"          UTime,",
						"          State,",
						"          City,",
						"          SECURITYFLAGS,",
						"          DelTag,",
						"          RegisterOT,",
						"          AutoSchPlan,",
						"          MinAutoSchInterval,",
						"          Image_id,",
						"          Last_Refresh_Date,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SA_FACT_CHECKINOUT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SA_FACT_CHECKINOUT_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "Import data from DS_SA_FACT_CHECKINOUT_STG_TRG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SA_FACT_CHECKINOUT_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to DS_SA_FACT_CHECKINOUT_TRG"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          Fact_CheckinoutID as integer,",
						"          Userid as integer,",
						"          Checktime as timestamp,",
						"          Checktype as string,",
						"          Verifycode as integer,",
						"          SN as string,",
						"          SensorID as string,",
						"          WorkCode as string,",
						"          Reserved as string,",
						"          Last_Refresh_Date as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Fact_CheckinoutID as integer,",
						"          Userid as integer,",
						"          Checktime as timestamp,",
						"          Checktype as string,",
						"          Verifycode as integer,",
						"          SN as string,",
						"          SensorID as string,",
						"          WorkCode as string,",
						"          Reserved as string,",
						"          Last_Refresh_Date as timestamp,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE [DWH].[SA_FACT_CHECKINOUT_FACT];'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Fact_CheckinoutID,",
						"          Userid,",
						"          Checktime,",
						"          Checktype,",
						"          Verifycode,",
						"          SN,",
						"          SensorID,",
						"          WorkCode,",
						"          Reserved,",
						"          Last_Refresh_Date,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SA_MANPOWER_MASTER')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Dimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SA_MANPOWER_MASTER_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "Import data from DS_SA_MANPOWER_MASTER_STG_TRG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SA_MANPOWER_MASTER_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to DS_SA_MANPOWER_MASTER_TRG"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          Manpower_Master_ID as integer,",
						"          Upload_time as timestamp,",
						"          Project_id as integer,",
						"          Project as string,",
						"          SBU as string,",
						"          Sbu_map_id as integer,",
						"          Tower as string,",
						"          SL_NO as string,",
						"          EMP_ID_NO as string,",
						"          TECHNICIAN_NAME as string,",
						"          ACTUAL_DOJ as string,",
						"          TRADE_AS_PER_ADMIN as string,",
						"          TRADE_GROUP as string,",
						"          WORK_STATUS_COST_HEAD as string,",
						"          DIVISION as string,",
						"          UNIT as string,",
						"          WORK_STATUS as string,",
						"          SHIFT as string,",
						"          COMPANY as string,",
						"          SOURCE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select \\n     --[Upload_Date]  \\n     --, [Project_Sclicer] \\n     --, [SBU] \\n     [Manpower_Master_ID] ,\\n     [Upload_time] ,\\n     p.[Project_id] ,\\n     pp.Project_id AS Project,\\n     pp.sbu_id AS SBU,\\n     sm.[Sbu_map_id] ,\\n     [Tower] ,\\n     [SL_NO] ,\\n     [EMP_ID_NO] ,\\n     [TECHNICIAN_NAME] ,\\n     [ACTUAL_DOJ] ,\\n     [TRADE_AS_PER_ADMIN] ,\\n     [TRADE_GROUP] ,\\n     [WORK_STATUS_COST_HEAD] ,\\n     [DIVISION] ,\\n     [UNIT] ,\\n     [WORK_STATUS] ,\\n     [SHIFT],\\n     [COMPANY] ,\\n     [SOURCE]\\nFROM STG.SA_MANPOWER_MASTER_STG PP\\nLEFT JOIN [DWH].[PLN_PROJECTS_DIM] P\\n      ON          PP.Project_id=P.PROJECT_IDENTIFIER \\n     LEFT JOIN [DWH].[PLN_SBU_MAPPING_DIM] SM\\n     ON          PP.SBU_id=SM.SBU_IDENTIFIER\\n\\n',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          Manpower_Master_ID as integer,",
						"          Upload_time as timestamp,",
						"          Project_id as integer,",
						"          Project as string,",
						"          SBU as string,",
						"          Tower as string,",
						"          Sbu_id as integer,",
						"          SL_NO as string,",
						"          EMP_ID_NO as string,",
						"          TECHNICIAN_NAME as string,",
						"          ACTUAL_DOJ as string,",
						"          TRADE_AS_PER_ADMIN as string,",
						"          TRADE_GROUP as string,",
						"          WORK_STATUS_COST_HEAD as string,",
						"          DIVISION as string,",
						"          UNIT as string,",
						"          WORK_STATUS as string,",
						"          SHIFT as string,",
						"          COMPANY as string,",
						"          SOURCE as string,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE [DWH].[SA_MANPOWER_MASTER_DIM];'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Id = ID,",
						"          Manpower_Master_ID,",
						"          Upload_time,",
						"          Project_id,",
						"          Project,",
						"          SBU,",
						"          Tower,",
						"          Sbu_id = Sbu_map_id,",
						"          SL_NO,",
						"          EMP_ID_NO,",
						"          TECHNICIAN_NAME,",
						"          ACTUAL_DOJ,",
						"          TRADE_AS_PER_ADMIN,",
						"          TRADE_GROUP,",
						"          WORK_STATUS_COST_HEAD,",
						"          DIVISION,",
						"          UNIT,",
						"          WORK_STATUS,",
						"          SHIFT,",
						"          COMPANY,",
						"          SOURCE,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_WOODEN_DOOR')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_O_PLN_DOORMANPOWER_MAP_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "Import data from DS_O_PLN_DOOR_DELIVERY_RAW_STG_TRG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_WOODEN_DOOR_FACT_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          Upload_Date as date,",
						"          PROJECT_ID as integer,",
						"          LEVEL_ID as integer,",
						"          SBU_ID as integer,",
						"          PROJECT_IDENTIFIER as string,",
						"          tower as string,",
						"          Building as string,",
						"          Type as string,",
						"          Level as string,",
						"          Flat_No as string,",
						"          Door_Type as string,",
						"          Jamb_Width as string,",
						"          Orientation as string,",
						"          Door_Id as string,",
						"          Fire_Rating as string,",
						"          Frame as string,",
						"          Foam as string,",
						"          Architrave as string,",
						"          Shutter as string,",
						"          Ironmongery as string,",
						"          Installer as string,",
						"          Total as string,",
						"          SC_Short as string,",
						"          SC_NAME as string,",
						"          DATE_WISE_SPLIT as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT          Sort.Upload_Date,\\n                P.Sort_ID as PROJECT_ID,\\n                    LM.LEVEL_MAP_ID AS LEVEL_ID,\\n                    SM.SBU_MAP_ID AS SBU_ID,\\n                    P.PROJECT_IDENTIFIER,\\n                Sort.tower,\\n                Sort.Building,\\n                Sort.[Type],\\n                Sort.[Level],\\n                Sort.[Flat_No],\\n                Sort.[Door_Type],\\n                Sort.[Jamb_Width],\\n                Sort.Orientation,\\n                Sort.[Door_Id],\\n                Sort.[Fire_Rating],\\n                Sort.Frame,\\n                Sort.Foam,\\n                Sort.Architrave,\\n                Sort.Shutter,\\n                (REPLACE(Sort.Ironmongery,\\'-008\\',\\'\\')) AS Ironmongery,\\n                Sort.Installer,\\n                (REPLACE(Sort.Value_Total,\\'-\\',\\'\\')) AS Total,\\n                Sort.SC_Short,\\n                Sort.SC_NAME,\\n                CASE WHEN Frame = NULL AND Architrave != NULL THEN Architrave \\n                     WHEN Architrave = NULL AND Shutter != NULL THEN Shutter\\n                     WHEN Shutter = NULL AND Architrave != NULL THEN Architrave ELSE Frame END AS DATE_WISE_SPLIT \\n--INTO F_WOODEN_DOOR\\n FROM (\\nSELECT               SC_NAME,\\n                    SC_Short,\\n                    --DMPF.project_id,\\n                    DI.sbu_id,\\n                    Value_Total,\\n                    CAST (DI.upload_time AS DATE) AS Upload_Date,\\n                DI.project_id AS project_id,\\n                DI.tower,\\n                DI.Building,\\n                DI.[Type],\\n                DI.[Level],\\n                DI.[Flat_No],\\n                DENSE_RANK () OVER(PARTITION BY  DI.project_id ORDER BY  CAST(DI.upload_time AS DATE) DESC) D_RANK,\\n                NULLIF (TRIM(DI.[Flat_No_A]),\\'\\') AS \\'Flat_No_A\\',\\n                NULLIF (TRIM(DI.[Door_Type]),\\'\\') AS \\'Door_Type\\',\\n                NULLIF (TRIM(DI.[Jamb_Width]),\\'\\') AS \\'Jamb_Width\\',\\n                NULLIF (TRIM(DI.Orientation),\\'\\') AS Orientation,\\n                NULLIF (TRIM(DI.[Door_Id]),\\'\\') AS \\'Door_Id\\',\\n                NULLIF (TRIM(DI.[Fire_Rating]),\\'\\') AS \\'Fire_Rating\\',\\n                NULLIF (TRIM(DI.Frame),\\'\\') AS Frame,\\n                NULLIF (TRIM(DI.Foam),\\'\\') AS Foam,\\n                NULLIF (TRIM(DI.Architrave),\\'\\') AS Architrave,\\n                NULLIF (TRIM(DI.Shutter),\\'\\') AS Shutter,\\n                NULLIF (TRIM(DI.Ironmongery),\\'\\') AS Ironmongery,\\n                NULLIF (TRIM(DI.Installer),\\'\\') AS Installer\\nFROM (\\nSELECT     DMP.SC_NAME,\\n            DMP.SC_Short,\\n            DMP.project_id,\\n            SUM(CAST(DMP.value AS INT)) AS Value_Total\\n                \\n     FROM (   \\n            SELECT CAST(ddm.upload_time AS DATE) AS Upload_Date,\\n            ddm.project_id,\\n            ddm.tower,\\n            ddm.sbu_id,\\n            ddm.[Date],\\n            OPDM.SC_NAME,\\n            OPDM.SC_Short,\\n            Column_Name.SCC,\\n               CASE \\n                WHEN TRIM(Column_Name.value) IN (\\'-\\',\\'\\') THEN NULL\\n                ELSE Column_Name.value\\n            END AS value,\\n            DENSE_RANK () OVER (PARTITION BY ddm.project_id ORDER BY  CAST(ddm.upload_time AS DATE) DESC) DRANK\\n        FROM STG.O_PLN_DOOR_MANPOWER_STG  ddm\\n        CROSS apply  (     \\n                            SELECT  [SC1] , \\'SC1\\' \\n                  UNION ALL SELECT  [SC2],\\'SC2\\'\\n                  UNION ALL SELECT  [SC3],\\'SC3\\'\\n                  UNION ALL SELECT  [SC4],\\'SC4\\'\\n                  UNION ALL SELECT  [SC5],\\'SC5\\'\\n                  UNION ALL SELECT  [SC6],\\'SC6\\'\\n                  UNION ALL SELECT  [SC7],\\'SC7\\'\\n                  UNION ALL SELECT  [SC8],\\'SC8\\'\\n                  UNION ALL SELECT  [SC9],\\'SC9\\'\\n                  UNION ALL SELECT  [SC10],\\'SC10\\'\\n                  UNION ALL SELECT  [SC11],\\'SC11\\'\\n                  UNION ALL SELECT  [SC12],\\'SC12\\'\\n                  UNION ALL SELECT  [SC13],\\'SC13\\'\\n                  UNION ALL SELECT  [SC14],\\'SC14\\'\\n                  UNION ALL SELECT  [SC15],\\'SC15\\'\\n                  UNION ALL SELECT  [SC16],\\'SC16\\'\\n                  UNION ALL SELECT  [SC17],\\'SC17\\'\\n                  UNION ALL SELECT  [SC18],\\'SC18\\'\\n                  UNION ALL SELECT  [SC19],\\'SC19\\'\\n                  UNION ALL SELECT  [SC20],\\'SC20\\'\\n                            )AS Column_Name (value,SCC)\\n               \\n    INNER JOIN STG.O_PLN_DOORMANPOWER_MAP_STG OPDM\\n    ON Column_Name.SCC = OPDM.SC\\n    AND ddm.project_id = OPDM.project_id\\n    WHERE OPDM.SC_Short != (\\'\\')\\n     ) DMP\\n     \\n     WHERE DRANK = 1 \\n     GROUP BY DMP.SC_NAME,DMP.SC_Short,DMP.project_id\\n     ) DMPF RIGHT JOIN STG.O_PLN_DOOR_INSTALLATION_RAW_STG DI\\n          ON DI.Installer = DMPF.SC_Short\\n         AND DI.project_id = DMPF.project_id\\n     WHERE [Door_Id] NOT IN (\\'\\',\\'NULL\\') \\n    AND [Flat_No] NOT IN (\\'\\',\\'NULL\\')\\n     ) SORT\\n     LEFT JOIN [DWH].[PLN_LEVEL_MAP_ALL_DIM] AS LM\\n     ON          SORT.[LEVEL] = LM.[LEVEL]\\n     LEFT JOIN  [DWH].[PROJECTS_NEW_DIM] P\\n      ON          SORT.PROJECT_ID=P.PROJECT_IDENTIFIER \\n     LEFT JOIN [DWH].[PLN_SBU_MAPPING_DIM] SM\\n     ON          SORT.SBU_ID=SM.SBU_IDENTIFIER\\n     WHERE D_RANK = 1',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          Upload_Date as date,",
						"          project_id as string,",
						"          SBU_Id as integer,",
						"          Level_ID as integer,",
						"          Project_Identifier as string,",
						"          tower as string,",
						"          Building as string,",
						"          Type as string,",
						"          Level as string,",
						"          Flat_No as string,",
						"          Door_Type as string,",
						"          Jamb_Width as string,",
						"          Orientation as string,",
						"          Door_Id as string,",
						"          Fire_Rating as string,",
						"          Frame as string,",
						"          Foam as string,",
						"          Architrave as string,",
						"          Shutter as string,",
						"          Ironmongery as string,",
						"          Installer as string,",
						"          level_map as integer,",
						"          Total as string,",
						"          SC_Short as string,",
						"          SC_NAME as string,",
						"          DATE_WISE_SPLIT as string,",
						"          LoadDateTime as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE [DWH].[PLN_WOODEN_DOOR_FACT]'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Id = ID,",
						"          Upload_Date,",
						"          project_id = PROJECT_ID,",
						"          SBU_Id = SBU_ID,",
						"          Level_ID = LEVEL_ID,",
						"          Project_Identifier = PROJECT_IDENTIFIER,",
						"          tower,",
						"          Building,",
						"          Type,",
						"          Level,",
						"          Flat_No,",
						"          Door_Type,",
						"          Jamb_Width,",
						"          Orientation,",
						"          Door_Id,",
						"          Fire_Rating,",
						"          Frame,",
						"          Foam,",
						"          Architrave,",
						"          Shutter,",
						"          Ironmongery,",
						"          Installer,",
						"          level_map = Level,",
						"          Total,",
						"          SC_Short,",
						"          SC_NAME,",
						"          DATE_WISE_SPLIT,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/NexgenLocal_Azure_Checkinout')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy data from on premise SQL Server to SQL Azure.\n\nYou can also go to \"Copy Data Tool\" to get the pipeline for more connectors and scenarios.",
				"activities": [
					{
						"name": "SQL_to_SQLAzure",
						"description": "Copy data from SQL server to SQL Azure",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Usp_SCL_Manpower_Department__checkinout_Data]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "Nexgen_Local_Checkinout",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZCheckinout",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-02T13:45:25Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/NexgenLocal_Azure_Userinfo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy data from on premise SQL Server to SQL Azure.\n\nYou can also go to \"Copy Data Tool\" to get the pipeline for more connectors and scenarios.",
				"activities": [
					{
						"name": "SQL_to_SQLAzure",
						"description": "Copy data from SQL server to SQL Azure",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Usp_SCL_Manpower_Department_Data]",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "Nexgen_Local",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZuserinfo",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-02T13:45:25Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ PG_Plangrid_Project_DIM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PG_Plangrid_Project_DIM",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_PG_PROJECT_MASTER",
								"type": "DataFlowReference",
								"parameters": {
									"MAX_ID": "0"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "sobhasyndatafs01/Staging_Folder"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DWH/Dimensions"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-30T13:19:08Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DOOR_DELIVERY_M')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DOOR DELIVERY M",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_DOOR_DELIVERY_M",
								"type": "DataFlowReference",
								"parameters": {
									"MAX_ID": "0"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "sobhasyndatafs01/Staging_Folder"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DWH/Facts"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-10T10:21:47Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EXECUTIVE_SUMMARY')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_EXECUTIVE_SUMMARY",
								"type": "DataFlowReference",
								"parameters": {
									"MAX_ID": "0"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "sobhasyndatafs01/Staging_Folder"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DWH/Facts"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-20T05:24:52Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_GAANT_HURRY')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GAANT HURRY",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Gaant_Hurry",
								"type": "DataFlowReference",
								"parameters": {
									"MAX_ID": "0"
								},
								"datasetParameters": {
									"MILESTONEMAINTABLE": {},
									"DRYAREAGAANTFINAL": {},
									"WETAREAGAANTFINAL": {},
									"CORRIDORGAANTFINAL": {},
									"KITCHENGAANTFINAL": {},
									"BALCONYGAANTFINAL": {},
									"SLIDINGDOORGAANTFINAL": {},
									"KITCHENCABINETGAANTFINAL": {},
									"KEEPOUTGAANTFINAL": {},
									"BLOCKWORKGAANTFINAL": {},
									"BALUSTRADEWORKSGAANTFINAL": {},
									"STRUCTUREGAANTFINAL": {},
									"PLNPROJECTSDIM": {},
									"MILESTONEMAINTABLEPlan": {},
									"ManualActuals": {},
									"OPLNMILESTONEMAPSTG": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "sobhasyndatafs01/Staging_Folder"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"sourceStagingConcurrency": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DWH/Facts"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-07T06:51:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_PG_PLANGRID_MAPPING')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PLANGRID_MAPPING",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_PG_PLANGRID_MAPPING",
								"type": "DataFlowReference",
								"parameters": {
									"MAX_ID": "0"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "sobhasyndatafs01/Staging_Folder"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DWH/Dimensions"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-10T11:13:47Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_PG_PROJECT_MASTER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Project_Master",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_PG_PROJECT_MASTER",
								"type": "DataFlowReference",
								"parameters": {
									"MAX_ID": "0"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "sobhasyndatafs01/Staging_Folder"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DWH/Dimensions"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-30T13:19:08Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_PG_Plangrid_Cluster_Mapping')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Plangrid_Cluster_Mapping",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_PG_Plangrid_Cluster_Mapping",
								"type": "DataFlowReference",
								"parameters": {
									"MAX_ID": "0"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "sobhasyndatafs01/Staging_Folder"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DWH/Dimensions"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-30T13:46:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_PG_TASK_REPORT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TASK_REPORT_FACT",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_PG_TASK_REPORT",
								"type": "DataFlowReference",
								"parameters": {
									"MAX_ID": "0"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "sobhasyndatafs01/Staging_Folder"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DWH/Facts"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-24T15:17:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_PLN_BALCONYAREA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Balcony Area",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_PLN_BALCONYAREA",
								"type": "DataFlowReference",
								"parameters": {
									"MAX_ID": "0"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "sobhasyndatafs01/Staging_Folder"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DWH/Facts"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-08T12:58:43Z"
			},
			"dependsOn": []
		}
	]
}
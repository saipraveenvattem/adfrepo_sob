{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "datafactory-sobha-prod-uaen-001"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_PG_Plangrid_Cluster_Mapping')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Dimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_PG_Plangrid_Cluster_Mapping_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PG_Plangrid_Cluster_Mapping_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          Stamp_First as string,",
						"          Stamp as string,",
						"          Cluster_Short as string,",
						"          Cluster_Full as string,",
						"          Works as string,",
						"          Category as string,",
						"          Approval as string,",
						"          Clearance as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          Stamp_First as string,",
						"          Stamp as string,",
						"          Cluster_Short as string,",
						"          Cluster_Full as string,",
						"          Works as string,",
						"          Category as string,",
						"          Approval as string,",
						"          Clearance as string,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['Truncate Table [DWH].[PG_Plangrid_Cluster_Mapping_DIM]'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Id = ID,",
						"          Stamp_First,",
						"          Stamp,",
						"          Cluster_Short,",
						"          Cluster_Full,",
						"          Works,",
						"          Category,",
						"          Approval,",
						"          Clearance,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PG_TASK_REPORT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_PG_Task_Report_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PG_TASK_REPORT_FACT_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          Project_ID as string,",
						"          Project_Name as string,",
						"          Task_ID as string,",
						"          Stamp as string,",
						"          Title as string,",
						"          Description as string,",
						"          Date as timestamp,",
						"          Status as string,",
						"          Type as string,",
						"          Sheet as string,",
						"          Location as string,",
						"          Root_Cause as string,",
						"          Created_By as string,",
						"          Assigned_To as string,",
						"          Watchers as string,",
						"          Photos as string,",
						"          Archived as string,",
						"          Start_Date as timestamp,",
						"          Due_Date as timestamp,",
						"          Cost_Impact as string,",
						"          Cost_Impact_Amount as decimal(18,3),",
						"          Schedule_Impact as string,",
						"          Schedule_Impact_Amount_Days as string,",
						"          Last_Updated_On as timestamp,",
						"          Closed_on as timestamp,",
						"          Task_Refresh_Date as timestamp,",
						"          Task_Ref_No as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          Project_ID as string,",
						"          Project_Name as string,",
						"          Task_ID as string,",
						"          Stamp as string,",
						"          Title as string,",
						"          Description as string,",
						"          Date as timestamp,",
						"          Status as string,",
						"          Type as string,",
						"          Sheet as string,",
						"          Location as string,",
						"          Root_Cause as string,",
						"          Created_By as string,",
						"          Assigned_To as string,",
						"          Watchers as string,",
						"          Photos as string,",
						"          Archived as string,",
						"          Start_Date as timestamp,",
						"          Due_Date as timestamp,",
						"          Cost_Impact as string,",
						"          Cost_Impact_Amount as decimal(18,3),",
						"          Schedule_Impact as string,",
						"          Schedule_Impact_Amount_Days as string,",
						"          Last_Updated_On as timestamp,",
						"          Closed_on as timestamp,",
						"          Task_Refresh_Date as timestamp,",
						"          Task_Ref_No as string,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['Truncate table [DWH].[PG_TASK_REPORT_FACT]'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Id = ID,",
						"          Project_ID,",
						"          Project_Name,",
						"          Task_ID,",
						"          Stamp,",
						"          Title,",
						"          Description,",
						"          Date,",
						"          Status,",
						"          Type,",
						"          Sheet,",
						"          Location,",
						"          Root_Cause,",
						"          Created_By,",
						"          Assigned_To,",
						"          Watchers,",
						"          Photos,",
						"          Archived,",
						"          Start_Date,",
						"          Due_Date,",
						"          Cost_Impact,",
						"          Cost_Impact_Amount,",
						"          Schedule_Impact,",
						"          Schedule_Impact_Amount_Days,",
						"          Last_Updated_On,",
						"          Closed_on,",
						"          Task_Refresh_Date,",
						"          Task_Ref_No,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PLN_BALCONYAREA')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_O_PLN_BALCONYAREA_RAW_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PLN_BALCONYAREA_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          PROJECT_ID as integer,",
						"          LEVEL_ID as integer,",
						"          SBU_ID as integer,",
						"          TOWER as string,",
						"          LEVEL as string,",
						"          PROJECT_IDENTIFIER as string,",
						"          FLAT as string,",
						"          Sclicer as string,",
						"          ACTIVITY_ID as integer,",
						"          VALUE as string,",
						"          TYPE_OF_WORK as string,",
						"          CATEGORY as string,",
						"          UPLOAD_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT \\n    P.Sort_ID as PROJECT_ID,\\n    LM.LEVEL_MAP_ID AS LEVEL_ID,\\n    SM.SBU_MAP_ID AS SBU_ID,\\n    BA.TOWER,\\n    BA.[LEVEL],\\n    P.PROJECT_IDENTIFIER ,\\n    BA.FLAT,\\n    \\'Balcony Area\\' as Sclicer,\\n    BA.ACTIVITY_ID,\\n    CASE \\n        WHEN BA.VALUE IN (\\'\\',\\'NA\\') THEN \\'0%\\'\\n        ELSE BA.VALUE\\n    END AS VALUE,\\n    BA.TYPE_OF_WORK,\\n    BA.CATEGORY,\\n    BA.UPLOAD_DATE\\nFROM (\\n     SELECT BR.UPLOAD_TIME AS UPLOAD_DATE,\\n             BR.PROJECT_ID,\\n             BR.TOWER,\\n             BR.[LEVEL],\\n             BR.FLAT,\\n             COLUMN_NAME.*,\\n             BM.ACTIVITY_ID,\\n             BM.SBU_ID,\\n             BM.CATEGORY,\\n             DENSE_RANK () OVER (PARTITION BY  PROJECT_ID,BM.SBU_ID ORDER BY  CAST(UPLOAD_TIME AS DATE) DESC) AS DRANK\\n         FROM [STG].[O_PLN_BALCONYAREA_RAW_STG] BR\\n         CROSS APPLY  (\\n               SELECT        [MARKING_FOR_RAIN_WATER_PIPE] , \\'MARKING FOR RAIN WATER PIPE\\'\\n     UNION ALL SELECT  [RAIN_WATER_PIPE] , \\'RAIN WATER PIPE\\'\\n     UNION ALL SELECT  [RAIN_WATER_PIPE_PACKING] , \\'RAIN WATER PIPE PACKING\\'\\n     UNION ALL SELECT  [BALCONY_BLOCKWORK] , \\'BALCONY BLOCKWORK\\'\\n     UNION ALL SELECT  [BALCONY_PLASTER] , \\'BALCONY PLASTER\\'\\n     UNION ALL SELECT  [F_CHANNEL_INSTALLATION] , \\'F CHANNEL INSTALLATION\\'\\n     UNION ALL SELECT  [NON_SHRINK_GROUT] , \\'NON SHRINK GROUT\\'\\n     UNION ALL SELECT  [TOP_RAIL_BRACKET_INSTALLATION] , \\'TOP RAIL BRACKET INSTALLATION\\'\\n     UNION ALL SELECT  [EIFS_INSTALLATION] , \\'EIFS INSTALLATION\\'\\n     UNION ALL SELECT  [BALCONY_EIFS_PLASTER] , \\'BALCONY EIFS PLASTER\\'\\n     UNION ALL SELECT  [GRINDING_CLEARANCE] , \\'GRINDING CLEARANCE\\'\\n     UNION ALL SELECT  [CEILING_SKIM_COAT_AND_PRIMER] , \\'CEILING SKIM COAT & PRIMER\\'\\n     UNION ALL SELECT  [BALCONY_SCREED] , \\'BALCONY SCREED\\'\\n     UNION ALL SELECT  [DRAIN_FIXING] , \\'DRAIN FIXING\\'\\n     UNION ALL SELECT  [CEILING_BALCONY_BOX_INSTALLATION] , \\'CEILING BALCONY BOX INSTALLATION\\'\\n     UNION ALL SELECT  [LEFT_OVER_SCREED_IF_ANY] , \\'LEFT OVER SCREED (IF ANY)\\'\\n     UNION ALL SELECT  [EIFS_WALL_TEXTURE] , \\'EIFS WALL TEXTURE\\'\\n     UNION ALL SELECT  [BALUSTRADE_GLASS_INSTALLATION] , \\'BALUSTRADE GLASS INSTALLATION\\'\\n     UNION ALL SELECT  [BALUSTRADE_TOP_RAIL] , \\'BALUSTRADE TOP RAIL\\'\\n     UNION ALL SELECT  [BALCONY_UNDER_TILE_WATER_PROOFING] , \\'BALCONY UNDER TILE WATER PROOFING\\'\\n     UNION ALL SELECT  [BALCONY_FLOOR_TILING] , \\'BALCONY FLOOR TILING\\'\\n     UNION ALL SELECT  [BALUSTRADE_INTERNAL_FLASHING] , \\'BALUSTRADE - INTERNAL FLASHING\\'\\n     UNION ALL SELECT  [BALCONY_SKIRTING] , \\'BALCONY SKIRTING\\'\\n     UNION ALL SELECT  [METAL_CEILING] , \\'METAL CEILING\\'\\n     UNION ALL SELECT  [BALCONY_CEILING_TEXTURE] , \\'BALCONY CEILING TEXTURE\\'\\n     UNION ALL SELECT  [COMPLETE_WALL_TEXTURE] , \\'COMPLETE WALL TEXTURE\\'\\n     UNION ALL SELECT  [BALCONY_GROUTING] , \\'BALCONY GROUTING\\'\\n     UNION ALL SELECT  [BALCONY_SILICONE] , \\'BALCONY SILICONE\\'\\n     UNION ALL SELECT  [BALCONY_MEP_FINAL_FIXTURES] , \\'BALCONY MEP FINAL FIXTURES\\'\\n     UNION ALL SELECT  [BALCONY_FINAL_COAT_PAINT] , \\'BALCONY FINAL COAT PAINT\\'\\n     UNION ALL SELECT  [BALCONY_DRAIN_COVER_SUPPLY] , \\'BALCONY DRAIN COVER SUPPLY\\'\\n     UNION ALL SELECT  [COVER_FIXING_FOR_BALCONY_DRAIN] , \\'COVER FIXING FOR BALCONY DRAIN\\'\\n     UNION ALL SELECT  [COVER_PLATE_BW_ACP_AND_EIFS] , \\'COVER PLATE B/W ACP & EIFS\\'\\n             ) AS COLUMN_NAME (VALUE,TYPE_OF_WORK)\\n               \\n     left JOIN  STG.O_PLN_BALCONYAREA_MAP_STG  BM\\n     ON COLUMN_NAME.TYPE_OF_WORK = BM.ACTIVITY_SEQUENCE\\n     WHERE VALUE IS NOT NULL  AND VALUE !=\\'\\') BA\\nLeft JOIN [DWH].[PLN_LEVEL_MAP_ALL_DIM] AS LM\\n     ON          BA.[LEVEL] = LM.[LEVEL]\\nLEFT JOIN [DWH].[PROJECTS_NEW_DIM] P\\n      ON         BA.PROJECT_ID=P.PROJECT_IDENTIFIER \\nLEFT JOIN [DWH].[PLN_SBU_MAPPING_DIM] SM\\n     ON          BA.SBU_ID=SM.SBU_IDENTIFIER\\nWHERE          BA.DRANK = 1',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Project_ID as integer,",
						"          Project_Identifier as string,",
						"          SBU_ID as integer,",
						"          Level_ID as integer,",
						"          Tower as string,",
						"          Level as string,",
						"          Flat as integer,",
						"          Sclicer as string,",
						"          Activity_ID as integer,",
						"          Value as string,",
						"          Type_of_work as string,",
						"          Category as string,",
						"          Update_Date as date,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE [DWH].[PLN_BALCONYAREA_FACT];'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Project_ID = PROJECT_ID,",
						"          Project_Identifier = PROJECT_IDENTIFIER,",
						"          SBU_ID,",
						"          Level_ID = LEVEL_ID,",
						"          Tower = TOWER,",
						"          Level = LEVEL,",
						"          Flat = FLAT,",
						"          Sclicer,",
						"          Activity_ID = ACTIVITY_ID,",
						"          Value = VALUE,",
						"          Type_of_work = TYPE_OF_WORK,",
						"          Category = CATEGORY,",
						"          Update_Date = UPLOAD_DATE,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PLN_BUSINESS_PLN')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_PLN_BUSINESS_PLAN_TRG",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "Import data from DS_O_PLN_BUSINESS_PLAN_RAW_STG_TRG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PLN_BUSINESS_PLAN_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to DS_PLN_BUSINESS_PLAN_TRG"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          PROJECT_ID as integer,",
						"          SBU_ID as integer,",
						"          Upload_Date as date,",
						"          tower as string,",
						"          Type as string,",
						"          SBU as string,",
						"          SBU_Custom_Sort as integer,",
						"          Month as string,",
						"          ORDER_Month as string,",
						"          value as decimal(25,2),",
						"          Cummulative as integer",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT \\n     P.Sort_ID as PROJECT_ID,\\n    SM.SBU_MAP_ID AS SBU_ID,\\n     PF.Upload_Date,\\n     --PF.project_id,\\n     PF.tower,\\n     --PF.sbu_id,\\n     PF.[Type],\\n     PF.SBU,\\n     PF.SBU_Custom_Sort,\\n     PF.[Month],\\n     \\n     PF.ORDER_Month,\\n     PF.[value],\\n     SUM(convert(int ,value)) OVER(PARTITION BY PF.project_id,PF.[Type],PF.SBU_Custom_Sort ORDER BY PF.ORDER_Month ROWS UNBOUNDED PRECEDING) AS Cummulative \\nFROM (\\nSELECT\\n                Upload_Date,\\n                project_id,tower,sbu_id,\\n                [Type],\\n                SBU,\\n                    SBU_Custom_Sort,\\n                    [Month],\\n                CASE\\n                WHEN TRIM([Month]) IN (\\'Total Revenue (BOQ)\\',\\'Achieved Revenue (Till 2021)\\') THEN null\\n                ELSE REPLACE(FORMAT(CAST(concat(\\'01-\\',TRIM([Month])) AS DATE),\\'yyyy-MM\\'),\\'-\\',\\'\\')\\n                 END AS ORDER_Month,\\n                CAST(value AS DECIMAL(25,2)) AS [value]\\n                    \\nFROM (\\nSELECT\\n        CAST(upload_time AS DATE) AS Upload_date,\\n        project_id,\\n        tower,\\n        sbu_id,\\n        [Type],\\n        SBU,\\n          CASE\\n                    WHEN SBU = \\'SBU 1\\' THEN 1\\n                    WHEN SBU = \\'SBU 2\\' THEN 2\\n                    WHEN SBU = \\'SBU 3\\' THEN 3\\n                    WHEN SBU = \\'SBU 4\\' THEN 4\\n                    WHEN SBU = \\'SBU 5\\' THEN 5\\n                    ELSE 6\\n                END AS SBU_Custom_Sort,\\n        Column_Name.[Month],\\n        CASE \\n            WHEN CAST(ISNULL(TRIM(Column_Name.VALUE ),\\'\\') AS VARCHAR(100))  IN (\\'\\',\\' \\',\\'-\\')  AND [Type] = \\'Plan\\'  THEN ISNULL(REPLACE(\\'0\\',\\',\\',\\'\\'),\\'0.00\\')\\n            ELSE ISNULL(REPLACE(CAST(Column_Name.VALUE AS VARCHAR(100)),\\',\\',\\'\\'),\\'0.00\\') \\n        END  AS Value\\n          ,DENSE_RANK() OVER(PARTITION BY project_id ORDER BY CAST(upload_time AS DATE) DESC) AS [DENSE_RANK]\\n        FROM STG.O_PLN_BUSINESS_PLAN_RAW_STG\\n        cross apply (\\n                                     SELECT Jan_22 ,  \\'Jan-22\\'\\n                    UNION ALL SELECT Feb_22 ,  \\'Feb-22\\'\\n                    UNION ALL SELECT Mar_22 ,  \\'Mar-22\\'\\n                    UNION ALL SELECT Apr_22 ,  \\'Apr-22\\'\\n                    UNION ALL SELECT May_22 ,  \\'May-22\\'\\n                    UNION ALL SELECT Jun_22 ,  \\'Jun-22\\'\\n                    UNION ALL SELECT Jul_22 ,  \\'Jul-22\\'\\n                    UNION ALL SELECT Aug_22 ,  \\'Aug-22\\'\\n                    UNION ALL SELECT Sep_22 ,  \\'Sep-22\\'\\n                    UNION ALL SELECT Oct_22 ,  \\'Oct-22\\'\\n                    UNION ALL SELECT Nov_22 ,  \\'Nov-22\\'\\n                    UNION ALL SELECT Dec_22 ,  \\'Dec-22\\'\\n        )as Column_Name(value,[Month])\\n        WHERE\\n         TRIM(value) NOT IN (\\'Jan-22\\',\\'Feb-22\\',\\'Mar-22\\',\\'Apr-22\\',\\'May-22\\',\\'Jun-22\\',\\'Jul-22\\',\\'Aug-22\\',\\'Sep-22\\',\\'Oct-22\\',\\'Nov-22\\',\\'Dec-22\\') AND\\n         TRIM(SBU) NOT IN (\\'\\',\\' \\',\\'Cumulative\\',\\'%\\',\\'Total Revenue (BOQ)\\',\\'Achieved Revenue (Till 2021)\\',\\'Overall\\')\\n    ) PF1\\n     WHERE TRIM(value) NOT IN (\\'\\',\\'-\\',\\' \\')\\n   AND TRIM(SBU) NOT IN (\\'\\',\\' \\',\\'Cumulative\\',\\'%\\',\\'Total Revenue (BOQ)\\',\\'Achieved Revenue (Till 2021)\\',\\'Overall\\')\\n   AND  [DENSE_RANK] = 1 \\n       ) PF \\n     LEFT JOIN [DWH].[PROJECTS_NEW_DIM] P\\n      ON          PF.PROJECT_ID=P.PROJECT_IDENTIFIER \\n     LEFT JOIN [DWH].[PLN_SBU_MAPPING_DIM] SM\\n     ON          PF.SBU_ID=SM.SBU_IDENTIFIER\\n      \\n     ',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          Upload_Date as date,",
						"          project_id as string,",
						"          Sbu_Id as integer,",
						"          Tower as string,",
						"          Type as string,",
						"          SBU as string,",
						"          SBU_Custom_Sort as integer,",
						"          Month as string,",
						"          ORDER_Month as integer,",
						"          value as decimal(10,0),",
						"          Cummulative as decimal(32,0),",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE [DWH].[PLN_BUSINESS_PLAN_FACT];'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id = ID,",
						"          Upload_Date,",
						"          project_id = PROJECT_ID,",
						"          Sbu_Id = SBU_ID,",
						"          Tower = tower,",
						"          Type,",
						"          SBU,",
						"          SBU_Custom_Sort,",
						"          Month,",
						"          ORDER_Month,",
						"          value,",
						"          Cummulative,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PLN_BUSINESS_PLN_1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_O_PLN_BUSINESS_PLAN_1_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PLN_BUSINESS_PLAN_1_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          Upload_date as date,",
						"          Project_Identifier as string,",
						"          PROJECT_ID as integer,",
						"          SBU_ID as integer,",
						"          Type as string,",
						"          Month as string,",
						"          value as string,",
						"          DENSE_RANK as long,",
						"          sbu_sort as integer,",
						"          month_sort as integer,",
						"          year_sort as integer,",
						"          Cummulative as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select \\n  PF.Upload_date  ,\\n  P.Project_Identifier,\\n  P.Sort_ID as PROJECT_ID,\\n  SM.SBU_MAP_ID AS SBU_ID,  \\n  PF.Type   ,  \\n  PF.Month    ,\\n  PF.value     ,\\n  PF.DENSE_RANK   ,\\n  PF.sbu_sort  ,\\n  PF.month_sort   ,\\n  PF.year_sort  ,\\n  PF.Cummulative   \\n  from [STG].[O_PLN_BUSINESS_PLAN_1_STG] PF\\nLEFT join [DWH].[PROJECTS_NEW_DIM] P\\n      ON          PF.PROJECT_ID=P.PROJECT_IDENTIFIER \\n     LEFT JOIN [DWH].[PLN_SBU_MAPPING_DIM] SM\\n     ON          PF.SBU=SM.SBU_IDENTIFIER\\n\\n\\n     --select * from [STG].[O_PLN_BUSINESS_PLAN_1_STG]\\n     --select * from [DWH].[PLN_PROJECTS_DIM]\\n     --select * from  [DWH].[PLN_SBU_MAPPING_DIM]\\n\\n\\n     -- select * from [DWH].[PLN_PROJECTS_DIM]\\n',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(Id = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Upload_date as date,",
						"          Project_Name as string,",
						"          project_id as integer,",
						"          Type as string,",
						"          SBU_Id as integer,",
						"          Month as string,",
						"          value as string,",
						"          DENSE_RANK as long,",
						"          sbu_sort as long,",
						"          month_sort as long,",
						"          year_sort as long,",
						"          Cummulative as double,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['Truncate table [DWH].[PLN_BUSINESS_PLAN_1_FACT]'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID = Id,",
						"          Upload_date,",
						"          Project_Name = Project_Identifier,",
						"          project_id = PROJECT_ID,",
						"          Type,",
						"          SBU_Id = SBU_ID,",
						"          Month,",
						"          value,",
						"          DENSE_RANK,",
						"          sbu_sort,",
						"          month_sort,",
						"          year_sort,",
						"          Cummulative,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PLN_CORRIDOR')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_O_PLN_CORRIDOR_RAW_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PLN_CORRIDOR_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          PROJECT_ID as integer,",
						"          LEVEL_ID as integer,",
						"          SBU_ID as integer,",
						"          TOWER as string,",
						"          Activity_Id as integer,",
						"          PROJECT_IDENTIFIER as string,",
						"          LEVEL as string,",
						"          Scilicer as string,",
						"          value as decimal(24,6),",
						"          TYPE_OF_WORK as string,",
						"          CATEGORY as string,",
						"          CATEGORY_SORT as integer,",
						"          UPLOAD_DATE as date",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT \\n    P.Sort_ID as PROJECT_ID,\\n    LM.LEVEL_MAP_ID AS LEVEL_ID,\\n    SM.SBU_MAP_ID AS SBU_ID,\\n    A.TOWER    ,\\n     A.Activity_Id,\\n     P.PROJECT_IDENTIFIER,\\n     A.LEVEL,\\n     \\'Corridor\\' as Scilicer,\\n  \\n  CAST(REPLACE(CASE     WHEN TRIM(A.value) IN (\\'\\',\\'NA\\') THEN \\'0%\\' else TRIM(A.value) end, \\'%\\', \\'\\') AS Decimal)/100 AS value,\\n\\n    A.TYPE_OF_WORK    ,\\n    A.CATEGORY   ,\\n\\n          CASE \\n            WHEN TRIM(A.CATEGORY) IN(\\'BUILDERS WORK\\') THEN  2\\n            WHEN TRIM(A.CATEGORY) IN(\\'MEP\\') THEN  12\\n            WHEN TRIM(A.CATEGORY) IN(\\'PLASTER\\') THEN  3\\n            WHEN TRIM(A.CATEGORY) IN(\\'SCREED\\') THEN  5\\n            WHEN TRIM(A.CATEGORY) IN(\\'TILE\\') THEN  9\\n            WHEN TRIM(A.CATEGORY) IN(\\'MARBLE\\') THEN  10\\n            WHEN TRIM(A.CATEGORY) IN(\\'FACADE\\') THEN  11\\n            WHEN TRIM(A.CATEGORY) IN(\\'GYAUM\\') THEN  6\\n            WHEN TRIM(A.CATEGORY) IN(\\'PAINT\\') THEN  8\\n            ELSE 20\\n        END AS CATEGORY_SORT,\\n    A.UPLOAD_DATE  \\n         \\nFROM\\n(\\n        SELECT CAST(O_PLN_CORRIDOR_RAW.UPLOAD_TIME AS DATE) AS UPLOAD_DATE,\\n        O_PLN_CORRIDOR_RAW.PROJECT_ID,\\n        O_PLN_CORRIDOR_RAW.TOWER,\\n        O_PLN_CORRIDOR_RAW.LEVEL,\\n     COLUMN_NAME.* ,\\n        \\'CORRIDOR\\' AS SCLICER,\\n       \\n        O_PLN_CORRIDOR_MAP.ACTIVITY_ID,\\n        O_PLN_CORRIDOR_MAP.SBU_ID,\\n        O_PLN_CORRIDOR_MAP.CATEGORY,\\n\\n        DENSE_RANK () OVER     (PARTITION BY  PROJECT_ID , SBU_ID\\n                            ORDER BY  CAST(UPLOAD_TIME AS DATE) DESC\\n                            )     PROJECT_UDATE_DRANK\\n FROM [STG].[O_PLN_CORRIDOR_RAW_STG]  O_PLN_CORRIDOR_RAW\\nCROSS APPLY (\\n\\nSELECT     CORRIDOR_MEP_MARKING_FOR_BUILDERS_WORK     ,     \\'Corridor MEP Marking for Builders Work\\'\\nUNION ALL SELECT CORRIDOR_CUTTING_AND_CHASING_OF_BLOCKWORK     ,    \\'Corridor Cutting & Chasing of Blockwork\\'\\nUNION ALL SELECT CORRIDOR_MEP_SERVICES_INSTALLATION     ,     \\'Corridor MEP Services Installation\\'\\nUNION ALL SELECT CORRIDOR_WALL_MEP_SERVICES_PACKING     ,     \\'Corridor Wall MEP Services Packing\\'\\nUNION ALL SELECT CORRIDOR_PLASTER     ,     \\'Corridor Plaster\\'\\nUNION ALL SELECT CORRIDOR_SCREED     ,     \\'Corridor Screed\\'\\nUNION ALL SELECT GRINDING_CLEARANCE_FOR_TILE     ,     \\'Grinding Clearance for Tile\\'\\nUNION ALL SELECT TILE_MARKING     ,    \\'Tile Marking\\'\\nUNION ALL SELECT BULL_MARKING     ,     \\'Bull Marking\\'\\nUNION ALL SELECT ELECTRICAL_CONDUITS     ,     \\'Electrical Conduits\\'\\nUNION ALL SELECT COLD_WATER_SUPPLY     ,     \\'Cold water supply\\'\\nUNION ALL SELECT FIRE_FIGHTING_PIPE_SUPPORT     ,     \\'Fire Fighting Pipe Support\\'\\nUNION ALL SELECT MODULAR_INSTALATION     ,    \\'Modular Instalation\\'\\nUNION ALL SELECT FRAMING_CLEARANCE_BY_MEP     ,     \\'Framing Clearance by MEP\\'\\nUNION ALL SELECT CENTER_LINE_MARKING_FOR_FACADE_INSTALLATION     ,     \\'Center line marking for Facade Installation\\'\\nUNION ALL SELECT CORRIDOR_CURTAIN_WALL_BOX_INSTALLATION     ,    \\'Corridor Curtain Wall Box Installation\\'\\nUNION ALL SELECT CORRIDOR_CURTAIN_WALL_FRAME_INSTALLATION     ,    \\'Corridor Curtain Wall Frame Installation\\'\\nUNION ALL SELECT CORRIDOR_CURTAIN_WALL_GLASS_INSTALLATION     ,     \\'Corridor Curtain Wall Glass Installation\\'\\nUNION ALL SELECT CORRIDOR_CURTAIN_WALL_FLASHING_INSTALLATION     ,    \\'Corridor Curtain Wall Flashing Installation\\'\\nUNION ALL SELECT CORRIDOR_FLOOR_TILE     ,    \\'Corridor Floor Tile\\'\\nUNION ALL SELECT CORRIDOR_WALL_TILE     ,          \\'Corridor Wall Tile\\'\\nUNION ALL SELECT FIRE_HOSE_REEL_CABINET_INSTALLATION     ,     \\'Fire Hose Reel Cabinet Installation\\'\\nUNION ALL SELECT GROUTING_FOR_FRAMING_CLEARANCE     ,     \\'Grouting for Framing Clearance\\'\\nUNION ALL SELECT CORRIDOR_FC_FRAMING     ,     \\'Corridor FC Framing\\'\\nUNION ALL SELECT MEP_ACCESS_PANEL_MARKINGS_AND_INSPECTION     ,     \\'MEP Access Panel Markings & Inspection\\'\\nUNION ALL SELECT MEP_WORKS_FOR_BOARDING_CLEARANCE     ,    \\'MEP Works for Boarding Clearance \\'\\nUNION ALL SELECT FRAMING_LEVELLING     ,     \\'Framing Levelling\\'\\nUNION ALL SELECT CORRIDOR_FC_BOARDING     ,     \\'Corridor FC Boarding\\'\\nUNION ALL SELECT JOINT_TAPING_AND_SANDING     ,    \\'Joint Taping & Sanding\\'\\nUNION ALL SELECT CORRIDOR_CEILING_PRIMER     ,     \\'Corridor Ceiling Primer\\'\\nUNION ALL SELECT CORRIDOR_CEILING_STUCCO_1ST_AND_2ND_COAT     ,     \\'Corridor Ceiling Stucco (1st and 2nd Coat)\\'\\nUNION ALL SELECT CORRIDOR_CEILING_FIRST_COAT_PAINT     ,    \\'Corridor Ceiling First Coat Paint\\'\\nUNION ALL SELECT CORRIDOR_GROUTING     ,     \\'Corridor Grouting\\'\\nUNION ALL SELECT CORRIDOR_SILICONE     ,     \\'Corridor Silicone\\'\\nUNION ALL SELECT LEFT_OVER_SCREED     ,    \\'Left over Screed\\'\\nUNION ALL SELECT LEFT_OVER_AREA_FLOOR_TILE     ,    \\'Left Over Area Floor Tile\\'\\nUNION ALL SELECT LEFT_OVER_AREA_WALL_TILE     ,    \\'Left Over Area Wall Tile\\'\\nUNION ALL SELECT REMAINING_GROUT_AND_SILICONE_WORKS     ,     \\'Remaining Grout and Silicone Works\\'\\nUNION ALL SELECT CORRIDOR_MEP_FINAL_FIXTURES     ,    \\'Corridor MEP Final Fixtures\\'\\nUNION ALL SELECT CORRIDOR_FINAL_COAT_PAINT     ,    \\'Corridor Final Coat Paint\\'          \\n)AS COLUMN_NAME(VALUE,TYPE_OF_WORK)\\n   JOIN [STG].[O_PLN_CORRIDOR_MAP_STG]  O_PLN_CORRIDOR_MAP\\n    ON TRIM(COLUMN_NAME.TYPE_OF_WORK) = TRIM(O_PLN_CORRIDOR_MAP.ACTIVITY_SEQUENCE)\\n    WHERE VALUE IS NOT NULL) A\\n   \\n   INNER JOIN [DWH].[PLN_LEVEL_MAP_ALL_DIM]  LM\\n     ON          A.[LEVEL] = LM.[LEVEL]\\nLEFT JOIN [DWH].[PROJECTS_NEW_DIM] P\\n      ON          A.PROJECT_ID=P.PROJECT_IDENTIFIER\\nLEFT JOIN [DWH].[PLN_SBU_MAPPING_DIM] SM\\n     ON          A.SBU_ID=SM.SBU_IDENTIFIER\\nWHERE          A.PROJECT_UDATE_DRANK = 1\\n',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Project_ID as integer,",
						"          Project_Identifier as string,",
						"          SBU_ID as integer,",
						"          Level_ID as integer,",
						"          Tower as string,",
						"          Level as string,",
						"          Scilicer as string,",
						"          Activity_ID as integer,",
						"          Value as decimal(14,4),",
						"          Type_of_work as string,",
						"          Category as string,",
						"          Category_Sort as string,",
						"          Update_Date as date,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE DWH.PLN_CORRIDOR_FACT;'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Project_ID = PROJECT_ID,",
						"          Project_Identifier = PROJECT_IDENTIFIER,",
						"          SBU_ID,",
						"          Level_ID = LEVEL_ID,",
						"          Tower = TOWER,",
						"          Level = LEVEL,",
						"          Scilicer,",
						"          Activity_ID = Activity_Id,",
						"          Value = value,",
						"          Type_of_work = TYPE_OF_WORK,",
						"          Category = CATEGORY,",
						"          Category_Sort = CATEGORY_SORT,",
						"          Update_Date = UPLOAD_DATE,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PLN_CRITICAL_ISSUE_TRACKER')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_O_PLN_CRITICAL_ISSUE_TRACKER_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "Import data from DS_O_PLN_CRITICAL_ISSUE_TRACKER_RAW_STG_TRG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PLN_CRITICAL_ISSUE_TRACKER_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to DS_PLN_CRITICAL_ISSUE_TRACKER_TRG"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          PROJECT_ID as integer,",
						"          SBU_ID as integer,",
						"          Upload_Date as date,",
						"          Reference_Number as string,",
						"          PR_PO_Other_Ref_No as string,",
						"          Pending_With as string,",
						"          Issue_Description as string,",
						"          Current_Status as string,",
						"          Impact_On as string,",
						"          Status as string,",
						"          Project as string,",
						"          Tower as string,",
						"          Raised_On as string,",
						"          Actual_Closure_Date as string,",
						"          Target_Closure_Date as string,",
						"          Ageing as integer,",
						"          Agetub as string,",
						"          Agetub_sort as integer",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT      \\n    P.PROJECT_ID,\\n    SM.SBU_MAP_ID AS SBU_ID,\\n    A.Upload_Time AS Upload_Date,\\n    A.Reference_Number,\\n    A.PR_PO_Other_Ref_No, \\n    --A.SBU_SCLICER, --we need to Join and get sbu_ID from [DWH].[PLN_SBU_MAPPING_DIM] PowerBI\\n    A.Pending_With,\\n    A.Issue_Description,\\n    A.Current_Status,\\n    A.Impact_On,\\n    A.Status,\\n    A.Project,\\n    --A.citprojectid, --we need to Join and get sbu_ID from [DWH].[PLN_PROJECTS_DIM] PowerBI\\n    A.Tower,\\n    --A.Project_Identifier, --we need to Join and get sbu_ID from [DWH].[PLN_PROJECTS_DIM] PowerBI\\n    A.Raised_On,\\n    A.Actual_Closure_Date,\\n    A.Target_Closure_Date,\\n    A.Ageing,\\n    CASE \\n        WHEN A.Ageing <=7  THEN  \\'(0-7)\\'\\n        WHEN A.Ageing <= 14 THEN \\'(8-14)\\'\\n        WHEN A.Ageing <= 21 THEN \\'(15-21)\\'\\n        WHEN A.Ageing <= 30 THEN \\'(22-30)\\'\\n        WHEN A.Ageing IS NULL THEN NULL\\n        ELSE \\'>30\\' END AS Agetub,\\n    CASE \\n        WHEN A.Ageing <=7  THEN 1\\n        WHEN A.Ageing <=14 THEN 2\\n        WHEN A.Ageing <=21 THEN 3\\n        WHEN A.Ageing <=30 THEN 4\\n        WHEN A.Ageing IS NULL THEN NULL\\n        ELSE 5     END AS Agetub_sort\\nFROM(\\n        SELECT \\n                AC.*,\\n                CASE \\n                    WHEN TRIM(LOWER(AC.Status)) = \\'open\\' AND ISNULL(AC.Raised_On,\\'\\') <> \\'\\' THEN DATEDIFF(day,CAST(substring( AC.Raised_On,charindex(\\'/\\',AC.Raised_On)+1,2)+\\'/\\'+ left(AC.Raised_On,2)+\\'/\\'+right(AC.Raised_On,4) AS DATE ),GETDATE())\\n                    WHEN TRIM(LOWER(AC.Status)) = \\'closed\\' AND ISNULL(AC.Actual_Closure_Date,\\'\\') <> \\'\\' AND ISNULL(AC.Actual_Closure_Date,\\'\\') like (\\'%/%\\') AND ISNULL(AC.Raised_On,\\'\\') <> \\'\\' \\n                        THEN  DATEDIFF(day,cast(substring( AC.Raised_On,charindex(\\'/\\',AC.Raised_On)+1,2)+\\'/\\'+ left(AC.Raised_On,2)+\\'/\\'+right(AC.Raised_On,4) as date),cast(substring( AC.Actual_Closure_Date,charindex(\\'/\\',AC.Actual_Closure_Date)+1,2)+\\'/\\'+ left(AC.Actual_Closure_Date,2)+\\'/\\'+right(AC.Actual_Closure_Date,4) as date))\\n                ELSE NULL END AS Ageing        \\n        FROM(\\n            SELECT      \\n                CAST(upload_time as DATE)  Upload_Time,\\n                CI.Reference_Number,\\n                CI.PR_PO_Other_Ref_No,\\n                CASE\\n                    WHEN CI.SBU_Issue_Raised_by LIKE \\'%SBU 1%\\' THEN \\'SBU 1\\'\\n                    WHEN CI.SBU_Issue_Raised_by LIKE \\'%SBU 2%\\' THEN \\'SBU 2\\'\\n                    WHEN CI.SBU_Issue_Raised_by LIKE \\'%SBU 3%\\' THEN \\'SBU 3\\'\\n                    WHEN CI.SBU_Issue_Raised_by LIKE \\'%SBU 4%\\' THEN \\'SBU 4\\'\\n                    WHEN CI.SBU_Issue_Raised_by LIKE \\'%SBU 5%\\' THEN \\'SBU 5\\'\\n                    ELSE \\'UNKNOWN\\' END AS SBU_SCLICER,\\n                CASE\\n                    WHEN CI.Pending_With IS NULL OR TRIM(CI.Pending_With) = \\'\\' THEN \\'Not Available\\'\\n                    ELSE CI.Pending_With\\n                    END AS Pending_With,\\n                CI.Issue_Description,\\n                CI.Current_Status,\\n                CI.Impact_On,\\n                CI.Status,\\n                CI.Project,\\n                CI.Project_id as CITPROJECTID,\\n                PS.Project_id,\\n                PS.Project_Identifier,\\n                CI.Sbu_ID,\\n                CI.Tower,\\n                --CI.Raised_On,\\n                --CI.Target_Closure_Date,\\n                --CI.Actual_Closure_Date\\n                CASE \\n                    WHEN CI.Raised_On IS NOT NULL AND TRIM(CI.Raised_On) NOT IN (\\'\\',\\'-\\')  and CI.raised_on like \\'%-%\\' then format(cast(CI.raised_on as date),\\'dd/MM/yyyy\\')  \\n                    else CI.raised_on  end AS Raised_On,\\n                CASE \\n                    WHEN CI.Actual_Closure_Date IS NOT NULL AND TRIM(CI.Actual_Closure_Date) NOT IN (\\'\\',\\'-\\')  and CI.Actual_Closure_Date like \\'%-%\\' then format(cast(CI.Actual_Closure_Date as date),\\'dd/MM/yyyy\\')  \\n                    else CI.Actual_Closure_Date  end AS Actual_Closure_Date,\\n                CASE \\n                    WHEN CI.Target_Closure_Date IS NOT NULL AND TRIM( CI.Target_Closure_Date) NOT IN (\\'\\',\\'-\\')  and CI.Target_Closure_Date like \\'%-%\\' then format(cast(CI.Target_Closure_Date as date),\\'dd/MM/yyyy\\')  \\n                    else CI.Target_Closure_Date  end AS Target_Closure_Date\\n            FROM\\n                        STG.O_PLN_CRITICAL_ISSUE_TRACKER_STG CI\\n            LEFT JOIN    STG.PROJECTS_STG AS PS \\n                ON        CI.Project_id = PS.Project_identifier\\n                    --need to understand from where this project_short came.\\n            WHERE        TRIM(CI.Issue_Description) NOT IN (\\'\\')) AC\\n        )A\\nLEFT JOIN    [DWH].[PLN_PROJECTS_DIM] P\\n    ON      A.PROJECT_IDENTIFIER=P.PROJECT_IDENTIFIER \\nLEFT JOIN    [DWH].[PLN_SBU_MAPPING_DIM] SM\\n    ON      A.SBU_ID=SM.SBU_IDENTIFIER',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Project_ID as integer,",
						"          SBU_ID as integer,",
						"          Tower as string,",
						"          Reference_Number as string,",
						"          PR_PO_Other_Ref_No as string,",
						"          Pending_With as string,",
						"          Issue_Description as string,",
						"          Current_Status as string,",
						"          Impact_On as string,",
						"          Status as string,",
						"          Project as string,",
						"          Raised_On as string,",
						"          Actual_Closure_Date as string,",
						"          Target_Closure_Date as string,",
						"          Ageing as string,",
						"          Agetub as string,",
						"          Agetub_sort as string,",
						"          Update_Date as date,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE [DWH].[PLN_CRITICAL_ISSUE_TRACKER_FACT];'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Project_ID = PROJECT_ID,",
						"          SBU_ID,",
						"          Tower,",
						"          Reference_Number,",
						"          PR_PO_Other_Ref_No,",
						"          Pending_With,",
						"          Issue_Description,",
						"          Current_Status,",
						"          Impact_On,",
						"          Status,",
						"          Project,",
						"          Raised_On,",
						"          Actual_Closure_Date,",
						"          Target_Closure_Date,",
						"          Ageing,",
						"          Agetub,",
						"          Agetub_sort = Agetub,",
						"          Update_Date = Upload_Date,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PLN_DRYAREA')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_O_PLN_DRYAREA_RAW_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PLN_DRYAREA_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          PROJECT_ID as integer,",
						"          PROJECT_IDENTIFIER as string,",
						"          LEVEL_ID as integer,",
						"          SBU_ID as integer,",
						"          TOWER as string,",
						"          LEVEL as string,",
						"          FLAT as string,",
						"          Sclicer as string,",
						"          ACTIVITY_ID as integer,",
						"          VALUE as string,",
						"          TYPE_OF_WORK as string,",
						"          CATEGORY as string,",
						"          UPLOAD_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT\\n    P.Sort_ID as PROJECT_ID,\\n    P.PROJECT_IDENTIFIER ,\\n    LM.LEVEL_MAP_ID AS LEVEL_ID,\\n     SM.SBU_MAP_ID AS SBU_ID,\\n    DA.TOWER,\\n    DA.[LEVEL],\\n    DA.FLAT,\\n    \\'Dry Area\\' as Sclicer,\\n     DA.ACTIVITY_ID,\\n    CASE \\n        WHEN DA.VALUE IN (\\'\\',\\'NA\\') THEN \\'0%\\'\\n        ELSE DA.VALUE\\n    END AS VALUE,\\n    DA.TYPE_OF_WORK,\\n    DA.CATEGORY,\\n     DA.UPLOAD_DATE\\nFROM(\\n     SELECT\\n            DR.UPLOAD_TIME AS UPLOAD_DATE,\\n            DR.PROJECT_ID,\\n            DR.TOWER,\\n            DR.[LEVEL],\\n            DR.FLAT,\\n            COLUMN_NAME.*,\\n            DM.ACTIVITY_ID,\\n            DM.SBU_ID,\\n            DM.CATEGORY,\\n            DENSE_RANK() OVER (PARTITION BY  PROJECT_ID , DM.SBU_ID ORDER BY  Convert(Date,UPLOAD_TIME) DESC ) AS DRANK\\n     FROM [STG].[O_PLN_DRYAREA_RAW_STG] DR\\n     CROSS APPLY(\\n                      SELECT  [HSE_CLEARANCE_FOR_DESHUTTERING],\\'HSE CLEARANCE FOR DESHUTTERING\\'\\n          UNION ALL SELECT  [MEP_RISER_WORKS],\\'MEP RISER WORKS\\'\\n          UNION ALL SELECT  [LPG_PIPE],\\'LPG PIPE\\'\\n          UNION ALL SELECT  [BLOCKWORK_LAYOUT_MARKING],\\'BLOCKWORK LAYOUT MARKING\\'\\n          UNION ALL SELECT  [BLOCKWORK_FIRST_LAYER],\\'BLOCKWORK FIRST LAYER\\'\\n          UNION ALL SELECT  [BLOCKWORK_WITH_1MTR_MARKING],\\'BLOCKWORK WITH 1MTR MARKING\\'\\n          UNION ALL SELECT  [GI_LINTEL],\\'GI LINTEL\\'\\n          UNION ALL SELECT  [RCC_LINTEL_STIFFENER] ,\\'RCC LINTEL / STIFFENER\\'\\n          UNION ALL SELECT  [ABOVE_LINTEL_BLOCK_WORK],\\'ABOVE LINTEL BLOCK WORK\\'\\n          UNION ALL SELECT  [HEAD_RESTRAINTS_INSTALLATION],\\'HEAD RESTRAINTS INSTALLATION\\'\\n          UNION ALL SELECT  [FIRE_SEALANT_WORKS_AND_PU_FOAM_WORKS],\\'FIRE SEALANT WORKS & PU FOAM WORKS\\'\\n          UNION ALL SELECT  [MEP_MARKING_FOR_HL_BUILDERS_WORK],\\'MEP MARKING FOR HL BUILDERS WORK\\'\\n          UNION ALL SELECT  [BLOCKWORK_CUTTING_FOR_MEP_SERVICES] ,\\'BLOCKWORK CUTTING FOR MEP SERVICES\\'\\n          UNION ALL SELECT  [MEP_WALL_MARKING_FOR_CUTTING_AND_CHASING],\\'MEP WALL MARKING FOR CUTTING & CHASING\\'\\n          UNION ALL SELECT  [BULL_MARKING_FOR_PLASTER],\\'BULL MARKING FOR PLASTER\\'\\n          UNION ALL SELECT  [SUB_FRAME],\\'SUB FRAME\\'\\n          UNION ALL SELECT  [CORNER_BEAD_FIXING],\\'CORNER BEAD FIXING\\'\\n          UNION ALL SELECT  [CUTTING_AND_CHASING],\\'CUTTING & CHASING\\'\\n          UNION ALL SELECT  [MEP_PLASTERING_CLEARANCE_BOX_FIXING_AND_PIPE_SETTING], \\'MEP PLASTERING CLEARANCE (BOX FIXING & PIPE SETTING)\\'\\n          UNION ALL SELECT  [ONU_DB_AND_ALL_MEP_WORKS_INSTALLATION],\\'ONU, DB & ALL MEP WORKS INSTALLATION\\'\\n          UNION ALL SELECT  [ONU_DB_AND_ALL_MEP_WORKS_PACKING],\\'ONU, DB & ALL MEP WORKS PACKING\\'\\n          UNION ALL SELECT  [DRY_AREA_PLASTER],\\'DRY AREA PLASTER\\'\\n          UNION ALL SELECT  [PLASTERING_CLEARANCE_WITH_1_METER_MARKING], \\'PLASTERING CLEARANCE WITH 1 METER MARKING\\'\\n          UNION ALL SELECT  [CENTER_LINE_MARKING_FOR_FACADE_INSTALLATION], \\'CENTER LINE MARKING FOR FACADE INSTALLATION\\'\\n          UNION ALL SELECT  [UCW_STARTER_GUTTER],\\'UCW-STARTER GUTTER\\'\\n          UNION ALL SELECT  [UCW_BRACKETS],\\'UCW-BRACKETS\\'\\n          UNION ALL SELECT  [UCW_PANELS],\\'UCW-PANELS\\'\\n          UNION ALL SELECT  [UCW_ALIGNMENT],\\'UCW-ALIGNMENT\\'\\n          UNION ALL SELECT  [DRY_AREA_TILE_MARKING],\\'DRY AREA TILE MARKING\\'\\n          UNION ALL SELECT  [DRY_AREA_BORE_PACKING],\\'DRY AREA BORE PACKING\\'\\n          UNION ALL SELECT  [DRY_AREA_SCREED],\\'DRY AREA SCREED\\'\\n          UNION ALL SELECT  [SCREED_CURING],\\'SCREED CURING\\'\\n          UNION ALL SELECT  [PRIMER_STUCCO_BANDING],\\'PRIMER,STUCCO BANDING\\'\\n          UNION ALL SELECT  [BULK_HEAD],\\'BULK HEAD\\'\\n          UNION ALL SELECT  [MEP_H_L_WIRING],\\'MEP H/L WIRING\\'\\n          UNION ALL SELECT  [MEP_H_L_FRAMING_CLEARANCE],\\'MEP H/L FRAMING CLEARANCE\\'\\n          UNION ALL SELECT  [FIRE_SEALANT_WORKS_AROUND_DUCTS],\\'FIRE SEALANT WORKS AROUND DUCTS\\'\\n          UNION ALL SELECT  [DRY_AREA_FC_FRAMING],\\'DRY AREA FC FRAMING\\'\\n          UNION ALL SELECT  [WARDROBE_NIB_WALL],\\'WARDROBE NIB WALL\\'\\n          UNION ALL SELECT  [MEP_H_L_BOARDING_CLEARANCE],\\'MEP H/L BOARDING CLEARANCE\\'\\n          UNION ALL SELECT  [FC_BOARDING_WITH_JOINT_TAPING],\\'FC BOARDING WITH JOINT TAPING\\'\\n          UNION ALL SELECT  [PRIMER_CEILING],\\'PRIMER CEILING\\'\\n          UNION ALL SELECT  [STUCCO_1ST_COAT_CEILING],\\'STUCCO 1ST COAT CEILING\\'\\n          UNION ALL SELECT  [STUCCO_2ND_COAT_CEILING],\\'STUCCO 2ND COAT CEILING\\'\\n          UNION ALL SELECT  [FIRST_COAT_PAINT_CEILING],\\'FIRST COAT PAINT CEILING\\'\\n          UNION ALL SELECT  [MAIN_DOOR_THRESHOLD],\\'MAIN DOOR THRESHOLD\\'\\n          UNION ALL SELECT  [DRY_AREA_FLOOR_TILING],\\'DRY AREA FLOOR TILING\\'\\n          UNION ALL SELECT  [DRY_AREA_SKIRTING],\\'DRY AREA SKIRTING\\'\\n          UNION ALL SELECT  [POP_ABOVE_SKIRTING],\\'POP ABOVE SKIRTING\\'\\n          UNION ALL SELECT  [HINGE_DOOR_BOX_INSTALLATION],\\'HINGE DOOR BOX INSTALLATION\\'\\n          UNION ALL SELECT  [SCREED_NEAR_HINGE_DOOR],\\'SCREED NEAR HINGE DOOR\\'\\n          UNION ALL SELECT  [HINGE_DOOR_FRAME_INSTALLATION],\\'HINGE DOOR FRAME INSTALLATION\\'\\n          UNION ALL SELECT  [CURTAIN_WALL_BOX_SECTION],\\'CURTAIN WALL BOX SECTION\\'\\n          UNION ALL SELECT  [CURTAIN_WALL_FRAME_INSTALLATION],\\'CURTAIN WALL FRAME INSTALLATION\\'\\n          UNION ALL SELECT  [CURTAIN_WALL_GLASS_INSTALLATION],\\'CURTAIN WALL GLASS INSTALLATION\\'\\n          UNION ALL SELECT  [UCW_GI_SHEET_INSTALLATION_WALL],\\'UCW-GI SHEET INSTALLATION - WALL\\'\\n          UNION ALL SELECT  [UCW_GI_SHEET_INSTALLATION_FLOOR],\\'UCW-GI SHEET INSTALLATION - FLOOR\\'\\n          UNION ALL SELECT  [SCREED_NEAR_CURTAIN_WALL],\\'SCREED NEAR CURTAIN WALL\\'\\n          UNION ALL SELECT  [SLIDING_DOOR_BOX_INSTALLATION],\\'SLIDING DOOR BOX INSTALLATION\\'\\n          UNION ALL SELECT  [SLIDING_DOOR_FRAME_INSTALLATION],\\'SLIDING DOOR FRAME INSTALLATION\\'\\n          UNION ALL SELECT  [SCREED_NEAR_SLIDING_DOOR],\\'SCREED NEAR SLIDING DOOR\\'\\n          UNION ALL SELECT  [LEFT_OVER_TILE_INSTALLATION],\\'LEFT OVER TILE INSTALLATION\\'\\n          UNION ALL SELECT  [LEFT_OVER_SKIRTING],\\'LEFT OVER SKIRTING\\'\\n          UNION ALL SELECT  [TILE_GROUTING],\\'TILE GROUTING\\'\\n          UNION ALL SELECT  [TILE_SILICONE_WORKS],\\'TILE SILICONE WORKS\\'\\n          UNION ALL SELECT  [CURTAIN_WALL_MULLION],\\'CURTAIN WALL MULLION\\'\\n          UNION ALL SELECT  [CURTAIN_WALL_FLASHING_INSTALLATION],\\'CURTAIN WALL FLASHING INSTALLATION\\'\\n          UNION ALL SELECT  [CURTAIN_WALL_SILICONE],\\'CURTAIN WALL SILICONE\\'\\n          UNION ALL SELECT  [UCW_FIRESTOP_AND_SILICONE],\\'UCW-FIRESTOP AND SILICONE\\'\\n          UNION ALL SELECT  [UCW_GI_FLASHING],\\'UCW-GI FLASHING\\'\\n          UNION ALL SELECT  [HINGE_DOOR_GLASS_INSTALLATION],\\'HINGE DOOR GLASS INSTALLATION\\'\\n          UNION ALL SELECT  [HINGE_DOOR_INTERNAL_SILICONE],\\'HINGE DOOR INTERNAL SILICONE\\'\\n          UNION ALL SELECT  [HINGE_DOOR_ALIGNMENT],\\'HINGE DOOR ALIGNMENT\\'\\n          UNION ALL SELECT  [HINGE_DOOR_EXTERNAL_SILICONE],\\'HINGE DOOR EXTERNAL SILICONE\\'\\n          UNION ALL SELECT  [SLIDING_DOOR_GLASS_INSTALLATION],\\'SLIDING DOOR GLASS INSTALLATION\\'\\n          UNION ALL SELECT  [SLIDING_DOOR_INTERNAL_SILICONE],\\'SLIDING DOOR INTERNAL SILICONE\\'\\n          UNION ALL SELECT  [SLIDING_DOOR_ALIGNMENT],\\'SLIDING DOOR ALIGNMENT\\'\\n          UNION ALL SELECT  [SLIDING_DOOR_EXTERNAL_SILICONE],\\'SLIDING DOOR EXTERNAL SILICONE\\'\\n          UNION ALL SELECT  [WINDOW_JAMB_CORNER_PELMET_AREA_SHADOW_ANGLE_POP_WORKS],\\'WINDOW JAMB,CORNER,PELMET AREA, SHADOW ANGLE POP WORKS\\'\\n          UNION ALL SELECT  [WALL_STUCCO_1ST_COAT],\\'WALL STUCCO 1ST COAT\\'\\n          UNION ALL SELECT  [WALL_STUCCO_2ND_COAT],\\'WALL STUCCO 2ND COAT\\'\\n          UNION ALL SELECT  [WALL_PAINT_1ST_COAT],\\'WALL PAINT 1ST COAT\\'\\n          UNION ALL SELECT  [DOOR_FRAME_INSTALLATION],\\'DOOR - FRAME INSTALLATION\\'\\n          UNION ALL SELECT  [DOOR_ARCHITRAVE_INSTALLATION],\\'DOOR - ARCHITRAVE INSTALLATION\\'\\n          UNION ALL SELECT  [DOOR_SHUTTER_INSTALLATION],\\'DOOR - SHUTTER INSTALLATION\\'\\n          UNION ALL SELECT  [DOOR_IRONMONGERY_INSTALLATION],\\'DOOR - IRONMONGERY INSTALLATION\\'\\n          UNION ALL SELECT  [DOOR_SILICONE_WORKS],\\'DOOR - SILICONE WORKS\\'\\n          UNION ALL SELECT  [CUT_PIECE_SKIRTING_NEAR_DOOR],\\'CUT PIECE SKIRTING NEAR DOOR\\'\\n          UNION ALL SELECT  [GAS_METER_INSTALLATION],\\'GAS METER INSTALLATION\\'\\n          UNION ALL SELECT  [MEP_KITCHEN_APPLIANCES],\\'MEP KITCHEN APPLIANCES\\'\\n          UNION ALL SELECT  [WARDROBE_CARCASS_INSTALLATION],\\'WARDROBE CARCASS INSTALLATION\\'\\n          UNION ALL SELECT  [WARDROBE_SHUTTER_INSTALLATION],\\'WARDROBE SHUTTER INSTALLATION\\'\\n          UNION ALL SELECT  [WARDROBE_SILICONE_WORKS],\\'WARDROBE SILICONE WORKS\\'\\n          UNION ALL SELECT  [CUT_PIECE_SKIRTING_NEAR_WARDROBE],\\'CUT PIECE SKIRTING NEAR WARDROBE\\'\\n          UNION ALL SELECT  [AIR_BALANCING_FOR_FCU],\\'AIR BALANCING FOR FCU\\'\\n          UNION ALL SELECT  [FCU_CLOSURE_CLEARANCE],\\'FCU CLOSURE CLEARANCE\\'\\n          UNION ALL SELECT  [VCD_CLOSURE_FCU],\\'VCD CLOSURE - FCU\\'\\n          UNION ALL SELECT  [AIR_BALANCING_FOR_FAHU],\\'AIR BALANCING FOR FAHU\\'\\n          UNION ALL SELECT  [FAHU_CLOSURE_CLEARANCE],\\'FAHU CLOSURE CLEARANCE\\'\\n          UNION ALL SELECT  [VCD_CLOSURE_FAHU],\\'VCD CLOSURE - FAHU\\'\\n          UNION ALL SELECT  [FINAL_FIXTURES_INSTALLATION],\\'FINAL FIXTURES INSTALLATION\\'\\n          UNION ALL SELECT  [ACCESS_PANEL_FINAL_COAT_AND_INSTALLATION],\\'ACCESS PANEL FINAL COAT AND INSTALLATION\\'\\n          UNION ALL SELECT  [DRY_AREA_FINAL_COAT_PREPARATION],\\'DRY AREA FINAL COAT PREPARATION\\'\\n          UNION ALL SELECT  [DRY_AREA_FINAL_COAT_PAINT],\\'DRY AREA FINAL COAT PAINT\\'\\n          UNION ALL SELECT  [THERMOSTAT_COVER_INSTALLATION],\\'THERMOSTAT COVER INSTALLATION\\'\\n          UNION ALL SELECT  [INTERCOM_COVER_INSTALLATION],\\'INTERCOM COVER INSTALLATION\\'\\n          UNION ALL SELECT  [ONU_AND_DB_PANEL_DOOR],\\'ONU & DB PANEL DOOR\\'\\n          UNION ALL SELECT  [SWITCH_SOCKET_COVER_INSTALLATION],\\'SWITCH SOCKET COVER INSTALLATION\\'\\n          ) AS COLUMN_NAME(VALUE,TYPE_OF_WORK)\\n          INNER JOIN [STG].[O_PLN_DRYAREA_MAP_STG] DM\\n          ON COLUMN_NAME.TYPE_OF_WORK = DM.ACTIVITY_SEQUENCE\\n          WHERE VALUE IS NOT NULL ) DA\\nLEFT JOIN [DWH].[PLN_LEVEL_MAP_ALL_DIM] AS LM\\n     ON          DA.[LEVEL] = LM.[LEVEL]\\nLEFT JOIN [DWH].[PROJECTS_NEW_DIM] P\\n      ON          DA.PROJECT_ID=P.PROJECT_IDENTIFIER \\nLEFT JOIN [DWH].[PLN_SBU_MAPPING_DIM] SM\\n     ON          DA.SBU_ID=SM.SBU_IDENTIFIER\\nWHERE DRANK = 1',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Project_ID as integer,",
						"          Project_Identifier as string,",
						"          SBU_ID as integer,",
						"          Level_ID as integer,",
						"          Tower as string,",
						"          Level as string,",
						"          Flat as string,",
						"          Sclicer as string,",
						"          Activity_ID as integer,",
						"          Value as string,",
						"          Type_of_work as string,",
						"          Category as string,",
						"          Update_Date as date,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE [DWH].[PLN_DRYAREA_FACT];'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Project_ID = PROJECT_ID,",
						"          Project_Identifier = PROJECT_IDENTIFIER,",
						"          SBU_ID,",
						"          Level_ID = LEVEL_ID,",
						"          Tower = TOWER,",
						"          Level = LEVEL,",
						"          Flat = FLAT,",
						"          Sclicer,",
						"          Activity_ID = ACTIVITY_ID,",
						"          Value = VALUE,",
						"          Type_of_work = TYPE_OF_WORK,",
						"          Category = CATEGORY,",
						"          Update_Date = UPLOAD_DATE,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PLN_ELECTRICROOM')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_O_PLN_ELECTRICALROOM_RAW_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "Import data from DS_O_PLN_ELECTRICALROOM_RAW_STG_TRG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PLN_ELECTRICROOM_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          PROJECT_ID as integer,",
						"          LEVEL_ID as integer,",
						"          SBU_ID as integer,",
						"          PROJECT_IDENTIFIER as string,",
						"          TOWER as string,",
						"          LEVEL as string,",
						"          Sclicer as string,",
						"          ACTIVITY_ID as integer,",
						"          VALUE as string,",
						"          TYPE_OF_WORK as string,",
						"          CATEGORY as string,",
						"          UPLOAD_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT \\n    P.Sort_ID as PROJECT_ID,\\n    LM.LEVEL_MAP_ID AS LEVEL_ID,\\n    SM.SBU_MAP_ID AS SBU_ID,\\n    P.PROJECT_IDENTIFIER,\\n    E.TOWER    ,\\n    E.LEVEL,\\n    \\'Electrical Room\\' as Sclicer,\\n    E.ACTIVITY_ID    ,\\n    CASE \\n        WHEN E.VALUE IN (\\'\\',\\'NA\\') THEN \\'0%\\'\\n        ELSE E.VALUE\\n    END AS VALUE,\\n    E.TYPE_OF_WORK    ,\\n    E.CATEGORY   ,\\n    E.UPLOAD_DATE  \\nFROM (\\nSELECT ER.UPLOAD_TIME AS UPLOAD_DATE,\\nER.PROJECT_ID,\\nER.TOWER,\\nER.LEVEL,\\nCOLUMN_NAME.*,\\nEM.ACTIVITY_ID,\\nEM.SBU_ID,\\nEM.CATEGORY,\\nDENSE_RANK () OVER(PARTITION BY  PROJECT_ID ORDER BY  CAST(UPLOAD_TIME AS DATE) DESC) DRANK\\nFROM STG.O_PLN_ELECTRICALROOM_RAW_STG ER\\n CROSS APPLY  (\\n         SELECT BLOCKWORK_LAYOUT,\\'BLOCKWORK LAYOUT\\'\\nUNION ALL SELECT BLOCKWORK,\\'BLOCKWORK\\'\\nUNION ALL SELECT MEP_MARKING_FOR_BUILDERS_WORK,\\'MEP MARKING FOR BUILDERS WORK\\'\\nUNION ALL SELECT CUTTING_AND_CHASING_OF_BLOCKWORK,\\'CUTTING AND CHASING OF BLOCKWORK\\'\\nUNION ALL SELECT MEP_SERVICES_INSTALLATION,\\'MEP SERVICES INSTALLATION\\'\\nUNION ALL SELECT WALL_MEP_SERVICES_PACKING,\\'WALL MEP SERVICES PACKING\\'\\nUNION ALL SELECT PLASTER,\\'PLASTER\\'\\nUNION ALL SELECT SCREED,\\'SCREED\\'\\nUNION ALL SELECT WALL_AND_CEILING_PRIMER,\\'WALL AND CEILING PRIMER\\'\\nUNION ALL SELECT CEILING_STUCCO_1ST_AND_2ND_COAT,\\'CEILING STUCCO (1ST AND 2ND COAT)\\'\\nUNION ALL SELECT WALL_STUCCO_1ST_AND_2ND_COAT,\\'WALL STUCCO (1ST AND 2ND COAT)\\'\\nUNION ALL SELECT CEILING_FIRST_COAT_PAINT,\\'CEILING FIRST COAT PAINT\\'\\nUNION ALL SELECT WALL_FIRST_COAT_PAINT,\\'WALL FIRST COAT PAINT\\'\\nUNION ALL SELECT METER_BOARD_FIXING,\\'METER BOARD FIXING\\'\\nUNION ALL SELECT METER_BOARD_PAINTING,\\'METER BOARD PAINTING\\'\\nUNION ALL SELECT INSTALLATION_OF_CABLE_TRAY_AND_TRUNKING,\\'INSTALLATION OF CABLE TRAY AND TRUNKING\\'\\nUNION ALL SELECT INSTALLATION_OF_PANELS,\\'INSTALLATION OF PANELS\\'\\nUNION ALL SELECT CABLE_LAYING_AND_GLANDING_WORKS,\\'CABLE LAYING AND GLANDING WORKS\\'\\nUNION ALL SELECT DRESSING_AND_TERMINATION_OF_SMDB_AND_PANELS,\\'DRESSING AND TERMINATION OF SMDB AND PANELS\\'\\nUNION ALL SELECT BUS_BAR_WITH_TAP_OFF_BOX_COMPLETION,\\'BUS BAR WITH TAP OFF BOX COMPLETION\\'\\nUNION ALL SELECT THRESHOLD,\\'THRESHOLD\\'\\nUNION ALL SELECT FLOOR_TILE,\\'FLOOR TILE\\'\\nUNION ALL SELECT DOOR_FRAME_INSTALLATION,\\'DOOR FRAME INSTALLATION\\'\\nUNION ALL SELECT DOOR_ARCHITRAVE_INSTALLATION,\\'DOOR ARCHITRAVE INSTALLATION\\'\\nUNION ALL SELECT DOOR_SHUTTER_INSTALLATION,\\'DOOR SHUTTER INSTALLATION\\'\\nUNION ALL SELECT DOOR_IRONMONGERY_INSTALLATION,\\'DOOR IRONMONGERY INSTALLATION\\'\\nUNION ALL SELECT DOOR_SILICONE,\\'DOOR SILICONE\\'\\nUNION ALL SELECT EPOXY_GRINDING,\\'EPOXY ERINDING\\'\\nUNION ALL SELECT EPOXY_BUG_FILL,\\'EPOXY BUG FILL\\'\\nUNION ALL SELECT EPOXY_PRIMER,\\'EPOXY PRIMER\\'\\nUNION ALL SELECT EPOXY_FIRST_COAT,\\'EPOXY FIRST COAT\\'\\nUNION ALL SELECT EPOXY_FINAL_COAT,\\'EPOXY FINAL COAT\\'\\nUNION ALL SELECT SKIRTING,\\'SKIRTING\\'\\nUNION ALL SELECT POP_WORKS,\\'POP WORKS\\'\\nUNION ALL SELECT ELECTRICAL_ROOM_TOP_BOARDING,\\'ELECTRICAL ROOM TOP BOARDING\\'\\nUNION ALL SELECT FIRE_SEALANT_WORKS,\\'FIRE SEALANT WORKS\\'\\nUNION ALL SELECT ANGLE_FIXING,\\'ANGLE FIXING\\'\\nUNION ALL SELECT SHAFT_BOARDING,\\'SHAFT BOARDING\\'\\nUNION ALL SELECT GROUTING,\\'EROUTING\\'\\nUNION ALL SELECT SILICONE,\\'SILICONE\\'\\nUNION ALL SELECT SIGNAGE,\\'SIGNAGE\\'\\nUNION ALL SELECT MEP_FINAL_FIXTURES,\\'MEP FINAL FIXTURES\\'\\nUNION ALL SELECT ELECTRIC_METER_INSTALLATION,\\'ELECTRIC METER INSTALLATION\\'\\nUNION ALL SELECT FINAL_COAT_PAINT,\\'FINAL COAT PAINT\\'\\n)AS COLUMN_NAME(VALUE,TYPE_OF_WORK)\\nleft JOIN STG.O_PLN_ELECTRICALROOM_MAP_STG EM\\nON COLUMN_NAME.TYPE_OF_WORK = EM.ACTIVITY_SEQUENCE\\nWHERE VALUE IS NOT NULL\\n) E\\nLEFT JOIN [DWH].[PLN_LEVEL_MAP_ALL_DIM] AS LM\\n     ON          E.[LEVEL] = LM.[LEVEL]\\nLEFT JOIN [DWH].[PROJECTS_NEW_DIM]P\\n      ON          E.PROJECT_ID=P.PROJECT_IDENTIFIER\\nLEFT JOIN [DWH].[PLN_SBU_MAPPING_DIM] SM\\n     ON          E.SBU_ID=SM.SBU_IDENTIFIER\\nWHERE          E.DRANK = 1',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(LoadDateTime = currentUTC(),",
						"          ID = SurrogateKey_ID+$MAX_ID) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Project_ID as integer,",
						"          Project_Indentifer as string,",
						"          SBU_ID as integer,",
						"          Level_ID as integer,",
						"          Tower as string,",
						"          Level as string,",
						"          Sclicer as string,",
						"          Activity_ID as integer,",
						"          Value as string,",
						"          Type_of_work as string,",
						"          Category as string,",
						"          Update_date as date,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE [DWH].[PLN_ELECTRICROOM_FACT];'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Project_ID = PROJECT_ID,",
						"          Project_Indentifer = PROJECT_IDENTIFIER,",
						"          SBU_ID,",
						"          Level_ID = LEVEL_ID,",
						"          Tower = TOWER,",
						"          Level = LEVEL,",
						"          Sclicer,",
						"          Activity_ID = ACTIVITY_ID,",
						"          Value = VALUE,",
						"          Type_of_work = TYPE_OF_WORK,",
						"          Category = CATEGORY,",
						"          Update_date = UPLOAD_DATE,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PLN_ENGINEERING_DRAWING')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_PLN_ENGINEERING_DRAWING_TRG",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "Import data from DS_O_PLN_DRAWING_DETAIL_DRAW_STG_TRG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PLN_ENGINEERING_DRAWING_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to "
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          PROJECT_ID as integer,",
						"          PROJECT_IDENTIFIER as string,",
						"          SBU_ID as integer,",
						"          Upload_Date as date,",
						"          tower as string,",
						"          Type as string,",
						"          Villa_Type as string,",
						"          Category as string,",
						"          Drawing_Number as string,",
						"          Drawing_Title as string,",
						"          Scheduled_Date as string,",
						"          {PNCA_commitment } as string,",
						"          R0 as string,",
						"          R0_Trans_Id as string,",
						"          R1 as string,",
						"          R1_Trans_Id as string,",
						"          R2 as string,",
						"          R2_Trans_Id as string,",
						"          R3 as string,",
						"          R3_Trans_Id as string,",
						"          R4 as string,",
						"          R4_Trans_Id as string,",
						"          R5 as string,",
						"          R5_Trans_Id as string,",
						"          R6 as string,",
						"          R6_Trans_Id as string,",
						"          R7 as string,",
						"          R7_Trans_Id as string,",
						"          R8 as string,",
						"          R8_Trans_Id as string,",
						"          R9 as string,",
						"          R9_Trans_Id as string,",
						"          R10 as string,",
						"          R10_Trans_Id as string,",
						"          R11 as string,",
						"          R11_Trans_Id as string,",
						"          R12 as string,",
						"          R12_Trans_Id as string,",
						"          R13 as string,",
						"          R13_Trans_Id as string,",
						"          R14 as string,",
						"          R14_Trans_Id as string,",
						"          R15 as string,",
						"          R15_Trans_Id as string,",
						"          R16 as string,",
						"          R16_Trans_Id as string,",
						"          R17 as string,",
						"          R17_Trans_Id as string,",
						"          R18 as string,",
						"          R18_Trans_Id as string,",
						"          R19 as string,",
						"          R19_Trans_Id as string,",
						"          R20 as string,",
						"          R20_Trans_Id as string,",
						"          R21 as string,",
						"          R21_Trans_Id as string,",
						"          R22 as string,",
						"          R22_Trans_Id as string,",
						"          R23 as string,",
						"          R23_Trans_Id as string,",
						"          R24 as string,",
						"          R24_Trans_Id as string,",
						"          R25 as string,",
						"          R25_Trans_Id as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT \\n          P.Sort_ID as PROJECT_ID,\\n           PROJECT_ID as PROJECT_IDENTIFIER,\\n          SM.SBU_MAP_ID AS SBU_ID,\\n          CAST(upload_time AS DATE) AS Upload_Date,\\n        [tower],\\n        [Type],\\n        [Villa Type] AS [Villa_Type],\\n        Category,\\n        [Drawing Number] AS [Drawing_Number],\\n        [Drawing Title] AS [Drawing_Title],\\n        NULLIF([Scheduled Date],\\'\\') AS \\'Scheduled_Date\\',\\n        NULLIF([PNCA commitment],\\'\\') AS \\'PNCA_commitment \\',\\n        NULLIF(R0,\\'\\') AS R0,\\n        NULLIF([R0-Trans_Id],\\'\\') AS [R0_Trans_Id],\\n        NULLIF(R1,\\'\\') AS R1,\\n        NULLIF([R1-Trans_Id],\\'\\') AS [R1_Trans_Id],\\n        NULLIF(R2,\\'\\') AS R2,\\n        NULLIF([R2-Trans_Id],\\'\\') AS [R2_Trans_Id],\\n        NULLIF(R3,\\'\\') AS R3,\\n        NULLIF([R3-Trans_Id],\\'\\') AS [R3_Trans_Id],\\n        NULLIF(R4,\\'\\') AS R4,\\n        NULLIF([R4-Trans_Id],\\'\\') AS [R4_Trans_Id],\\n        NULLIF(R5,\\'\\') AS R5,\\n        NULLIF([R5-Trans_Id],\\'\\') AS [R5_Trans_Id],\\n        NULLIF(R6,\\'\\') AS R6,\\n        NULLIF([R6-Trans_Id],\\'\\') AS [R6_Trans_Id],\\n        NULLIF(R7,\\'\\') AS R7,\\n        NULLIF([R7-Trans_Id],\\'\\') AS [R7_Trans_Id],\\n        NULLIF(R8,\\'\\') AS R8,\\n        NULLIF([R8-Trans_Id],\\'\\') AS [R8_Trans_Id],\\n        NULLIF(R9,\\'\\') AS R9,\\n        NULLIF([R9-Trans_Id],\\'\\') AS [R9_Trans_Id],\\n        NULLIF(R10,\\'\\') AS R10,\\n        NULLIF([R10-Trans_Id],\\'\\') AS [R10_Trans_Id],\\n        NULLIF(R11,\\'\\') AS R11,\\n        NULLIF([R11-Trans_Id],\\'\\') AS [R11_Trans_Id],\\n        NULLIF(R12,\\'\\') AS R12,\\n        NULLIF([R12-Trans_Id],\\'\\') AS [R12_Trans_Id],\\n        NULLIF(R11,\\'\\') AS R13,\\n        NULLIF([R13-Trans_Id],\\'\\') AS [R13_Trans_Id],\\n        NULLIF(R12,\\'\\') AS R14,\\n        NULLIF([R14-Trans_Id],\\'\\') AS [R14_Trans_Id],\\n        NULLIF(R13,\\'\\') AS R15,\\n        NULLIF([R15-Trans_Id],\\'\\') AS [R15_Trans_Id],\\n        NULLIF(R16,\\'\\') AS R16,\\n        NULLIF([R16-Trans_Id],\\'\\') AS [R16_Trans_Id],\\n        NULLIF(R17,\\'\\') AS R17,\\n        NULLIF([R17-Trans_Id],\\'\\') AS [R17_Trans_Id],\\n        NULLIF(R18,\\'\\') AS R18,\\n        NULLIF([R18-Trans_Id],\\'\\') AS [R18_Trans_Id],\\n        NULLIF(R19,\\'\\') AS R19,\\n        NULLIF([R19-Trans_Id],\\'\\') AS [R19_Trans_Id],\\n        NULLIF(R20,\\'\\') AS R20,\\n        NULLIF([R20-Trans_Id],\\'\\') AS [R20_Trans_Id],\\n        NULLIF(R21,\\'\\') AS R21,\\n        NULLIF([R21-Trans_Id],\\'\\') AS [R21_Trans_Id],\\n        NULLIF(R22,\\'\\') AS R22,\\n        NULLIF([R22-Trans_Id],\\'\\') AS [R22_Trans_Id],\\n        NULLIF(R23,\\'\\') AS R23,\\n        NULLIF([R23-Trans_Id],\\'\\') AS [R23_Trans_Id],\\n        NULLIF(R24,\\'\\') AS R24,\\n        NULLIF([R24-Trans_Id],\\'\\') AS [R24_Trans_Id],\\n        NULLIF(R25,\\'\\') AS R25,\\n        NULLIF([R25-Trans_Id],\\'\\') AS [R25_Trans_Id]\\nFROM ( SELECT * , DENSE_RANK () OVER (PARTITION BY  project_id ORDER BY  CAST(upload_time AS DATE) DESC) Project_Udate_DRANK\\n        FROM STG.O_PLN_DRAWING_DETAIL_DRAW_STG\\n    WHERE ([Type] IS NOT NULL AND TRIM([Type]) NOT IN (\\'\\')) \\n     ) AB \\n     LEFT JOIN [DWH].[PROJECTS_NEW_DIM] P\\n      ON          AB.PROJECT_ID=P.PROJECT_IDENTIFIER \\n     LEFT JOIN [DWH].[PLN_SBU_MAPPING_DIM] SM\\n     ON          AB.SBU_ID=SM.SBU_IDENTIFIER\\n',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Project_ID as integer,",
						"          Project_Identifier as string,",
						"          SBU_ID as integer,",
						"          Tower as string,",
						"          Type as string,",
						"          Villa_Type as string,",
						"          Category as string,",
						"          Drawing_Number as string,",
						"          Drawing_Title as string,",
						"          Scheduled_Date as string,",
						"          PNCA_commitment as string,",
						"          R0 as string,",
						"          R0_Trans_Id as string,",
						"          R1 as string,",
						"          R1_Trans_Id as string,",
						"          R2 as string,",
						"          R2_Trans_Id as string,",
						"          R3 as string,",
						"          R3_Trans_Id as string,",
						"          R4 as string,",
						"          R4_Trans_Id as string,",
						"          R5 as string,",
						"          R5_Trans_Id as string,",
						"          R6 as string,",
						"          R6_Trans_Id as string,",
						"          R7 as string,",
						"          R7_Trans_Id as string,",
						"          R8 as string,",
						"          R8_Trans_Id as string,",
						"          R9 as string,",
						"          R9_Trans_Id as string,",
						"          R10 as string,",
						"          R10_Trans_Id as string,",
						"          R11 as string,",
						"          R11_Trans_Id as string,",
						"          R12 as string,",
						"          R12_Trans_Id as string,",
						"          R13 as string,",
						"          R13_Trans_Id as string,",
						"          R14 as string,",
						"          R14_Trans_Id as string,",
						"          R15 as string,",
						"          R15_Trans_Id as string,",
						"          R16 as string,",
						"          R16_Trans_Id as string,",
						"          R17 as string,",
						"          R17_Trans_Id as string,",
						"          R18 as string,",
						"          R18_Trans_Id as string,",
						"          R19 as string,",
						"          R19_Trans_Id as string,",
						"          R20 as string,",
						"          R20_Trans_Id as string,",
						"          R21 as string,",
						"          R21_Trans_Id as string,",
						"          R22 as string,",
						"          R22_Trans_Id as string,",
						"          R23 as string,",
						"          R23_Trans_Id as string,",
						"          R24 as string,",
						"          R24_Trans_Id as string,",
						"          R25 as string,",
						"          R25_Trans_Id as string,",
						"          Update_Date as date,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE [DWH].[PLN_ENGINEERING_DRAWING_FACT];'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Project_ID = PROJECT_ID,",
						"          SBU_ID,",
						"          Tower = tower,",
						"          Type,",
						"          Villa_Type,",
						"          Category,",
						"          Drawing_Number,",
						"          Drawing_Title,",
						"          Scheduled_Date,",
						"          PNCA_commitment = {PNCA_commitment },",
						"          R0,",
						"          R0_Trans_Id,",
						"          R1,",
						"          R1_Trans_Id,",
						"          R2,",
						"          R2_Trans_Id,",
						"          R3,",
						"          R3_Trans_Id,",
						"          R4,",
						"          R4_Trans_Id,",
						"          R5,",
						"          R5_Trans_Id,",
						"          R6,",
						"          R6_Trans_Id,",
						"          R7,",
						"          R7_Trans_Id,",
						"          R8,",
						"          R8_Trans_Id,",
						"          R9,",
						"          R9_Trans_Id,",
						"          R10,",
						"          R10_Trans_Id,",
						"          R11,",
						"          R11_Trans_Id,",
						"          R12,",
						"          R12_Trans_Id,",
						"          R13,",
						"          R13_Trans_Id,",
						"          R14,",
						"          R14_Trans_Id,",
						"          R15,",
						"          R15_Trans_Id,",
						"          R16,",
						"          R16_Trans_Id,",
						"          R17,",
						"          R17_Trans_Id,",
						"          R18,",
						"          R18_Trans_Id,",
						"          R19,",
						"          R19_Trans_Id,",
						"          R20,",
						"          R20_Trans_Id,",
						"          R21,",
						"          R21_Trans_Id,",
						"          R22,",
						"          R22_Trans_Id,",
						"          R23,",
						"          R23_Trans_Id,",
						"          R24,",
						"          R24_Trans_Id,",
						"          R25,",
						"          R25_Trans_Id,",
						"          Update_Date = Upload_Date,",
						"          LoadDateTime,",
						"          Project_Identifier = PROJECT_IDENTIFIER",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PLN_FIRELIFTLOBBY')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_O_PLN_FIRELIFTLOBBY_MAP_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PLN_FIRELIFTLOBBY_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          PROJECT_ID as integer,",
						"          LEVEL_ID as integer,",
						"          PROJECT_IDENTIFIER as string,",
						"          SBU_ID as integer,",
						"          TOWER as string,",
						"          ACTIVITY_ID as integer,",
						"          Level as string,",
						"          Sclicer as string,",
						"          VALUE as string,",
						"          TYPE_OF_WORK as string,",
						"          CATEGORY as string,",
						"          UPLOAD_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT \\n    P.Sort_ID as PROJECT_ID,\\n    LM.LEVEL_MAP_ID AS LEVEL_ID,\\n    P.PROJECT_IDENTIFIER ,\\n    SM.SBU_MAP_ID AS SBU_ID,\\n    F.TOWER,\\n    F.ACTIVITY_ID,\\n    F.Level,\\n    \\'Fire Lift Lobby\\' as Sclicer,\\n    CASE \\n        WHEN F.VALUE IN (\\'\\',\\'NA\\') THEN \\'0%\\'\\n        ELSE F.VALUE\\n    END AS VALUE,\\n    F.TYPE_OF_WORK,\\n    F.CATEGORY,\\n    F.UPLOAD_DATE\\n     from (\\n        SELECT CAST(FR.upload_time as DATE) AS Upload_Date,\\n        FR.project_id,\\n        FR.tower,\\n        FR.Level,\\n        Column_Name.*,\\n        FM.ACTIVITY_ID,\\n        FM.SBU_ID,\\n        FM.CATEGORY,\\n        DENSE_RANK () OVER     (PARTITION BY  project_id , FM.SBU_ID\\n                            ORDER BY  CAST(upload_time as DATE) DESC\\n                            )     DRANK\\n    FROM STG.O_PLN_FIRELIFTLOBBY_RAW_STG FR\\n    CROSS apply (\\n                        SELECT    MEP_Marking_for_Builders_Work    ,    \\'MEP Marking for Builders Work\\'\\n                        UNION ALL SELECT    Cutting_and_Chasing_of_Blockwork    ,    \\'Cutting & Chasing of Blockwork\\'\\n                        UNION ALL SELECT    MEP_Services_Installation    ,    \\'MEP Services Installation\\'\\n                        UNION ALL SELECT    Wall_MEP_Services_Packing    ,    \\'Wall MEP Services Packing\\'\\n                        UNION ALL SELECT    Plaster    ,    \\'Plaster\\'\\n                        UNION ALL SELECT    Screed    ,    \\'Screed\\'\\n                        UNION ALL SELECT    Lift_Door_Installation_and_Jamb_Installation    ,    \\'Lift Door Installation & Jamb Installation\\'\\n                        UNION ALL SELECT    Beside_Lift_Door_Blockwork    ,    \\'Beside Lift Door Blockwork\\'\\n                        UNION ALL SELECT    Beside_Lift_Door_Plaster    ,    \\'Beside Lift Door Plaster\\'\\n                        UNION ALL SELECT    MEP_High_Level_Works    ,    \\'MEP High Level Works\\'\\n                        UNION ALL SELECT    FC_Framing    ,    \\'FC Framing\\'\\n                        UNION ALL SELECT    MEP_Boarding_Clearance    ,    \\'MEP Boarding Clearance\\'\\n                        UNION ALL SELECT    FC_Boarding    ,    \\'FC Boarding\\'\\n                        UNION ALL SELECT    Joint_Taping_and_Sanding    ,    \\'Joint Taping and Sanding\\'\\n                        UNION ALL SELECT    Ceiling_Primer    ,    \\'Ceiling Primer\\'\\n                        UNION ALL SELECT    Ceiling_Stucco_1st_and_2nd_Coat    ,    \\'Ceiling Stucco 1st and 2nd Coat\\'\\n                        UNION ALL SELECT    Ceiling_First_Coat_Paint    ,    \\'Ceiling First Coat Paint\\'\\n                        UNION ALL SELECT    Wall_Primer    ,    \\'Wall Primer\\'\\n                        UNION ALL SELECT    Wall_Stucco_1st_and_2nd_Coat    ,    \\'Wall Stucco 1st and 2nd Coat\\'\\n                        UNION ALL SELECT    Wall_First_Coat_Paint    ,    \\'Wall First Coat Paint\\'\\n                        UNION ALL SELECT    Floor_Tile    ,    \\'Floor Tile\\'\\n                        UNION ALL SELECT    Door_Frame_Installation    ,    \\'Door-Frame Installation\\'\\n                        UNION ALL SELECT    Door_Architrave_Installation    ,    \\'Door-Architrave Installation\\'\\n                        UNION ALL SELECT    Door_Shutter_Installation    ,    \\'Door-Shutter Installation\\'\\n                        UNION ALL SELECT    Door_Ironmongery_Installation    ,    \\'Door-Ironmongery Installation\\'\\n                        UNION ALL SELECT    Door_Silicone    ,    \\'Door-Silicone\\'\\n                        UNION ALL SELECT    Epoxy_Grinding    ,    \\'Epoxy Grinding\\'\\n                        UNION ALL SELECT    Epoxy_Bug_Fill    ,    \\'Epoxy Bug Fill\\'\\n                        UNION ALL SELECT    Epoxy_Primer    ,    \\'Epoxy Primer\\'\\n                        UNION ALL SELECT    Epoxy_First_Coat    ,    \\'Epoxy First Coat\\'\\n                        UNION ALL SELECT    Epoxy_Final_Coat    ,    \\'Epoxy Final Coat\\'\\n                        UNION ALL SELECT    Skirting    ,    \\'Skirting\\'\\n                        UNION ALL SELECT    Grout    ,    \\'Grout\\'\\n                        UNION ALL SELECT    Silicone    ,    \\'Silicone\\'\\n                        UNION ALL SELECT    Signage    ,    \\'Signage\\'\\n                        UNION ALL SELECT    MEP_Final_Fixtures    ,    \\'MEP Final Fixtures\\'\\n                        UNION ALL SELECT    Final_Coat    ,    \\'Final Coat\\'\\n                        )as Column_Name(value,Type_of_work)\\n    INNER JOIN STG.O_PLN_FIRELIFTLOBBY_MAP_STG FM\\n    ON Column_Name.Type_of_work = FM.ACTIVITY_SEQUENCE\\n    WHERE VALUE IS NOT NULL\\n       ) F\\nLEFT JOIN [DWH].[PLN_LEVEL_MAP_ALL_DIM] AS LM\\n     ON          F.[LEVEL] = LM.[LEVEL]\\nLEFT JOIN [DWH].[PROJECTS_NEW_DIM] P\\n      ON          F.PROJECT_ID=P.PROJECT_IDENTIFIER \\nLEFT JOIN [DWH].[PLN_SBU_MAPPING_DIM] SM\\n     ON          F.SBU_ID=SM.SBU_IDENTIFIER\\nWHERE          F.DRANK = 1',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_Id as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(Id = SurrogateKey_Id+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          Project_Id as integer,",
						"          Project_Identifier as string,",
						"          SBU_ID as integer,",
						"          Level_Id as integer,",
						"          Tower as string,",
						"          Level as string,",
						"          Sclicer as string,",
						"          Activity_ID as integer,",
						"          Value as string,",
						"          Type_of_work as string,",
						"          Category as string,",
						"          Upload_Date as date,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['Truncate Table [DWH].[PLN_FIRELIFTLOBBY_FACT]'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Id,",
						"          Project_Id = PROJECT_ID,",
						"          Project_Identifier = PROJECT_IDENTIFIER,",
						"          SBU_ID,",
						"          Level_Id = LEVEL_ID,",
						"          Tower = TOWER,",
						"          Level,",
						"          Sclicer,",
						"          Activity_ID = ACTIVITY_ID,",
						"          Value = VALUE,",
						"          Type_of_work = TYPE_OF_WORK,",
						"          Category = CATEGORY,",
						"          Upload_Date = UPLOAD_DATE,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PLN_FLATFINISHES')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_PLN_FLATFINISHES_TRG",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PLN_FLATFINISHES_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          Update_Date as date,",
						"          Project_ID as integer,",
						"          Project_Identifier as string,",
						"          Level_ID as integer,",
						"          Sbu_Id as integer,",
						"          Tower as string,",
						"          Sclicer as string,",
						"          Flat as integer,",
						"          Level as string,",
						"          value as decimal(24,6),",
						"          Type_of_work as string,",
						"          Activity_ID as integer,",
						"          Category as string,",
						"          Category_Sort as integer,",
						"          Sort_Type_Of_Work as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: ' SELECT  \\n A.Update_Date,\\nP.Sort_ID as Project_ID,\\nP.Project_Identifier,\\nOLMA.Level_MAP_ID AS Level_ID,\\nA.Sbu_Id,\\n A.Tower,\\n A.Sclicer,\\n A.Flat,\\n A.Level,\\n TRY_CAST(REPLACE(A.value,\\'%\\',\\'\\') AS DECIMAL)/100 AS value,\\n A.Type_of_work,\\n A.Activity_ID,\\n A.Category,\\n               CASE \\n WHEN TRIM(Category) = (\\'MEP\\') THEN 1\\n WHEN TRIM(Category) = (\\'Blockwork\\') THEN 2\\n WHEN TRIM(Category) = (\\'Plaster\\') THEN 3\\n WHEN TRIM(Category) = (\\'Builders Work\\') THEN 4\\n WHEN TRIM(Category) = (\\'Facade\\') THEN 5\\n WHEN TRIM(Category) = (\\'Tile\\') THEN 6\\n WHEN TRIM(Category) = (\\'Screed\\') THEN 7\\n WHEN TRIM(Category) = (\\'Paint\\') THEN 8\\n WHEN TRIM(Category) = (\\'Gypsum\\') THEN 9\\n WHEN TRIM(Category) = (\\'Marble\\') THEN 10\\n WHEN TRIM(Category) = (\\'Silicone\\') THEN 11\\n WHEN TRIM(Category) = (\\'Joinery\\') THEN 12\\n WHEN TRIM(Category) = (\\'SBU1\\') THEN 13\\n WHEN TRIM(Category) = (\\'Waterproofing\\') THEN 14\\n WHEN TRIM(Category) = (\\'Fa�ade\\') THEN 15\\n WHEN TRIM(Category) = (\\'EIFS\\') THEN 16\\n WHEN TRIM(Category) = (\\'SFD\\') THEN 17\\n WHEN TRIM(Category) = (\\'Water Proofing\\') THEN 18\\n WHEN TRIM(Category) = (\\'Appliances\\') THEN 19\\n       END AS Category_Sort ,\\n       CONCAT(A.ACTIVITY_ID,\\' \\', A.Type_of_work) AS Sort_Type_Of_Work \\n \\nfrom(          \\n          SELECT * FROM [DWH].[PLN_DRYAREA_FACT]\\n UNION ALL\\n SELECT * FROM [DWH].[PLN_WETAREA_FACT]\\n UNION ALL\\n SELECT * FROM [DWH].[PLN_BALCONYAREA_FACT]\\n UNION ALL\\n SELECT  * FROM [DWH].[PLN_KITCHENAREA_FACT]\\n          ) A\\nLEFT JOIN   [DWH].[PLN_LEVEL_MAP_ALL_DIM] OLMA\\n               ON A.Level_ID = OLMA.[Level_Map_ID]\\n     LEFT JOIN [DWH].[PROJECTS_NEW_DIM] P\\n  ON  A.PROJECT_ID=P.Sort_ID\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_Id as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(Id = SurrogateKey_Id+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          Upload_Date as date,",
						"          project_id as integer,",
						"          Project_Identifier as string,",
						"          Level_Id as integer,",
						"          SBU_ID as integer,",
						"          Tower as string,",
						"          Level as string,",
						"          Flat as integer,",
						"          Sclicer as string,",
						"          ACTIVITY_ID as integer,",
						"          value as decimal(14,4),",
						"          Type_of_work as string,",
						"          Category as string,",
						"          sort_type_of_work as string,",
						"          Category_Sort as integer,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['Truncate table [DWH].[PLN_FLATFINISHES_FACT]'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Id,",
						"          Upload_Date = Update_Date,",
						"          project_id = Project_ID,",
						"          Project_Identifier,",
						"          Level_Id = Level_ID,",
						"          SBU_ID = Sbu_Id,",
						"          Tower,",
						"          Level,",
						"          Flat,",
						"          Sclicer,",
						"          ACTIVITY_ID = Activity_ID,",
						"          value,",
						"          Type_of_work,",
						"          Category,",
						"          sort_type_of_work = Sort_Type_Of_Work,",
						"          Category_Sort,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PLN_GARBAGEROOM')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_O_PLN_GARBAGEROOM_RAW_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "Import data from DS_O_PLN_GARBAGEROOM_RAW_STG_TRG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PLN_GARBAGEROOM_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to DS_PLN_GARBAGEROOM_TRG"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          PROJECT_ID as integer,",
						"          LEVEL_ID as integer,",
						"          SBU_ID as integer,",
						"          TOWER as string,",
						"          PROJECT_IDENTIFIER as string,",
						"          LEVEL as string,",
						"          Sclicer as string,",
						"          ACTIVITY_ID as integer,",
						"          VALUE as string,",
						"          TYPE_OF_WORK as string,",
						"          CATEGORY as string,",
						"          UPLOAD_DATE as date",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT \\n     P.Sort_ID as PROJECT_ID,\\n    LM.LEVEL_MAP_ID AS LEVEL_ID,\\n    SM.SBU_MAP_ID AS SBU_ID,\\n    GAR.TOWER    ,\\n    P.PROJECT_IDENTIFIER ,\\n    GAR.[LEVEL]    ,\\n    \\'Garbage Room\\' as Sclicer,\\n      GAR.ACTIVITY_ID    ,\\n    CASE \\n        WHEN GAR.VALUE IN (\\'\\',\\'NA\\') THEN \\'0%\\'\\n        ELSE GAR.VALUE\\n    END AS VALUE,\\n    GAR.TYPE_OF_WORK    ,\\n    GAR.CATEGORY   ,\\n     GAR.UPLOAD_DATE  \\n   \\nFROM \\n\\n(\\n        SELECT CAST(GR.UPLOAD_TIME AS DATE) AS UPLOAD_DATE,\\n        GR.PROJECT_ID,\\n        GR.TOWER,\\n        GR.LEVEL,\\n        COLUMN_NAME.*,\\n        GM.ACTIVITY_ID,\\n        GM.SBU_ID,\\n        GM.CATEGORY,\\n        DENSE_RANK () OVER     (PARTITION BY  PROJECT_ID ,GM.SBU_ID\\n                            ORDER BY  CAST(UPLOAD_TIME AS DATE) DESC\\n                            )     DRANK\\n    FROM STG.O_PLN_GARBAGEROOM_RAW_STG  GR\\n    CROSS APPLY  (\\n         SELECT    [OUTER_WALL_BLOCKWORK]     ,  \\'OUTER WALL BLOCKWORK\\'\\nUNION ALL SELECT   [GARBAGE_CHUTE_WORKS]     ,  \\'GARBAGE CHUTE WORKS\\'\\nUNION ALL SELECT   [MEP_PIPING_WORKS]     ,  \\'MEP PIPING WORKS\\'\\nUNION ALL SELECT   [MEP_PRESSURE_TEST_AND_CLEARANCE]     ,  \\'MEP PRESSURE TEST & CLEARANCE\\'\\nUNION ALL SELECT   [INNER_WALL_BLOCKWORK]     ,  \\'INNER WALL BLOCKWORK\\'\\nUNION ALL SELECT   [MEP_MARKING_FOR_BUILDERS_WORK]     ,  \\'MEP MARKING FOR BUILDERS WORK\\'\\nUNION ALL SELECT   [CUTTING_AND_CHASING_OF_BLOCKWORK]     ,  \\'CUTTING & CHASING OF BLOCKWORK\\'\\nUNION ALL SELECT   [MEP_SERVICES_INSTALLATION]     ,  \\'MEP SERVICES INSTALLATION\\'\\nUNION ALL SELECT   [WALL_MEP_SERVICES_PACKING]     ,  \\'WALL MEP SERVICES PACKING\\'\\nUNION ALL SELECT   [PLASTER]     ,  \\'PLASTER\\'\\nUNION ALL SELECT   [CORE_CUTTING_AND_CHIPPING]     ,  \\'CORE CUTTING & CHIPPING\\'\\nUNION ALL SELECT   [MEP_SLEEVE_INSTALLATION]     ,  \\'MEP SLEEVE INSTALLATION\\'\\nUNION ALL SELECT   [BORE_PACKING]     ,  \\'BORE PACKING\\'\\nUNION ALL SELECT   [UNDER_SCREED_WATER_PROOFING]     ,  \\'UNDER SCREED WATER PROOFING\\'\\nUNION ALL SELECT   [SCREED]     ,  \\'SCREED\\'\\nUNION ALL SELECT   [WALL_TILE]     ,  \\'WALL TILE\\'\\nUNION ALL SELECT   [MEP_FRAMING_CLEARANCE]     ,  \\'MEP FRAMING CLEARANCE\\'\\nUNION ALL SELECT   [FALSE_CEILING_FRAMING]     ,  \\'FALSE CEILING FRAMING\\'\\nUNION ALL SELECT   [MEP_BOARDING_CLEARANCE]     ,  \\'MEP BOARDING CLEARANCE\\'\\nUNION ALL SELECT   [FALSE_CEILING_BOARDING]     ,  \\'FALSE CEILING BOARDING\\'\\nUNION ALL SELECT   [CEILING_PRIMER]     ,  \\'CEILING PRIMER\\'\\nUNION ALL SELECT   [CEILING_STUCCO_1ST_AND_2ND_COAT]     ,  \\'CEILING STUCCO (1ST AND 2ND COAT)\\'\\nUNION ALL SELECT   [CEILING_FIRST_COAT_PAINT]     ,  \\'CEILING FIRST COAT PAINT\\'\\nUNION ALL SELECT   [UNDER_TILE_WATER_PROOFING]     ,  \\'UNDER TILE WATER PROOFING\\'\\nUNION ALL SELECT   [THRESHOLD]     ,  \\'THRESHOLD\\'\\nUNION ALL SELECT   [FLOOR_TILE]     ,  \\'FLOOR TILE\\'\\nUNION ALL SELECT   [SKIRTING]     ,  \\'SKIRTING\\'\\nUNION ALL SELECT   [GROUTING]     ,  \\'GROUTING\\'\\nUNION ALL SELECT   [SILICONE]     ,  \\'SILICONE\\'\\nUNION ALL SELECT   [HOPPER_DOOR]     ,  \\'HOPPER DOOR\\'\\nUNION ALL SELECT   [DOOR_FRAME_INSTALLATION]     ,  \\'DOOR-FRAME INSTALLATION\\'\\nUNION ALL SELECT   [DOOR_ARCHITRAVE_INSTALLATION]     ,  \\'DOOR-ARCHITRAVE INSTALLATION\\'\\nUNION ALL SELECT   [DOOR_SHUTTER_INSTALLATION]     ,  \\'DOOR-SHUTTER INSTALLATION\\'\\nUNION ALL SELECT   [DOOR_IRONMONGERY_INSTALLATION]     ,  \\'DOOR-IRONMONGERY INSTALLATION\\'\\nUNION ALL SELECT   [DOOR_SILICONE]     ,  \\'DOOR-SILICONE\\'\\nUNION ALL SELECT   [SIGNAGE]     ,  \\'SIGNAGE\\'\\nUNION ALL SELECT   [MEP_FINAL_FIXTURES]     ,  \\'MEP FINAL FIXTURES\\'\\nUNION ALL SELECT   [FINAL_COAT_PAINT]     ,  \\'FINAL COAT PAINT\\'\\n\\n                        )AS COLUMN_NAME(VALUE,TYPE_OF_WORK)\\n    INNER JOIN STG.O_PLN_GARBAGEROOM_MAP_STG  GM\\n    ON COLUMN_NAME.TYPE_OF_WORK = GM.ACTIVITY_SEQUENCE\\n    WHERE VALUE IS NOT NULL\\n     ) GAR\\nINNER JOIN [DWH].[PLN_LEVEL_MAP_ALL_DIM] AS LM\\n     ON          GAR.[LEVEL] = LM.[LEVEL]\\nLEFT JOIN [DWH].[PROJECTS_NEW_DIM] P\\n      ON          GAR.PROJECT_ID=P.PROJECT_IDENTIFIER\\nLEFT JOIN [DWH].[PLN_SBU_MAPPING_DIM] SM\\n     ON          GAR.SBU_ID=SM.SBU_IDENTIFIER\\nWHERE          GAR.DRANK = 1',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Project_ID as integer,",
						"          Project_Identifier as string,",
						"          SBU_ID as integer,",
						"          Level_ID as integer,",
						"          Tower as string,",
						"          Level as string,",
						"          Sclicer as string,",
						"          Activity_ID as integer,",
						"          Value as string,",
						"          Type_of_work as string,",
						"          Category as string,",
						"          Update_Date as date,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE [DWH].[PLN_GARBAGEROOM_FACT];'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Project_ID = PROJECT_ID,",
						"          Project_Identifier = PROJECT_IDENTIFIER,",
						"          SBU_ID,",
						"          Level_ID = LEVEL_ID,",
						"          Tower = TOWER,",
						"          Level = LEVEL,",
						"          Sclicer,",
						"          Activity_ID = ACTIVITY_ID,",
						"          Value = VALUE,",
						"          Type_of_work = TYPE_OF_WORK,",
						"          Category = CATEGORY,",
						"          Update_Date = UPLOAD_DATE,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PLN_KEEPOUT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_O_PLN_KEEPOUT_RAW_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PLN_KEEPOUT_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          Upload_Date as date,",
						"          Project_ID as integer,",
						"          Sbu_ID as integer,",
						"          Level_ID as integer,",
						"          Tower as string,",
						"          PROJECT_IDENTIFIER as string,",
						"          Flat as string,",
						"          Level as string,",
						"          Type_of_work as string,",
						"          Category as string,",
						"          Activity_ID as integer,",
						"          Real_Value as string,",
						"          value as integer,",
						"          Category_Sort as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select\\n        Upload_Date,\\n        P.Sort_ID AS Project_ID,\\n        SM.SBU_Map_ID AS Sbu_ID,\\n        LM.LEVEL_MAP_ID AS Level_ID,\\n        KO.Tower,\\n        P.PROJECT_IDENTIFIER ,\\n        KO.Flat,\\n        KO.Level,\\n        KO.Type_of_work,\\n        KO.Category,\\n        KO.Activity_ID,\\n       Format(cast(NULLIF(KO.Value,\\'\\') AS DATE ),\\'dd-MM-yyy\\')AS Real_Value,\\n        CASE\\n            WHEN TRIM(KO.value) IN (\\'\\',\\'-\\',\\'0%\\',\\'00%\\') THEN 0\\n            WHEN KO.value IS NOT NULL AND TRIM(KO.value) NOT IN (\\'\\',\\'-\\',\\'0%\\',\\'00%\\') THEN 1\\n            ELSE 0\\n        END AS value,\\n        \\n        CASE \\n            WHEN TRIM(KO.Category) IN(\\'Paint\\') THEN  1\\n            WHEN TRIM(KO.Category) IN(\\'Facade\\') THEN  2\\n            WHEN TRIM(KO.Category) IN(\\'MEP\\') THEN  3\\n            WHEN TRIM(KO.Category) IN(\\'PMT\\') THEN  4\\n            WHEN TRIM(KO.Category) IN(\\'Consultant\\') THEN  5\\n            WHEN TRIM(KO.Category) IN(\\'Client\\') THEN  6\\n            ELSE 20\\n        END AS Category_Sort\\n    FROM (\\n    SELECT\\n        cast(OPKOR.upload_time AS DATE) AS Upload_Date,\\n        OPKOR.project_id,\\n        OPKOR.tower,\\n        OPKOR.sbu_id ,\\n        OPKOR.Level,\\n        OPKOR.Flat,\\n        Column_Name.*,\\n        OPKOM.ACTIVITY_ID,\\n        OPKOM.SBU_ID AS SBU_Filter,\\n        OPKOM.Category,\\n        DENSE_RANK() OVER(PARTITION BY OPKOR.project_id ORDER BY CAST(OPKOR.upload_time AS DATE) DESC) AS DRanker\\n    FROM STG.O_PLN_KEEPOUT_RAW_STG OPKOR\\n    CROSS Apply (\\n                        SELECT Final_Coat_Paint_Dry_Area , \\'Final Coat Paint - Dry Area\\'\\n                    UNION ALL SELECT Final_Coat_Paint_Wet_Area , \\'Final Coat Paint - Wet Area\\'\\n                    UNION ALL SELECT Facade_Stamp , \\'Facade Stamp\\'\\n                    UNION ALL SELECT Bathroom_Stamp_MEP_L8 , \\'Bathroom Stamp - MEP (L8)\\'\\n                    UNION ALL SELECT Bathroom_Stamp_Civil_L9 , \\'Bathroom Stamp - Civil (L9)\\'\\n                    UNION ALL SELECT Kitchen_Stamp_MEP_I8 , \\'Kitchen Stamp - MEP (I8)\\'\\n                    UNION ALL SELECT Kitchen_Stamp_Civil_I9 , \\'Kitchen Stamp - Civil (I9)\\'\\n                    UNION ALL SELECT Dry_Area_Stamp_Civil_F7 , \\'Dry Area Stamp - Civil (F7)\\'\\n                    UNION ALL SELECT Dry_Area_Stamp_MEP_F8 , \\'Dry Area Stamp - MEP (F8)\\'\\n                    UNION ALL SELECT MEP_NOC , \\'MEP NOC\\'\\n                    UNION ALL SELECT Civil_NOC , \\'Civil NOC\\'\\n                    UNION ALL SELECT MEP_Field_Report_1ST_Insp , \\'MEP Field Report 1ST Insp\\'\\n                    UNION ALL SELECT MEP_Field_Report_2nd_Insp , \\'MEP Field Report 2nd Insp\\'\\n                    UNION ALL SELECT Facade_Field_Report_1st_Insp , \\'Facade Field Report 1st Insp\\'\\n                    UNION ALL SELECT Facade_Field_Report_2nd_Insp , \\'Facade Field Report 2nd Insp\\'\\n                    UNION ALL SELECT Civil_Field_Report_1st_Insp , \\'Civil Field Report 1st Insp\\'\\n                    UNION ALL SELECT Civil_Field_Report_2nd_Insp , \\'Civil Field Report 2nd Insp\\'\\n                    UNION ALL SELECT SCL_Signoff , \\'SCL Signoff\\'\\n                    UNION ALL SELECT PNCA_Signoff , \\'PNCA Signoff\\'\\n                    UNION ALL SELECT Keep_Out_QT , \\'Keep Out (QT)\\'\\n                        ) AS Column_Name(value,Type_of_work)\\n    JOIN STG.O_PLN_KEEPOUT_MAP_STG OPKOM\\n    ON Column_Name.Type_of_work = OPKOM.ACTIVITY_SEQUENCE\\n        WHERE value IS NOT NULL) KO   \\nINNER JOIN    DWH.PLN_LEVEL_MAP_ALL_DIM LM \\n    ON        KO.LEVEL = LM.LEVEL \\nLEFT JOIN    [DWH].[PROJECTS_NEW_DIM] P\\n    ON        KO.PROJECT_ID=P.PROJECT_IDENTIFIER \\nLEFT JOIN    [DWH].[PLN_SBU_MAPPING_DIM] SM\\n    ON      KO.SBU_ID=SM.SBU_IDENTIFIER\\n     WHERE       KO.DRANKER = 1\\n   \\n\\n  ',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Upload_Date as date,",
						"          Project_ID as integer,",
						"          Project_Identifier as string,",
						"          Sbu_ID as integer,",
						"          Level_Id as integer,",
						"          Tower as string,",
						"          Flat as string,",
						"          Level as string,",
						"          Category as string,",
						"          Type_of_work as string,",
						"          Activity_ID as integer,",
						"          Real_Value as date,",
						"          Value as decimal(14,4),",
						"          CATEGORY_SORT as integer,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['Truncate table [DWH].[PLN_KEEPOUT_FACT]'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Upload_Date,",
						"          Project_ID,",
						"          Project_Identifier = PROJECT_IDENTIFIER,",
						"          Sbu_ID,",
						"          Level_Id = Level_ID,",
						"          Tower,",
						"          Flat,",
						"          Level,",
						"          Category,",
						"          Type_of_work,",
						"          Activity_ID,",
						"          Real_Value,",
						"          Value = value,",
						"          CATEGORY_SORT = Category_Sort,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PLN_KEEPOUT2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_O_PLN_KEEPOUT_DETAILED_RAW_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "Import data from DS_O_PLN_DOOR_DELIVERY_RAW_STG_TRG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PLN_KEEPOUT2_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to DS_DOOR_DELIVERY_M_TRG"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          Date as date,",
						"          project_id as integer,",
						"          PROJECT_IDENTIFIER as string,",
						"          Tower as string,",
						"          Level as string,",
						"          Flat_No as string,",
						"          SBU_ID as integer,",
						"          Apartment_Type as string,",
						"          ACTIVITY_ID as integer,",
						"          Engineer_Responsible as string,",
						"          Activity as string,",
						"          delay_pln as date,",
						"          Plan as date,",
						"          Count_Pln as integer,",
						"          Predecessor_Plan as date,",
						"          Predecessor_Plan_Work_Front as date,",
						"          Predecessor as string,",
						"          delay_act as date,",
						"          Actual as date,",
						"          Count_act as integer,",
						"          Predecessor_Actual as date,",
						"          Predecessor_Actual_Work_Front as date,",
						"          SLA_Planned as integer,",
						"          SLA_Actual as integer,",
						"          SLA as string,",
						"          Actual_SLA_Title as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT \\n    Upload_Date AS Date,\\n    P.Sort_ID as project_id,\\n    P.PROJECT_IDENTIFIER ,\\n    tower AS Tower,\\n    Level,\\n    Flat_No,\\n    SM.[SBU_Map_ID] as SBU_ID,\\n    Apartment_Type,\\n    ACTIVITY_ID,\\n    ENGINEER_RESPONSIBLE AS Engineer_Responsible,\\n    Types_of_Activities AS Activity,\\n    delay_pln\\n       ,value_plan AS [Plan]\\n       ,Count_Pln,\\n    Predes_value_plan AS Predecessor_Plan,\\n    CASE \\n        WHEN TRIM(Predecessor_Activities) IN (\\'FROM CTE 1\\',\\'FROM CTE 2\\') AND Count_Pln = 1 THEN value_plan \\n        WHEN TRIM(Predecessor_Activities) IN (\\'FROM CTE 1\\',\\'FROM CTE 2\\') AND Count_Pln != 1 THEN NULL\\n        ELSE Predes_value_plan\\n    END AS Predecessor_Plan_Work_Front,\\n    Predecessor_Activities AS Predecessor,\\n    delay_act,\\n    value_act AS Actual,\\n    Count_act,\\n    Predes_value_act AS [Predecessor_Actual],\\n    CASE\\n        WHEN TRIM(Predecessor_Activities) IN (\\'FROM CTE 1\\',\\'FROM CTE 2\\') AND Count_Act = 1 THEN value_act\\n        WHEN TRIM(Predecessor_Activities) IN (\\'FROM CTE 1\\',\\'FROM CTE 2\\') AND Count_Act != 1 THEN NULL\\n        ELSE Predes_value_act\\n    END AS [Predecessor_Actual_Work_Front],\\n    CASE WHEN Planned_SLA <= 0 THEN 0 ELSE Planned_SLA END AS SLA_Planned,\\n    CASE WHEN Actual_SLA <= 0 THEN 0 ELSE Actual_SLA END AS SLA_Actual,\\n    Given_SLA AS SLA,\\n     CASE \\n            WHEN Actual_SLA <= 0 THEN     \\'<= 0\\'\\n            WHEN Actual_SLA = 1 THEN     \\'= 1\\'\\n            WHEN Actual_SLA = 2 THEN     \\'= 2\\'\\n            WHEN Actual_SLA = 3 THEN     \\'= 3\\'\\n            WHEN Actual_SLA = 4 THEN     \\'= 4\\'\\n            WHEN Actual_SLA = 5 THEN     \\'= 5\\'\\n            WHEN Actual_SLA = 6 THEN     \\'= 6\\'\\n            WHEN Actual_SLA = 7 THEN     \\'= 7\\'\\n            WHEN Actual_SLA > 7 THEN     \\'> 7\\'\\n            ELSE NULL\\n        END AS Actual_SLA_Title\\nFROM [DWH].[PLN_VALIDATION_DATA_OUTPUT_FINAL_B_VIEW] PP\\nLEFT JOIN [DWH].[PROJECTS_NEW_DIM] P\\n      ON          PP.Project_id=P.PROJECT_IDENTIFIER \\n     LEFT JOIN [DWH].[PLN_SBU_MAPPING_DIM] SM\\n     ON          PP.SBU_ID=SM.SBU_IDENTIFIER\\n\\n',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          Date as date,",
						"          project_id as integer,",
						"          Project_Identifier as string,",
						"          Tower as string,",
						"          Level as string,",
						"          Flat_No as string,",
						"          SBU_ID as integer,",
						"          Apartment_Type as string,",
						"          ACTIVITY_ID as integer,",
						"          Engineer_Responsible as string,",
						"          Activity as string,",
						"          delay_pln as date,",
						"          Plan as date,",
						"          Count_Pln as integer,",
						"          Predecessor_Plan as date,",
						"          Predecessor_Plan_Work_Front as date,",
						"          Predecessor as string,",
						"          delay_act as date,",
						"          Actual as date,",
						"          Count_Act as integer,",
						"          Predecessor_Actual as date,",
						"          Predecessor_Actual_Work_Front as date,",
						"          SLA_Planned as integer,",
						"          SLA_Actual as integer,",
						"          SLA as string,",
						"          Actual_SLA_Title as string,",
						"          LoadDateTime as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE  DWH.PLN_KEEPOUT_2_FACT '],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Id = ID,",
						"          Date,",
						"          project_id,",
						"          Project_Identifier = PROJECT_IDENTIFIER,",
						"          Tower,",
						"          Level,",
						"          Flat_No,",
						"          SBU_ID,",
						"          Apartment_Type,",
						"          ACTIVITY_ID,",
						"          Engineer_Responsible,",
						"          Activity,",
						"          delay_pln,",
						"          Plan,",
						"          Count_Pln,",
						"          Predecessor_Plan,",
						"          Predecessor_Plan_Work_Front,",
						"          Predecessor,",
						"          delay_act,",
						"          Actual,",
						"          Count_Act = Count_act,",
						"          Predecessor_Actual,",
						"          Predecessor_Actual_Work_Front,",
						"          SLA_Planned,",
						"          SLA_Actual,",
						"          SLA,",
						"          Actual_SLA_Title,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PLN_KITCHENAREA')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_O_PLN_KITCHENAREA_RAW_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PLN_KITCHENAREA_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          PROJECT_ID as integer,",
						"          LEVEL_ID as integer,",
						"          SBU_ID as integer,",
						"          TOWER as string,",
						"          PROJECT_IDENTIFIER as string,",
						"          Sclicer as string,",
						"          FLAT as string,",
						"          LEVEL as string,",
						"          ACTIVITY_ID as integer,",
						"          VALUE as string,",
						"          TYPE_OF_WORK as string,",
						"          CATEGORY as string,",
						"          UPLOAD_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT \\n    P.Sort_ID as PROJECT_ID,\\n    LM.LEVEL_MAP_ID AS LEVEL_ID,\\n     SM.SBU_MAP_ID AS SBU_ID,\\n    KA.TOWER,\\n    P.PROJECT_IDENTIFIER ,\\n    \\'Kitchen Area\\' as Sclicer,\\n    KA.FLAT,\\n    KA.[LEVEL],\\n     KA.ACTIVITY_ID,\\n    CASE \\n        WHEN KA.VALUE IN (\\'\\',\\'NA\\') THEN \\'0%\\'\\n        ELSE KA.VALUE\\n    END AS VALUE,\\n    KA.TYPE_OF_WORK,\\n    KA.CATEGORY,\\n     KA.UPLOAD_DATE\\nFROM (\\n          SELECT \\n               KR.UPLOAD_TIME AS UPLOAD_DATE,\\n               KR.PROJECT_ID,\\n               KR.TOWER,\\n               KR.[LEVEL],\\n               KR.FLAT,\\n               COLUMN_NAME.*,\\n               KM.ACTIVITY_ID,\\n               KM.SBU_ID,\\n               KM.CATEGORY,\\n               DENSE_RANK () OVER (PARTITION BY  PROJECT_ID,KM.SBU_ID ORDER BY   Convert(Date,UPLOAD_TIME) DESC ) DRANK\\n           FROM [STG].[O_PLN_KITCHENAREA_RAW_STG] KR\\n           CROSS APPLY (\\n                          SELECT [KITCHEN_AREA_PLASTER] , \\'KITCHEN AREA PLASTER\\'\\n                              UNION ALL SELECT [KITCHEN_UTILITY_FRAMING_CLEARANCE],\\'KITCHEN / UTILITY FRAMING CLEARANCE\\'\\n                              UNION ALL SELECT [KITCHEN_UTILITY_FRAMING] , \\'KITCHEN / UTILITY FRAMING\\'\\n                              UNION ALL SELECT [KITCHEN_UTILITY_BOARDING_CLEARANCE],\\'KITCHEN / UTILITY BOARDING CLEARANCE\\'\\n                              UNION ALL SELECT [KITCHEN_UTILITY_BOARDING] , \\'KITCHEN / UTILITY BOARDING\\'\\n                              UNION ALL SELECT [KITCHEN_WALL_TILE] , \\'KITCHEN WALL TILE\\'\\n                              UNION ALL SELECT [MEP_BOX_FIXING] , \\'MEP BOX FIXING\\'\\n                              UNION ALL SELECT [KITCHEN_CABINET] , \\'KITCHEN CABINET\\'\\n                              UNION ALL SELECT [KITCHEN_COUNTER_PLYWOOD] , \\'KITCHEN COUNTER PLYWOOD\\'\\n                              UNION ALL SELECT [KITCHEN_COUNTER_TOP] , \\'KITCHEN COUNTER TOP\\'\\n                              UNION ALL SELECT [KITCHEN_COUNTER_TOP_SKIRTING] , \\'KITCHEN COUNTER TOP SKIRTING\\'\\n                              UNION ALL SELECT [KITCHEN_CABINET_GROUTING] , \\'KITCHEN CABINET GROUTING\\'\\n                              UNION ALL SELECT [KITCHEN_CABINET_SILICONE] , \\'KITCHEN CABINET SILICONE\\'\\n                              UNION ALL SELECT [MEP_FIXTURES_FOR_KITCHEN_CABINET] , \\'MEP FIXTURES FOR KITCHEN CABINET\\'\\n                              UNION ALL SELECT [KITCHEN_APPLIANCES] , \\'KITCHEN APPLIANCES\\'\\n                         ) AS COLUMN_NAME(VALUE,TYPE_OF_WORK)\\n               INNER JOIN  [STG].[O_PLN_KITCHENAREA_MAP_STG] KM\\n                    ON          COLUMN_NAME.TYPE_OF_WORK = KM.ACTIVITY_SEQUENCE\\n               WHERE          VALUE IS NOT NULL\\n     ) KA\\nINNER JOIN [DWH].[PLN_LEVEL_MAP_ALL_DIM] AS LM\\n     ON          KA.[LEVEL] = LM.[LEVEL]\\nLEFT JOIN [DWH].[PROJECTS_NEW_DIM] P\\n      ON          KA.PROJECT_ID=P.PROJECT_IDENTIFIER \\nLEFT JOIN [DWH].[PLN_SBU_MAPPING_DIM] SM\\n     ON          KA.SBU_ID=SM.SBU_IDENTIFIER\\nWHERE          KA.DRANK = 1',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Project_ID as integer,",
						"          Project_Identifier as string,",
						"          SBU_ID as integer,",
						"          Level_ID as integer,",
						"          Tower as string,",
						"          Level as string,",
						"          Flat as integer,",
						"          Sclicer as string,",
						"          Activity_ID as integer,",
						"          Value as string,",
						"          Type_of_work as string,",
						"          Category as string,",
						"          Update_Date as date,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE [DWH].[PLN_KITCHENAREA_FACT];'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Project_ID = PROJECT_ID,",
						"          Project_Identifier = PROJECT_IDENTIFIER,",
						"          SBU_ID,",
						"          Level_ID = LEVEL_ID,",
						"          Tower = TOWER,",
						"          Level = LEVEL,",
						"          Flat = FLAT,",
						"          Sclicer,",
						"          Activity_ID = ACTIVITY_ID,",
						"          Value = VALUE,",
						"          Type_of_work = TYPE_OF_WORK,",
						"          Category = CATEGORY,",
						"          Update_Date = UPLOAD_DATE,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PLN_LEVEL_MAP_ALL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Dimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_O_LEVEL_MAP_ALL_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PLN_LEVEL_MAP_ALL_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          LEVEL_MAP_ID as integer,",
						"          LEVEL as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Level_Map_ID as integer,",
						"          Level as string,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE [DWH].[PLN_LEVEL_MAP_ALL_DIM];'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Level_Map_ID = LEVEL_MAP_ID,",
						"          Level = LEVEL,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PLN_MILESTONE_ACTUALS_TEMP')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_O_PLN_MILESTONE_ACTUALS_TEMP_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "Import data from DS_O_PLN_MILESTONE_ACTUALS_TEMP_STG_TRG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PLN_MILESTONE_ACTUALS_TEMP_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to DS_PLN_MILESTONE_ACTUALS_TEMP_TRG"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          Project_ID as integer,",
						"          SBU_Map_ID as integer,",
						"          Milestone_Actuals_Temp_Id as integer,",
						"          Upload_time as timestamp,",
						"          Tower as string,",
						"          Group as string,",
						"          Activity as string,",
						"          Actual_Percentage as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select \\n     \\n     p. Sort_ID as [Project_ID] ,\\n     sm.[SBU_Map_ID] ,\\n     [Milestone_Actuals_Temp_Id] ,\\n     [Upload_time] ,\\n     --[Project_ID] [nvarchar](1000)  NULL,\\n     [Tower] ,\\n     --[Sbu_ID] [nvarchar](1000)  NULL,\\n     [Group] ,\\n     [Activity] ,\\n     [Actual_Percentage] \\n\\nFROM [STG].[O_PLN_MILESTONE_ACTUALS_TEMP_STG] PP\\nLEFT JOIN [DWH].[PROJECTS_NEW_DIM] P\\n      ON          PP.[Project_ID]=P.PROJECT_IDENTIFIER \\n     LEFT JOIN [DWH].[PLN_SBU_MAPPING_DIM] SM\\n     ON          PP.SBU_id=SM.SBU_IDENTIFIER\\n\\n\\n',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Project_ID as integer,",
						"          SBU_ID as integer,",
						"          Milestone_Actuals_Temp_Id as integer,",
						"          Upload_time as timestamp,",
						"          Tower as string,",
						"          Group as string,",
						"          Activity as string,",
						"          Actual_Percentage as string,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE [DWH].[PLN_MILESTONE_ACTUALS_TEMP_FACT];'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Project_ID,",
						"          SBU_ID = SBU_Map_ID,",
						"          Milestone_Actuals_Temp_Id,",
						"          Upload_time,",
						"          Tower,",
						"          Group,",
						"          Activity,",
						"          Actual_Percentage,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PLN_PROCUREMENT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_PLN_PROCUREMENT_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PLN_PROCUREMENT_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAXID as integer (0)",
						"}",
						"source(output(",
						"          UPLOAD_DATE as date,",
						"          PROJECT_ID as integer,",
						"          PROJECT_IDENTIFIER as string,",
						"          TOWER as string,",
						"          SBU_ID as integer,",
						"          SBU as string,",
						"          CLASSIFICATION as string,",
						"          DESCRIPTION as string,",
						"          CATEGORY as string,",
						"          ISSUANCE_OF_DRAWINGS_PLAN as date,",
						"          ISSUANCE_OF_DRAWINGS_ACTUAL as date,",
						"          PR_PLAN as date,",
						"          PR_ACTUAL as date,",
						"          VENDOR_FINALIZATION_PLAN as date,",
						"          VENDOR_FINALIZATION_ACTUAL as date,",
						"          REQUIRED_AT_SITE_BY as date,",
						"          ACTUAL_DELIVERY_AT_SITE as date",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT \\n     UPLOAD_DATE,\\n    P.Sort_ID as PROJECT_ID,\\n    P.PROJECT_IDENTIFIER,\\n     --PR.PROJECT_ID AS PROJECT_NAME,\\n    TOWER,\\n    SM.SBU_MAP_ID AS SBU_ID,\\n    SBU,\\n    CLASSIFICATION,\\n    DESCRIPTION,\\n    CATEGORY,\\n    CASE     WHEN ISDATE(ISSUANCE_OF_DRAWINGS_PLAN)=0\\n               THEN CAST(ISSUANCE_OF_DRAWINGS_ACTUAL AS DATE)\\n               ELSE CAST(ISSUANCE_OF_DRAWINGS_PLAN AS DATE) \\n     END          AS ISSUANCE_OF_DRAWINGS_PLAN\\n    ,CAST(ISSUANCE_OF_DRAWINGS_ACTUAL AS DATE) AS ISSUANCE_OF_DRAWINGS_ACTUAL\\n    ,CASE     WHEN ISDATE(PR_PLAN)=0\\n               THEN CAST(PR_ACTUAL AS DATE)\\n               ELSE CAST(PR_PLAN AS DATE) \\n     END AS PR_PLAN\\n    ,CAST(PR_ACTUAL  AS DATE) AS PR_ACTUAL\\n    ,CASE     WHEN ISDATE(VENDOR_FINALIZATION_PLAN) =0\\n               THEN CAST(VENDOR_FINALIZATION_ACTUAL AS DATE)\\n               ELSE CAST(VENDOR_FINALIZATION_PLAN AS DATE) \\n      END AS VENDOR_FINALIZATION_PLAN\\n    ,CAST(VENDOR_FINALIZATION_ACTUAL  AS DATE) AS VENDOR_FINALIZATION_ACTUAL\\n    ,CASE     WHEN ISDATE(REQUIRED_AT_SITE_BY) =0\\n               THEN CAST(ACTUAL_DELIVERY_AT_SITE AS DATE)\\n               ELSE CAST(REQUIRED_AT_SITE_BY AS DATE) \\n     END AS REQUIRED_AT_SITE_BY\\n    ,CAST(ACTUAL_DELIVERY_AT_SITE AS DATE) AS ACTUAL_DELIVERY_AT_SITE\\nFROM(\\n     SELECT\\n               CAST(UPLOAD_TIME AS DATE) AS UPLOAD_DATE,\\n               PROJECT_ID,\\n               TOWER,\\n               SBU_ID,\\n               SBU,\\n               CLASSIFICATION,\\n               DESCRIPTION,\\n               CATEGORY,\\n               CASE \\n                   WHEN          ISDATE(ISSUANCE_OF_DRAWINGS_PLAN)= 1 \\n                                   Then          FORMAT(CAST(ISSUANCE_OF_DRAWINGS_PLAN AS DATE),\\'dd-MMM-yy\\') \\n                                           when ISSUANCE_OF_DRAWINGS_PLAN= \\'NA\\'\\n                                           then  \\'01-Jan-99\\'\\n                                   ELSE     UPLOAD_TIME \\n                    END     AS ISSUANCE_OF_DRAWINGS_PLAN,\\n               CASE \\n                   WHEN          ISDATE(ISSUANCE_OF_DRAWINGS_ACTUAL)= 1  \\n                            THEN FORMAT(CAST(ISSUANCE_OF_DRAWINGS_ACTUAL AS DATE),\\'dd-MMM-yy\\') \\n                                    when ISSUANCE_OF_DRAWINGS_ACTUAL= \\'NA\\'\\n                                           then  \\'01-Jan-99\\'\\n                            ELSE UPLOAD_TIME \\n                         END     AS ISSUANCE_OF_DRAWINGS_ACTUAL,\\n               CASE \\n                   WHEN ISDATE(PR_PLAN)= 1  \\n                              THEN FORMAT(CAST(PR_PLAN AS DATE),\\'dd-MMM-yy\\') \\n                                     when PR_PLAN= \\'NA\\'\\n                                           then  \\'01-Jan-99\\'\\n                              ELSE UPLOAD_TIME \\n                    END AS PR_PLAN,\\n               CASE \\n                   WHEN ISDATE(PR_ACTUAL)= 1   \\n                              THEN FORMAT(CAST(PR_ACTUAL AS DATE),\\'dd-MMM-yy\\') \\n                                     when PR_ACTUAL= \\'NA\\'\\n                                           then  \\'01-Jan-99\\'\\n                              ELSE UPLOAD_TIME \\n                    END AS PR_ACTUAL,\\n               CASE \\n                   WHEN ISDATE(VENDOR_FINALIZATION_PLAN)= 1    \\n                              THEN FORMAT(CAST(VENDOR_FINALIZATION_PLAN AS DATE),\\'dd-MMM-yy\\') \\n                                     when VENDOR_FINALIZATION_PLAN = \\'NA\\'\\n                                           then  \\'01-Jan-99\\'\\n                              ELSE UPLOAD_TIME \\n                    END AS VENDOR_FINALIZATION_PLAN,\\n               CASE \\n                   WHEN  ISDATE(VENDOR_FINALIZATION_ACTUAL)= 1 \\n                              THEN FORMAT(CAST(VENDOR_FINALIZATION_ACTUAL AS DATE),\\'dd-MMM-yy\\') \\n                                     when VENDOR_FINALIZATION_ACTUAL= \\'NA\\'\\n                                           then  \\'01-Jan-99\\'\\n                              ELSE UPLOAD_TIME \\n                    END AS VENDOR_FINALIZATION_ACTUAL,\\n               CASE \\n                   WHEN ISDATE(REQUIRED_AT_SITE_BY)= 1  \\n                              THEN FORMAT(CAST(REQUIRED_AT_SITE_BY AS DATE),\\'dd-MMM-yy\\') \\n                                     when REQUIRED_AT_SITE_BY= \\'NA\\'\\n                                           then  \\'01-Jan-99\\'\\n                              ELSE UPLOAD_TIME \\n                    END AS REQUIRED_AT_SITE_BY,\\n               CASE \\n                   WHEN ISDATE(ACTUAL_DELIVERY_AT_SITE)= 1 \\n                              THEN FORMAT(CAST(ACTUAL_DELIVERY_AT_SITE AS DATE),\\'dd-MMM-yy\\') \\n                                     when ACTUAL_DELIVERY_AT_SITE= \\'NA\\'\\n                                           then  \\'01-Jan-99\\'\\n                              ELSE UPLOAD_TIME \\n                    END AS ACTUAL_DELIVERY_AT_SITE,\\n               DENSE_RANK() OVER ( PARTITION BY PROJECT_ID ORDER BY CAST(UPLOAD_TIME AS DATE) DESC) DRANK\\n FROM     [STG].[O_PLN_PROCUREMENT_STG])PR\\nLEFT JOIN [DWH].[PROJECTS_NEW_DIM] P\\n      ON         PR.PROJECT_ID=P.PROJECT_IDENTIFIER \\nLEFT JOIN [DWH].[PLN_SBU_MAPPING_DIM]\\nSM\\n     ON          PR.SBU=SM.SBU_Shorts\\n      where DRANK=1 ',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAXID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Project_ID as string,",
						"          Project_Identifier as string,",
						"          Tower as string,",
						"          SBU_ID as string,",
						"          SBU as string,",
						"          Classification as string,",
						"          Description as string,",
						"          Category as string,",
						"          Issuance_of_Drawings_Plan as date,",
						"          Issuance_of_Drawings_Actual as date,",
						"          PR_Plan as date,",
						"          PR_Actual as date,",
						"          Vendor_Finalization_Plan as date,",
						"          Vendor_Finalization_Actual as date,",
						"          Required_at_site_by as date,",
						"          Actual_delivery_at_site as date,",
						"          Upload_Date as date,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE [DWH].[PLN_PROCUREMENT_FACT]'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Project_ID = PROJECT_ID,",
						"          Project_Identifier = PROJECT_IDENTIFIER,",
						"          Tower = TOWER,",
						"          SBU_ID,",
						"          SBU,",
						"          Classification = CLASSIFICATION,",
						"          Description = DESCRIPTION,",
						"          Category = CATEGORY,",
						"          Issuance_of_Drawings_Plan = ISSUANCE_OF_DRAWINGS_PLAN,",
						"          Issuance_of_Drawings_Actual = ISSUANCE_OF_DRAWINGS_ACTUAL,",
						"          PR_Plan = PR_PLAN,",
						"          PR_Actual = PR_ACTUAL,",
						"          Vendor_Finalization_Plan = VENDOR_FINALIZATION_PLAN,",
						"          Vendor_Finalization_Actual = VENDOR_FINALIZATION_ACTUAL,",
						"          Required_at_site_by = REQUIRED_AT_SITE_BY,",
						"          Actual_delivery_at_site = ACTUAL_DELIVERY_AT_SITE,",
						"          Upload_Date = UPLOAD_DATE,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PLN_PROJECTION')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH/Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_F_PLN_PROJECTION_STG_TRG",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "Import data from DS_F_PLN_PROJECTION_STG_TRG"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_PLN_PROJECTION_TRG",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to DS_PLN_PROJECTION_TRG"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     MAX_ID as integer (0)",
						"}",
						"source(output(",
						"          Upload_Date as timestamp,",
						"          PROJECT_IDENTIFIER as string,",
						"          Project_ID as integer,",
						"          SBU_Map_ID as integer,",
						"          Area as string,",
						"          Category as string,",
						"          Activity_Description as string,",
						"          Projection_for_the_month as decimal(15,2),",
						"          Yesterday as timestamp,",
						"          Plan_Yesterday as decimal(15,2),",
						"          Plan_as_on_date as decimal(15,2),",
						"          Actual_Yesterday as decimal(15,2),",
						"          Actual_as_on_date as decimal(15,2),",
						"          Shortfall_Reasons as string,",
						"          SBU_Custom_Sort as integer,",
						"          Achived as decimal(15,2),",
						"          Achived_90 as decimal(15,2)",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select \\n     [Upload_Date]  ,\\n   P.PROJECT_IDENTIFIER  ,\\n     --, [SBU] \\n     Sort_ID as [Project_ID] ,\\n     SM.[SBU_Map_ID] \\n     , [Area] \\n     , [Category] \\n     , [Activity_Description] \\n     , [Projection_for_the_month]  \\n     , [Yesterday]  \\n     , [Plan_Yesterday]  \\n     , [Plan_as_on_date] \\n     , [Actual_Yesterday] \\n     , [Actual_as_on_date] \\n     , [Shortfall_Reasons]  \\n     , [SBU_Custom_Sort] \\n     , [Achived] \\n     , [Achived_90] \\n FROM [STG].[F_PLN_PROJECTION_STG] PP\\nLEFT JOIN [DWH].[PROJECTS_NEW_DIM] P\\n      ON          PP.Project_Sclicer=P.PROJECT_IDENTIFIER \\n     LEFT JOIN [DWH].[PLN_SBU_MAPPING_DIM] SM\\n     ON          PP.SBU=SM.SBU_IDENTIFIER',",
						"     format: 'query',",
						"     staged: true) ~> source1",
						"source1 keyGenerate(output(SurrogateKey_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
						"          LoadDateTime = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Project_ID as integer,",
						"          Project_Identifier as string,",
						"          SBU_ID as integer,",
						"          Area as string,",
						"          Category as string,",
						"          Activity_Description as string,",
						"          Projection_for_the_month as decimal(15,2),",
						"          Yesterday as timestamp,",
						"          Plan_Yesterday as decimal(15,2),",
						"          Plan_as_on_date as decimal(15,2),",
						"          Actual_Yesterday as decimal(15,2),",
						"          Actual_as_on_date as decimal(15,2),",
						"          Shortfall_Reasons as string,",
						"          SBU_Custom_Sort as integer,",
						"          Achived as decimal(15,2),",
						"          Achived_90 as decimal(15,2),",
						"          Update_Date as timestamp,",
						"          LoadDateTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     preSQLs:['TRUNCATE TABLE [DWH].[PLN_PROJECTION_FACT];'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          Project_ID,",
						"          Project_Identifier = PROJECT_IDENTIFIER,",
						"          SBU_ID = SBU_Map_ID,",
						"          Area,",
						"          Category,",
						"          Activity_Description,",
						"          Projection_for_the_month,",
						"          Yesterday,",
						"          Plan_Yesterday,",
						"          Plan_as_on_date,",
						"          Actual_Yesterday,",
						"          Actual_as_on_date,",
						"          Shortfall_Reasons,",
						"          SBU_Custom_Sort,",
						"          Achived,",
						"          Achived_90,",
						"          Update_Date = Upload_Date,",
						"          LoadDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		}
	]
}
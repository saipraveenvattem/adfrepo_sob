{
	"name": "DF_Gaant_Hurry2",
	"properties": {
		"folder": {
			"name": "DWH/Facts"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Gaant_Hurry_Src",
						"type": "DatasetReference"
					},
					"name": "MILESTONEMAINTABLEPlan1",
					"description": "Add data to MILESTONE_MAIN_TABLE_Plan"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Gaant_Hurry_ALL",
						"type": "DatasetReference"
					},
					"name": "AutualandPlanSInk"
				}
			],
			"transformations": [
				{
					"name": "unionfacttables"
				},
				{
					"name": "addActivityMapping"
				},
				{
					"name": "selectListforMILESTONEMAINTABLEPlan"
				},
				{
					"name": "addLegendPlan"
				},
				{
					"name": "Actualjoinwithforecast"
				},
				{
					"name": "select3"
				},
				{
					"name": "AddAchivedtoActuals"
				},
				{
					"name": "select4"
				},
				{
					"name": "addLegendActuals"
				},
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     MAX_ID as integer (0)",
				"}",
				"source(output(",
				"          Upload_Time as date,",
				"          Project_Identifier as string,",
				"          Group as string,",
				"          Activity_Description as string,",
				"          Baseline_Start_Date as date,",
				"          Baseline_Finish_Date as date,",
				"          Total_days as integer,",
				"          Days_elapsed as integer,",
				"          Completion_plan as integer,",
				"          Source_Templet as string,",
				"          Sort_Group as integer,",
				"          Sort_Activity as integer,",
				"          Activity_New as string,",
				"          FLAT_COUNT as integer,",
				"          Actual_Percentage as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT DC.Upload_Time,  P.Project_Identifier, DC.[Group], DC.[Activity_Description],  DC.[Baseline_Start_Date],\\n   DC.[Baseline_Finish_Date], DATEDIFF(DAY, DC.[Baseline_Start_Date],DC.[Baseline_Finish_Date]) AS Total_days,\\n   DATEDIFF(DAY, DC.[Baseline_Start_Date],GETDATE()) AS Days_elapsed,\\n   CASE WHEN DATEDIFF(DAY,DC.[Baseline_Finish_Date], DC.[Baseline_Start_Date]) = 0 THEN 0\\n   WHEN (DATEDIFF(DAY,GETDATE(), DC.[Baseline_Start_Date])/ DATEDIFF(DAY,DC.[Baseline_Finish_Date], DC.[Baseline_Start_Date])) < 1\\n   AND (DATEDIFF(DAY,GETDATE(), DC.[Baseline_Start_Date])/ DATEDIFF(DAY,DC.[Baseline_Finish_Date], DC.[Baseline_Start_Date])) > 0 \\n   THEN (DATEDIFF(DAY,GETDATE(), DC.[Baseline_Start_Date])/ DATEDIFF(DAY,DC.[Baseline_Finish_Date], DC.[Baseline_Start_Date]))\\n   WHEN (DATEDIFF(DAY,GETDATE(), DC.[Baseline_Start_Date])/ DATEDIFF(DAY,DC.[Baseline_Finish_Date], DC.[Baseline_Start_Date])) < 0 THEN 0\\n   ELSE 1 END AS Completion_plan,\\n   CASE\\n--             For Manual Entry\\n   WHEN DC.[Group] = \\'Structural Works\\' AND DC.[Activity_Description] IN (\\'Pile Cap\\',\\'Pile\\')  THEN \\'MANUAL_ENTRY\\'\\n   WHEN DC.[Group] = \\'External Elevation\\' AND DC.[Activity_Description] IN (\\'ACP Works\\')  THEN \\'MANUAL_ENTRY\\'\\n   WHEN DC.[Group] = \\'Other & Specialist\\' AND DC.[Activity_Description] IN (\\'Lift - CTU\\',\\'Lift - Balance passenger lifts\\',\\n   \\'Swimming Pool\\',\\'Kids Play Area/ Outdoor Play Area\\',\\'Changing Rooms / GYM\\',\\'Wooden Decking\\')  THEN \\'MANUAL_ENTRY\\'\\n   WHEN DC.[Group] = \\'Authority Approvals\\' AND DC.[Activity_Description] IN (\\'Transformer payment\\', \\'LV Inspection & Approval\\',\\n   \\'BCC - Inspection & Approval\\',\\'Power on\\') THEN \\'MANUAL_ENTRY\\'\\n--         For Structures\\n   WHEN DC.[Group] = \\'Structural Works\\' AND DC.[Activity_Description] IN (\\'Grade Slab\\',\\'Podium Slabs\\',\\'Typical Floor Slabs\\')\\n   THEN \\'PLN_STRUCTURE_FACT\\' WHEN DC.[Group] = \\'Structural Works\\' AND DC.[Activity_Description] NOT IN\\n   (\\'Pile\\',\\'Pile Cap\\',\\'Grade Slab\\',\\'Podium Slabs\\',\\'Typical Floor Slabs\\')  THEN \\'TBD\\'\\n--         For Dry Area\\n   WHEN DC.[Group] = \\'Masonary Works\\' AND DC.[Activity_Description] IN (\\'Blockworks\\')  THEN \\'PLN_DRYAREA_FACT\\' WHEN \\n   DC.[Group] = \\'Finishes - Dry Area\\' THEN \\'PLN_DRYAREA_FACT\\'\\n   WHEN DC.[Group] = \\'External Elevation\\' AND DC.[Activity_Description] IN (\\'Sliding Door\\')  THEN \\'PLN_DRYAREA_FACT\\'\\n--         For Wet Area    \\n   WHEN DC.[Group] = \\'Finishes - Wet Area\\' THEN \\'PLN_WETAREA_FACT\\'\\n   WHEN DC.[Group] = \\'Joinery Works\\' AND DC.[Activity_Description] IN (\\'Vanity Cabinet\\')  THEN \\'PLN_WETAREA_FACT\\'\\n--         For Corridor Area\\n   WHEN DC.[Group] = \\'Finishes - Corridor\\' THEN \\'PLN_CORRIDOR_FACT\\'\\n--         For Balcony Area\\n   WHEN DC.[Group] = \\'External Elevation\\' AND DC.[Activity_Description] IN (\\'EIFS\\',\\'Balustrade Works\\')  THEN \\'PLN_BALCONYAREA_FACT\\'\\n--         For Kitchen Area\\n   WHEN DC.[Group] = \\'Other & Specialist\\' AND DC.[Activity_Description] IN (\\'Kitchen Appliances\\')  THEN \\'PLN_KITCHENAREA_FACT\\'\\n   WHEN DC.[Group] = \\'Joinery Works\\' AND DC.[Activity_Description] IN (\\'Kitchen Cabinet\\')  THEN \\'PLN_KITCHENAREA_FACT\\'\\n--         For KeepOut Area\\n   WHEN DC.[Group] = \\'Keepout\\' THEN \\'PLN_KEEPOUT_FACT\\'\\n--         Yet to be Decided\\n   WHEN DC.[Group] = \\'Authority Approvals\\' AND DC.[Activity_Description] NOT IN (\\'Transformer payment\\',\\n   \\'LV Inspection & Approval\\',\\'BCC - Inspection & Approval\\',\\'Power on\\') THEN \\'TBD\\'\\n   WHEN DC.[Group] = \\'External Elevation\\' AND DC.[Activity_Description] NOT IN (\\'Sliding Door\\',\\'EIFS\\',\\'Balustrade Works\\',\\'ACP Works\\')  THEN \\'TBD\\'\\n   WHEN DC.[Group] = \\'Other & Specialist\\' AND DC.[Activity_Description] NOT IN (\\'Kitchen Appliances\\',\\n   \\'Lift - CTU\\',\\'Lift - Balance passenger lifts\\',\\'Swimming Pool\\',\\'Kids Play Area/ Outdoor Play Area\\',\\n    \\'Changing Rooms / GYM\\',\\'Wooden Decking\\')  THEN \\'TBD\\'\\n   WHEN DC.[Group] = \\'Joinery Works\\' AND DC.[Activity_Description] NOT IN (\\'Vanity Cabinet\\',\\'Kitchen Cabinet\\')  THEN \\'TBD\\'\\n   ELSE \\'MISSING\\' END AS Source_Templet, OLMP.Sort_Group, OLMP.Sort_Activity, OLMP.Activity_New, P.FLAT_COUNT,\\n        DC.[Actual_Percentage]\\n--INTO #MILESTONE_MAIN_TABLE_Plan\\nFROM (SELECT CAST(OPM.upload_time AS DATE) AS Upload_Time,OPM.project_id, OPM.[Group], OPM.[Activity_Description],\\n       -- REPLACE(OPM.[Baseline_Start],\\'-\\',\\'/\\') AS  [Baseline_Start_Date],\\n CAST(REPLACE(OPM.[Baseline_Start],\\'-\\',\\'/\\') AS DATE) AS  [Baseline_Start_Date],[Baseline_Start],[Baseline_Finish],\\n CAST(REPLACE(OPM.[Baseline_Finish],\\'-\\',\\'/\\') AS DATE) AS [Baseline_Finish_Date],\\n DENSE_RANK() OVER( PARTITION BY OPM.project_id ORDER BY CAST(OPM.upload_time AS DATE) DESC) DENSERANK, OPM.[Actual_Percentage]\\n FROM [STG].[O_PLN_MILESTONE_STG] OPM WHERE (OPM.[Group] IS NOT NULL AND TRIM(OPM.[Group]) NOT IN (\\'\\')\\n AND OPM.[Activity_Description] IS NOT NULL AND TRIM(OPM.[Activity_Description]) NOT IN (\\'\\')\\n AND OPM.[Baseline_Start] IS NOT NULL AND TRIM(OPM.[Baseline_Start]) NOT IN (\\'\\')\\n AND OPM.[Baseline_Finish] IS NOT NULL AND TRIM(OPM.[Baseline_Finish]) NOT IN (\\'\\'))) DC\\nLEFT JOIN [STG].[O_PLN_MILESTONE_MAP_STG] OLMP ON DC.[Group] = OLMP.[Group] AND DC.[Activity_Description] = OLMP.Activity\\nLEFT JOIN [DWH].[PLN_PROJECTS_DIM] P ON DC.project_id = P.Project_Identifier WHERE DC.DENSERANK = 1',",
				"     format: 'query',",
				"     staged: true) ~> MILESTONEMAINTABLEPlan1",
				" union(byName: true)~> unionfacttables",
				"unionfacttables derive(Milestone_Activity_Map = case(     \r",
				"     trim(Type_of_work) == 'FC BOARDING WITH JOINT TAPING' && Source_Table == 'PLN_DRYAREA_FACT','False Ceiling - Boarding',\r",
				"     trim(Type_of_work) == 'Plaster' && Source_Table == 'PLN_DRYAREA_FACT','Plaster',\r",
				"     trim(Type_of_work) == 'Screed' && Source_Table == 'PLN_DRYAREA_FACT','Screed',\r",
				"     trim(Type_of_work) == 'Floor Tiling' && Source_Table == 'PLN_DRYAREA_FACT','Floor Tiles',\r",
				"     trim(Type_of_work) == 'FC Framing' && Source_Table == 'PLN_DRYAREA_FACT','False Ceiling - Framing',\r",
				"     trim(Type_of_work) == 'Kitchen Cabinet' && Source_Table == 'PLN_KITCHENAREA_FACT','Kitchen Cabinet',\r",
				"     trim(Type_of_work) == 'KITCHEN APPLIANCES' && Source_Table == 'PLN_KITCHENAREA_FACT','Kitchen Appliances',\r",
				"     trim(Type_of_work) == 'Sliding Door' && Source_Table == 'PLN_DRYAREA_FACT','Sliding Door',\r",
				"     trim(Type_of_work) == 'Blockwork' && Source_Table == 'PLN_DRYAREA_FACT','Blockwork',\r",
				"     trim(Type_of_work) == 'Balustrade Works' && Source_Table == 'PLN_DRYAREA_FACT','Balustrade Works',\r",
				"     trim(Type_of_work) == 'Floor Tile' && Source_Table == 'PLN_CORRIDOR_FACT','Floor Tiles',\r",
				"    trim(Type_of_work) == 'CORRIDOR FLOOR TILE' && Source_Table == 'PLN_CORRIDOR_FACT','Floor Tiles',\r",
				"     trim(Type_of_work) == 'Wall Tile'  && Source_Table == 'PLN_CORRIDOR_FACT','Wall Tiles',\r",
				"    trim(Type_of_work) == 'CORRIDOR WALL TILE'  && Source_Table == 'PLN_CORRIDOR_FACT','Wall Tiles',\r",
				"     trim(Type_of_work) == 'FC Boarding' && Source_Table == 'PLN_CORRIDOR_FACT','False Ceiling - Boarding',\r",
				"    trim(Type_of_work) == 'CORRIDOR FC BOARDING' && Source_Table == 'PLN_CORRIDOR_FACT','False Ceiling - Boarding',\r",
				"     trim(Type_of_work)  == 'WET AREA SCREED'&& Source_Table == 'PLN_WETAREA_FACT','Screed',\r",
				"     trim(Type_of_work)  == 'Wet Area MEP H/L Boarding Clearance'&& Source_Table == 'PLN_WETAREA_FACT','MEP High Lvl',\r",
				"     trim(Type_of_work)  == 'WALL TILE BOTTOM TILE'&& Source_Table == 'PLN_WETAREA_FACT','Wall Tiles',\r",
				"     trim(Type_of_work)  == 'WET AREA FC FRAMING'&& Source_Table == 'PLN_WETAREA_FACT','False Ceiling - Framing',\r",
				"     trim(Type_of_work)  == 'FC BOARDING & JOINT TAPING'&& Source_Table == 'PLN_WETAREA_FACT','False Ceiling - Boarding',\r",
				"     trim(Type_of_work)  == 'Floor Tile'&& Source_Table == 'PLN_WETAREA_FACT','Floor Tiles',\r",
				"     trim(Type_of_work)  == 'Wet Area Final Fixtures Installation'&& Source_Table == 'PLN_WETAREA_FACT','MEP Final Fix',\r",
				"     trim(Type_of_work)  == 'Vanity Cabinet'&& Source_Table == 'PLN_WETAREA_FACT','Vanity Cabinet',\r",
				"     trim(Type_of_work)  == 'EIFS INSTALLATION'&& Source_Table == 'PLN_BALCONYAREA_FACT','EIFS',\r",
				"     trim(Type_of_work)  == 'Keep Out (QT)'&& Source_Table == 'PLN_KEEPOUT_FACT','CAP^Q Unit QT Keep-out approvals',\r",
				"     trim(Type_of_work)  == 'Kitchen Stamp - Civil (I9)'&& Source_Table == 'PLN_KEEPOUT_FACT','CAP^Q (Stamp - I9) Kitchen Keep-',\r",
				"     trim(Type_of_work)  == 'Bathroom Stamp - Civil (L9)'&& Source_Table == 'PLN_KEEPOUT_FACT','CAP^Q (Stamp - L9) Bathroom Keep',\r",
				"     trim(Type_of_work)  == 'Podium'&& Source_Table == 'PLN_STRUCTURE_FACT','Podium Slabs',\r",
				"     trim(Type_of_work)  == 'Grade Slab'&& Source_Table == 'PLN_STRUCTURE_FACT','Grade Slab',\r",
				"     trim(Type_of_work)  == 'Typical Floor'&& Source_Table == 'PLN_STRUCTURE_FACT','Typical Floor Slabs'\r",
				"     )) ~> addActivityMapping",
				"MILESTONEMAINTABLEPlan1 select(mapColumn(",
				"          Upload_Time,",
				"          Project_Identifier,",
				"          Group,",
				"          Activity_Description,",
				"          Actual_Start_Date = Baseline_Start_Date,",
				"          Actual_Finish_Date = Baseline_Finish_Date,",
				"          Total_days,",
				"          Days_elapsed,",
				"          Actual_Achived = Completion_plan,",
				"          Source_Templet,",
				"          Sort_Group,",
				"          Sort_Activity,",
				"          Activity_New,",
				"          Actual_Percentage",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectListforMILESTONEMAINTABLEPlan",
				"selectListforMILESTONEMAINTABLEPlan derive(Legend = 'Plan',",
				"          Source_Table = Source_Templet) ~> addLegendPlan",
				"addActivityMapping join(MILESTONEMAINTABLEActual@Project_Identifier == unionfacttables@Project_Identifier",
				"     && Source_Templet == Source_Table",
				"     && Activity_Description == Milestone_Activity_Map,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> Actualjoinwithforecast",
				"Actualjoinwithforecast select(mapColumn(",
				"          Upload_Time,",
				"          Project_Identifier = MILESTONEMAINTABLEActual@Project_Identifier,",
				"          Group,",
				"          Activity_Description,",
				"          Actual_Start_Date,",
				"          Actual_Finish_Date,",
				"          Total_days,",
				"          Days_elapsed,",
				"          Source_Templet,",
				"          Sort_Group,",
				"          Sort_Activity,",
				"          Activity_New,",
				"          Actual_Percentage,",
				"          Source_Table,",
				"          FLAT_COUNT,",
				"          SUM_ALL",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 derive(Actual_Achived = toDecimal(SUM_ALL/FLAT_COUNT)) ~> AddAchivedtoActuals",
				"AddAchivedtoActuals select(mapColumn(",
				"          Upload_Time,",
				"          Project_Identifier,",
				"          Group,",
				"          Activity_Description,",
				"          Actual_Start_Date,",
				"          Actual_Finish_Date,",
				"          Total_days,",
				"          Days_elapsed,",
				"          Source_Templet,",
				"          Sort_Group,",
				"          Sort_Activity,",
				"          Activity_New,",
				"          Actual_Percentage,",
				"          Source_Table,",
				"          Actual_Achived,",
				"          Source_Table",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select4 derive(Legend = 'Actuals') ~> addLegendActuals",
				"addLegendActuals, addLegendPlan union(byName: true)~> union1",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> AutualandPlanSInk"
			]
		}
	}
}
{
	"name": "DF_PLN_ELECTRICROOM",
	"properties": {
		"folder": {
			"name": "DWH/Facts"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_O_PLN_ELECTRICALROOM_RAW_STG_TRG",
						"type": "DatasetReference"
					},
					"name": "source1",
					"description": "Import data from DS_O_PLN_ELECTRICALROOM_RAW_STG_TRG"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_PLN_ELECTRICROOM_TRG",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     MAX_ID as integer (0)",
				"}",
				"source(output(",
				"          PROJECT_ID as integer,",
				"          LEVEL_ID as integer,",
				"          SBU_ID as integer,",
				"          PROJECT_IDENTIFIER as string,",
				"          TOWER as string,",
				"          LEVEL as string,",
				"          Sclicer as string,",
				"          ACTIVITY_ID as integer,",
				"          VALUE as string,",
				"          TYPE_OF_WORK as string,",
				"          CATEGORY as string,",
				"          UPLOAD_DATE as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT \\n    P.Sort_ID as PROJECT_ID,\\n    LM.LEVEL_MAP_ID AS LEVEL_ID,\\n    SM.SBU_MAP_ID AS SBU_ID,\\n    P.PROJECT_IDENTIFIER,\\n    E.TOWER    ,\\n    E.LEVEL,\\n    \\'Electrical Room\\' as Sclicer,\\n    E.ACTIVITY_ID    ,\\n    CASE \\n        WHEN E.VALUE IN (\\'\\',\\'NA\\') THEN \\'0%\\'\\n        ELSE E.VALUE\\n    END AS VALUE,\\n    E.TYPE_OF_WORK    ,\\n    E.CATEGORY   ,\\n    E.UPLOAD_DATE  \\nFROM (\\nSELECT ER.UPLOAD_TIME AS UPLOAD_DATE,\\nER.PROJECT_ID,\\nER.TOWER,\\nER.LEVEL,\\nCOLUMN_NAME.*,\\nEM.ACTIVITY_ID,\\nEM.SBU_ID,\\nEM.CATEGORY,\\nDENSE_RANK () OVER(PARTITION BY  PROJECT_ID ORDER BY  CAST(UPLOAD_TIME AS DATE) DESC) DRANK\\nFROM STG.O_PLN_ELECTRICALROOM_RAW_STG ER\\n CROSS APPLY  (\\n         SELECT BLOCKWORK_LAYOUT,\\'BLOCKWORK LAYOUT\\'\\nUNION ALL SELECT BLOCKWORK,\\'BLOCKWORK\\'\\nUNION ALL SELECT MEP_MARKING_FOR_BUILDERS_WORK,\\'MEP MARKING FOR BUILDERS WORK\\'\\nUNION ALL SELECT CUTTING_AND_CHASING_OF_BLOCKWORK,\\'CUTTING AND CHASING OF BLOCKWORK\\'\\nUNION ALL SELECT MEP_SERVICES_INSTALLATION,\\'MEP SERVICES INSTALLATION\\'\\nUNION ALL SELECT WALL_MEP_SERVICES_PACKING,\\'WALL MEP SERVICES PACKING\\'\\nUNION ALL SELECT PLASTER,\\'PLASTER\\'\\nUNION ALL SELECT SCREED,\\'SCREED\\'\\nUNION ALL SELECT WALL_AND_CEILING_PRIMER,\\'WALL AND CEILING PRIMER\\'\\nUNION ALL SELECT CEILING_STUCCO_1ST_AND_2ND_COAT,\\'CEILING STUCCO (1ST AND 2ND COAT)\\'\\nUNION ALL SELECT WALL_STUCCO_1ST_AND_2ND_COAT,\\'WALL STUCCO (1ST AND 2ND COAT)\\'\\nUNION ALL SELECT CEILING_FIRST_COAT_PAINT,\\'CEILING FIRST COAT PAINT\\'\\nUNION ALL SELECT WALL_FIRST_COAT_PAINT,\\'WALL FIRST COAT PAINT\\'\\nUNION ALL SELECT METER_BOARD_FIXING,\\'METER BOARD FIXING\\'\\nUNION ALL SELECT METER_BOARD_PAINTING,\\'METER BOARD PAINTING\\'\\nUNION ALL SELECT INSTALLATION_OF_CABLE_TRAY_AND_TRUNKING,\\'INSTALLATION OF CABLE TRAY AND TRUNKING\\'\\nUNION ALL SELECT INSTALLATION_OF_PANELS,\\'INSTALLATION OF PANELS\\'\\nUNION ALL SELECT CABLE_LAYING_AND_GLANDING_WORKS,\\'CABLE LAYING AND GLANDING WORKS\\'\\nUNION ALL SELECT DRESSING_AND_TERMINATION_OF_SMDB_AND_PANELS,\\'DRESSING AND TERMINATION OF SMDB AND PANELS\\'\\nUNION ALL SELECT BUS_BAR_WITH_TAP_OFF_BOX_COMPLETION,\\'BUS BAR WITH TAP OFF BOX COMPLETION\\'\\nUNION ALL SELECT THRESHOLD,\\'THRESHOLD\\'\\nUNION ALL SELECT FLOOR_TILE,\\'FLOOR TILE\\'\\nUNION ALL SELECT DOOR_FRAME_INSTALLATION,\\'DOOR FRAME INSTALLATION\\'\\nUNION ALL SELECT DOOR_ARCHITRAVE_INSTALLATION,\\'DOOR ARCHITRAVE INSTALLATION\\'\\nUNION ALL SELECT DOOR_SHUTTER_INSTALLATION,\\'DOOR SHUTTER INSTALLATION\\'\\nUNION ALL SELECT DOOR_IRONMONGERY_INSTALLATION,\\'DOOR IRONMONGERY INSTALLATION\\'\\nUNION ALL SELECT DOOR_SILICONE,\\'DOOR SILICONE\\'\\nUNION ALL SELECT EPOXY_GRINDING,\\'EPOXY ERINDING\\'\\nUNION ALL SELECT EPOXY_BUG_FILL,\\'EPOXY BUG FILL\\'\\nUNION ALL SELECT EPOXY_PRIMER,\\'EPOXY PRIMER\\'\\nUNION ALL SELECT EPOXY_FIRST_COAT,\\'EPOXY FIRST COAT\\'\\nUNION ALL SELECT EPOXY_FINAL_COAT,\\'EPOXY FINAL COAT\\'\\nUNION ALL SELECT SKIRTING,\\'SKIRTING\\'\\nUNION ALL SELECT POP_WORKS,\\'POP WORKS\\'\\nUNION ALL SELECT ELECTRICAL_ROOM_TOP_BOARDING,\\'ELECTRICAL ROOM TOP BOARDING\\'\\nUNION ALL SELECT FIRE_SEALANT_WORKS,\\'FIRE SEALANT WORKS\\'\\nUNION ALL SELECT ANGLE_FIXING,\\'ANGLE FIXING\\'\\nUNION ALL SELECT SHAFT_BOARDING,\\'SHAFT BOARDING\\'\\nUNION ALL SELECT GROUTING,\\'EROUTING\\'\\nUNION ALL SELECT SILICONE,\\'SILICONE\\'\\nUNION ALL SELECT SIGNAGE,\\'SIGNAGE\\'\\nUNION ALL SELECT MEP_FINAL_FIXTURES,\\'MEP FINAL FIXTURES\\'\\nUNION ALL SELECT ELECTRIC_METER_INSTALLATION,\\'ELECTRIC METER INSTALLATION\\'\\nUNION ALL SELECT FINAL_COAT_PAINT,\\'FINAL COAT PAINT\\'\\n)AS COLUMN_NAME(VALUE,TYPE_OF_WORK)\\nJOIN STG.O_PLN_ELECTRICALROOM_MAP_STG EM\\nON COLUMN_NAME.TYPE_OF_WORK = EM.ACTIVITY_SEQUENCE\\nWHERE VALUE IS NOT NULL\\n) E\\nLEFT JOIN [DWH].[PLN_LEVEL_MAP_ALL_DIM] AS LM\\n     ON          E.[LEVEL] = LM.[LEVEL]\\nLEFT JOIN [DWH].[PROJECTS_NEW_DIM]P\\n      ON          E.PROJECT_ID=P.PROJECT_IDENTIFIER\\nLEFT JOIN [DWH].[PLN_SBU_MAPPING_DIM] SM\\n     ON          E.SBU_ID=SM.SBU_IDENTIFIER\\nWHERE          E.DRANK = 1\\n\\n',",
				"     format: 'query',",
				"     staged: true) ~> source1",
				"source1 keyGenerate(output(SurrogateKey_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(LoadDateTime = currentUTC(),",
				"          ID = SurrogateKey_ID+$MAX_ID) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          Project_ID as integer,",
				"          Project_Indentifer as string,",
				"          SBU_ID as integer,",
				"          Level_ID as integer,",
				"          Tower as string,",
				"          Level as string,",
				"          Sclicer as string,",
				"          Activity_ID as integer,",
				"          Value as string,",
				"          Type_of_work as string,",
				"          Category as string,",
				"          Update_date as date,",
				"          LoadDateTime as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     preSQLs:['TRUNCATE TABLE [DWH].[PLN_ELECTRICROOM_FACT];'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ID,",
				"          Project_ID = PROJECT_ID,",
				"          Project_Indentifer = PROJECT_IDENTIFIER,",
				"          SBU_ID,",
				"          Level_ID = LEVEL_ID,",
				"          Tower = TOWER,",
				"          Level = LEVEL,",
				"          Sclicer,",
				"          Activity_ID = ACTIVITY_ID,",
				"          Value = VALUE,",
				"          Type_of_work = TYPE_OF_WORK,",
				"          Category = CATEGORY,",
				"          Update_date = UPLOAD_DATE,",
				"          LoadDateTime",
				"     )) ~> sink1"
			]
		}
	}
}
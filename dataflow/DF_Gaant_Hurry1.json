{
	"name": "DF_Gaant_Hurry1",
	"properties": {
		"folder": {
			"name": "DWH/Facts"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Gaant_Hurry_Src",
						"type": "DatasetReference"
					},
					"name": "DRYAREAGAANTFINAL",
					"description": "Import data from DS_Gaant_Hurry_Src"
				},
				{
					"dataset": {
						"referenceName": "DS_Gaant_Hurry_Src",
						"type": "DatasetReference"
					},
					"name": "WETAREAGAANTFINAL",
					"description": "Import data from DS_Gaant_Hurry_Src"
				},
				{
					"dataset": {
						"referenceName": "DS_Gaant_Hurry_Src",
						"type": "DatasetReference"
					},
					"name": "CORRIDORGAANTFINAL",
					"description": "Import data from DS_Gaant_Hurry_Src"
				},
				{
					"dataset": {
						"referenceName": "DS_Gaant_Hurry_Src",
						"type": "DatasetReference"
					},
					"name": "KITCHENGAANTFINAL",
					"description": "Import data from DS_Gaant_Hurry_Src"
				},
				{
					"dataset": {
						"referenceName": "DS_Gaant_Hurry_Src",
						"type": "DatasetReference"
					},
					"name": "BALCONYGAANTFINAL",
					"description": "Import data from DS_Gaant_Hurry_Src"
				},
				{
					"dataset": {
						"referenceName": "DS_Gaant_Hurry_Src",
						"type": "DatasetReference"
					},
					"name": "SLIDINGDOORGAANTFINAL",
					"description": "Import data from DS_Gaant_Hurry_Src"
				},
				{
					"dataset": {
						"referenceName": "DS_Gaant_Hurry_Src",
						"type": "DatasetReference"
					},
					"name": "KITCHENCABINETGAANTFINAL",
					"description": "Import data from DS_Gaant_Hurry_Src"
				},
				{
					"dataset": {
						"referenceName": "DS_Gaant_Hurry_Src",
						"type": "DatasetReference"
					},
					"name": "KEEPOUTGAANTFINAL",
					"description": "Import data from DS_Gaant_Hurry_Src"
				},
				{
					"dataset": {
						"referenceName": "DS_Gaant_Hurry_Src",
						"type": "DatasetReference"
					},
					"name": "BLOCKWORKGAANTFINAL",
					"description": "Import data from DS_Gaant_Hurry_Src"
				},
				{
					"dataset": {
						"referenceName": "DS_Gaant_Hurry_Src",
						"type": "DatasetReference"
					},
					"name": "BALUSTRADEWORKSGAANTFINAL",
					"description": "Import data from DS_Gaant_Hurry_Src"
				},
				{
					"dataset": {
						"referenceName": "DS_Gaant_Hurry_Src",
						"type": "DatasetReference"
					},
					"name": "STRUCTUREGAANTFINAL",
					"description": "Import data from DS_Gaant_Hurry_Src"
				},
				{
					"dataset": {
						"referenceName": "DS_Gaant_Hurry_Src",
						"type": "DatasetReference"
					},
					"name": "MILESTONEMAINTABLEActual"
				},
				{
					"dataset": {
						"referenceName": "DS_Gaant_Hurry_Src",
						"type": "DatasetReference"
					},
					"name": "MILESTONEMAINTABLEPlan1",
					"description": "Add data to MILESTONE_MAIN_TABLE_Plan"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Gaant_Hurry_ALL",
						"type": "DatasetReference"
					},
					"name": "AutualandPlanSInk"
				}
			],
			"transformations": [
				{
					"name": "unionfacttables"
				},
				{
					"name": "addActivityMapping"
				},
				{
					"name": "selectListforMILESTONEMAINTABLEPlan"
				},
				{
					"name": "addLegendPlan"
				},
				{
					"name": "Actualjoinwithforecast"
				},
				{
					"name": "select3"
				},
				{
					"name": "AddAchivedtoActuals"
				},
				{
					"name": "select4"
				},
				{
					"name": "addLegendActuals"
				},
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     MAX_ID as integer (0)",
				"}",
				"source(output(",
				"          Project_Identifier as string,",
				"          Type_of_work as string,",
				"          SUM_ALL as decimal(38,0),",
				"          Source_Table as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT  a.Project_Identifier,a.Type_of_work,a.SUM_ALL, \\'PLN_DRYAREA_FACT\\' AS Source_Table\\nfrom(\\nSELECT      DAR.Project_Identifier,\\n            DAR.Type_of_work,\\n            DENSE_RANK() OVER(PARTITION BY DAR.Project_Identifier ORDER BY DAR.tower) AS RANKER,\\n            SUM(DAR.value) AS SUM_ALL\\nFROM (\\nSELECT FPD.Project_Identifier, FPD.tower,\\n       FPD.[Level_ID],FPD.Flat,\\n       FPD.sclicer,CAST(REPLACE(FPD.value,\\'%\\',\\'\\') AS DECIMAL) AS value,\\n       FPD.Type_of_work,FPD.ACTIVITY_ID\\n    FROM [DWH].[PLN_DRYAREA_FACT] FPD\\n    WHERE LOWER(FPD.Type_of_work) IN (\\'Plaster\\',\\'Screed\\',\\'Floor Tile\\',\\'FC Framing\\', \\'FC Boarding with Joint Taping\\',\\n                                        \\'Floor Tiling\\')\\n    AND (FPD.value LIKE \\'1%\\' OR FPD.value LIKE \\'2%\\' OR FPD.value LIKE \\'3%\\' OR FPD.value LIKE \\'4%\\' OR FPD.value LIKE \\'5%\\' \\n     OR FPD.value LIKE \\'6%\\' OR FPD.value LIKE \\'7%\\' OR FPD.value LIKE \\'8%\\' OR FPD.value LIKE \\'9%\\'\\n                )) DAR  GROUP BY Project_Identifier,Type_of_work, DAR.tower) a',",
				"     format: 'query',",
				"     staged: true) ~> DRYAREAGAANTFINAL",
				"source(output(",
				"          Project_Identifier as string,",
				"          Type_of_work as string,",
				"          SUM_ALL as decimal(38,0),",
				"          Source_Table as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT          WAR.Project_Identifier,\\n                WAR.Type_of_work,\\n                SUM(WAR.value) AS SUM_ALL,\\n                    \\'PLN_WETAREA_FACT\\' AS Source_Table\\nFROM (\\nSELECT \\n                WPD.Project_Identifier,\\n                WPD.tower,\\n                WPD.[Level_ID],\\n                WPD.Flat,\\n                WPD.sclicer,\\n                CAST(REPLACE(WPD.value,\\'%\\',\\'\\') AS DECIMAL) AS value,\\n                WPD.Type_of_work,\\n                WPD.ACTIVITY_ID\\n            FROM [DWH].[PLN_WETAREA_FACT] WPD \\n            WHERE\\n                LOWER(WPD.Type_of_work) IN (\\n                                            \\'Wet Area Screed\\',\\n                                            \\'Wet Area MEP H/L Boarding Clearance\\',\\n                                            \\'Wall tile bottom Tile\\',\\n                                            \\'Wet Area FC Framing\\',\\n                                            \\'FC Boarding & Joint Taping\\',\\n                                            \\'Floor Tile\\',\\n                                            \\'Wet Area Final Fixtures Installation\\',\\n                                            \\'Vanity Cabinet\\'\\n                                            )\\n                AND (WPD.value LIKE \\'1%\\'\\n                    OR WPD.value LIKE \\'2%\\'\\n                    OR WPD.value LIKE \\'3%\\'\\n                    OR WPD.value LIKE \\'4%\\'\\n                    OR WPD.value LIKE \\'5%\\'\\n                    OR WPD.value LIKE \\'6%\\'\\n                    OR WPD.value LIKE \\'7%\\'\\n                    OR WPD.value LIKE \\'8%\\'\\n                    OR WPD.value LIKE \\'9%\\'\\n                    ) \\n) WAR\\nGROUP BY Project_Identifier,Type_of_work\\n',",
				"     format: 'query',",
				"     staged: true) ~> WETAREAGAANTFINAL",
				"source(output(",
				"          Project_Identifier as string,",
				"          Type_of_work as string,",
				"          SUM_ALL as decimal(38,0),",
				"          Source_Table as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT \\n                CAR.Project_Identifier,\\n                CAR.Type_of_work,\\n                SUM(CAR.value) AS SUM_ALL,\\n                    \\'PLN_CORRIDOR_FACT\\' AS Source_Table\\nFROM (\\nSELECT \\n            FPC.Project_Identifier,\\n            FPC.tower,\\n            FPC.[Level_ID],\\n            --FPC.sclicer,\\n            CAST(REPLACE(FPC.value,\\'%\\',\\'\\') AS DECIMAL) AS value,\\n            FPC.Type_of_work,\\n            FPC.ACTIVITY_ID\\n        FROM [DWH].[PLN_CORRIDOR_FACT] FPC \\n        WHERE\\n            LOWER(FPC.Type_of_work) IN (\\n                                        \\'CORRIDOR Floor Tile\\',\\n                                        \\'CORRIDOR Wall Tile\\',\\n                                        \\'CORRIDOR FC Boarding\\'\\n                                        )\\n            AND (FPC.value LIKE \\'1%\\'\\n                OR FPC.value LIKE \\'2%\\'\\n                OR FPC.value LIKE \\'3%\\'\\n                OR FPC.value LIKE \\'4%\\'\\n                OR FPC.value LIKE \\'5%\\'\\n                OR FPC.value LIKE \\'6%\\'\\n                OR FPC.value LIKE \\'7%\\'\\n                OR FPC.value LIKE \\'8%\\'\\n                OR FPC.value LIKE \\'9%\\'\\n                ) \\n) CAR\\nGROUP BY Project_Identifier,Type_of_work\\n',",
				"     format: 'query',",
				"     staged: true) ~> CORRIDORGAANTFINAL",
				"source(output(",
				"          Project_Identifier as string,",
				"          Type_of_work as string,",
				"          SUM_ALL as decimal(38,0),",
				"          Source_Table as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT \\n                KAR.Project_Identifier,\\n                KAR.Type_of_work,\\n                SUM(KAR.value) AS SUM_ALL,\\n                    \\'PLN_KITCHENAREA_FACT\\' AS Source_Table\\nFROM (\\nSELECT \\n                FPK.Project_Identifier,\\n                FPK.tower,\\n                FPK.[Level_ID],\\n                FPK.Flat,\\n               -- FPK.sclicer,\\n                CAST(REPLACE(CASE WHEN FPK.value= \\'#N/A\\' THEN NULL ELSE FPK.value END ,\\'%\\',\\'\\') AS DECIMAL) AS value,\\n                FPK.Type_of_work,\\n                FPK.ACTIVITY_ID\\n            FROM [DWH].[PLN_KITCHENAREA_FACT] FPK \\n            WHERE\\n                LOWER(FPK.Type_of_work) IN (\\n                                            \\'Kitchen Appliances\\'\\n                                            )\\n                AND (FPK.value LIKE \\'1%\\'\\n                    OR FPK.value LIKE \\'2%\\'\\n                    OR FPK.value LIKE \\'3%\\'\\n                    OR FPK.value LIKE \\'4%\\'\\n                    OR FPK.value LIKE \\'5%\\'\\n                    OR FPK.value LIKE \\'6%\\'\\n                    OR FPK.value LIKE \\'7%\\'\\n                    OR FPK.value LIKE \\'8%\\'\\n                    OR FPK.value LIKE \\'9%\\'\\n                    )\\n) KAR\\nGROUP BY Project_Identifier,Type_of_work\\n',",
				"     format: 'query',",
				"     staged: true) ~> KITCHENGAANTFINAL",
				"source(output(",
				"          Project_Identifier as string,",
				"          Type_of_work as string,",
				"          SUM_ALL as decimal(38,0),",
				"          Source_Table as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT \\n                BAR.Project_Identifier,\\n                BAR.Type_of_work,\\n                SUM(BAR.value) AS SUM_ALL,\\n                    \\'PLN_BALCONYAREA_FACT\\' AS Source_Table\\nFROM (\\nSELECT \\n                FPB.Project_Identifier,\\n                FPB.tower,\\n                FPB.[Level_ID],\\n                FPB.Flat,\\n                --FPB.sclicer,\\n                CAST(REPLACE(FPB.value,\\'%\\',\\'\\') AS DECIMAL) AS value,\\n                FPB.Type_of_work,\\n                FPB.ACTIVITY_ID\\n            FROM [DWH].[PLN_BALCONYAREA_FACT] FPB \\n            WHERE\\n                LOWER(FPB.Type_of_work) IN (\\n                                            \\'EIFS Installation\\'\\n                                            )\\n                AND (FPB.value LIKE \\'1%\\'\\n                    OR FPB.value LIKE \\'2%\\'\\n                    OR FPB.value LIKE \\'3%\\'\\n                    OR FPB.value LIKE \\'4%\\'\\n                    OR FPB.value LIKE \\'5%\\'\\n                    OR FPB.value LIKE \\'6%\\'\\n                    OR FPB.value LIKE \\'7%\\'\\n                    OR FPB.value LIKE \\'8%\\'\\n                    OR FPB.value LIKE \\'9%\\'\\n                    )\\n) BAR\\nGROUP BY Project_Identifier,Type_of_work\\n',",
				"     format: 'query',",
				"     staged: true) ~> BALCONYGAANTFINAL",
				"source(output(",
				"          Project_Identifier as string,",
				"          Type_of_work as string,",
				"          SUM_ALL as decimal(38,2),",
				"          Source_Table as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT \\n                SGS.Project_Identifier,\\n                \\'Sliding Door\\' AS Type_of_work,\\n                SUM(Multiply_Factor*SUM_ALL) AS SUM_ALL,\\n                \\'PLN_DRYAREA_FACT\\' AS Source_Table\\nFROM (\\nSELECT \\n                SDR.Project_Identifier,\\n                SDR.Type_of_work,\\n                    CASE \\n                    WHEN Type_of_work = \\'Sliding Door Box Installation\\'     THEN 0.1\\n                    WHEN Type_of_work = \\'Sliding Door Frame Installation\\'     THEN 0.2\\n                    WHEN Type_of_work = \\'Sliding Door Glass Installation\\'     THEN 0.45\\n                    WHEN Type_of_work = \\'Sliding Door Internal Silicone\\'     THEN 0.1\\n                    WHEN Type_of_work = \\'Sliding Door Alignment\\'             THEN 0.05\\n                    WHEN Type_of_work = \\'Sliding Door External Silicone\\'     THEN 0.1\\n                END AS Multiply_Factor,\\n                SUM(SDR.value) AS SUM_ALL\\nFROM (\\nSELECT \\n            FPD.Project_Identifier,\\n            FPD.tower,\\n            FPD.[Level_ID],\\n            FPD.Flat,\\n            --FPD.sclicer,\\n            CAST(REPLACE(FPD.value,\\'%\\',\\'\\') AS DECIMAL) AS value,\\n            FPD.Type_of_work,\\n            FPD.ACTIVITY_ID\\n        FROM [DWH].[PLN_DRYAREA_FACT] FPD \\n        WHERE\\n            LOWER(FPD.Type_of_work) IN (\\n                                        \\'Sliding Door Box Installation\\',\\n                                        \\'Sliding Door Frame Installation\\',\\n                                        \\'Sliding Door Glass Installation\\',\\n                                        \\'Sliding Door Internal Silicone\\',\\n                                        \\'Sliding Door Alignment\\',\\n                                        \\'Sliding Door External Silicone\\'\\n                                        )\\n            AND (FPD.value LIKE \\'1%\\'\\n                OR FPD.value LIKE \\'2%\\'\\n                OR FPD.value LIKE \\'3%\\'\\n                OR FPD.value LIKE \\'4%\\'\\n                OR FPD.value LIKE \\'5%\\'\\n                OR FPD.value LIKE \\'6%\\'\\n                OR FPD.value LIKE \\'7%\\'\\n                OR FPD.value LIKE \\'8%\\'\\n                OR FPD.value LIKE \\'9%\\'\\n                )\\n) SDR\\nGROUP BY Project_Identifier,Type_of_work\\n)SGS\\nGROUP BY Project_Identifier',",
				"     format: 'query',",
				"     staged: true) ~> SLIDINGDOORGAANTFINAL",
				"source(output(",
				"          Project_Identifier as string,",
				"          Type_of_work as string,",
				"          SUM_ALL as decimal(38,2),",
				"          Source_Table as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT \\n                SGS.Project_Identifier,\\n                \\'Kitchen Cabinet\\' AS Type_of_work,\\n                SUM(Multiply_Factor*SUM_ALL) AS SUM_ALL,\\n                \\'PLN_KITCHENAREA_FACT\\' AS Source_Table\\nFROM (\\nSELECT \\n                SDR.Project_Identifier,\\n                SDR.Type_of_work,\\n                SUM(SDR.value) AS SUM_ALL,\\n                    CASE \\n                    WHEN Type_of_work = \\'Kitchen Cabinet\\'                 THEN 0.5\\n                    WHEN Type_of_work = \\'Kitchen Counter Plywood\\'         THEN 0.1\\n                    WHEN Type_of_work = \\'Kitchen Counter Top\\'             THEN 0.2\\n                    WHEN Type_of_work = \\'Kitchen Counter Top Skirting\\'     THEN 0.1\\n                    WHEN Type_of_work = \\'Kitchen Cabinet Grouting\\'         THEN 0.05\\n                    WHEN Type_of_work = \\'Kitchen Cabinet Silicone\\'         THEN 0.05\\n                END AS Multiply_Factor\\nFROM (\\nSELECT \\n            FPK.Project_Identifier,\\n            FPK.tower,\\n            FPK.[Level_ID],\\n            FPK.Flat,\\n           -- FPK.sclicer,\\n            CAST(REPLACE(FPK.value,\\'%\\',\\'\\') AS DECIMAL) AS value,\\n            FPK.Type_of_work,\\n            FPK.ACTIVITY_ID\\n        FROM [DWH].[PLN_KITCHENAREA_FACT] FPK \\n        WHERE\\n            LOWER(FPK.Type_of_work) IN (\\n                                        \\'Kitchen Cabinet\\',\\n                                        \\'Kitchen Counter Plywood\\',\\n                                        \\'Kitchen Counter Top\\',\\n                                        \\'Kitchen Counter Top Skirting\\',\\n                                        \\'Kitchen Cabinet Grouting\\',\\n                                        \\'Kitchen Cabinet Silicone\\'\\n                                        )\\n            AND (FPK.value LIKE \\'1%\\'\\n                OR FPK.value LIKE \\'2%\\'\\n                OR FPK.value LIKE \\'3%\\'\\n                OR FPK.value LIKE \\'4%\\'\\n                OR FPK.value LIKE \\'5%\\'\\n                OR FPK.value LIKE \\'6%\\'\\n                OR FPK.value LIKE \\'7%\\'\\n                OR FPK.value LIKE \\'8%\\'\\n                OR FPK.value LIKE \\'9%\\'\\n                )\\n) SDR\\nGROUP BY Project_Identifier,Type_of_work\\n)SGS\\nGROUP BY Project_Identifier\\n',",
				"     format: 'query',",
				"     staged: true) ~> KITCHENCABINETGAANTFINAL",
				"source(output(",
				"          Project_Identifier as string,",
				"          Type_of_work as string,",
				"          SUM_ALL as decimal(38,0),",
				"          Source_Table as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT \\n                KAA.Project_Identifier,\\n                KAA.Type_of_work,\\n                (KAA.SUM_ALL*100) AS SUM_ALL,\\n                \\'PLN_KEEPOUT_FACT\\' AS Source_Table\\nFROM (\\nSELECT \\n                KAR.Project_Identifier,\\n                KAR.Type_of_work,\\n                SUM(KAR.value) AS SUM_ALL\\nFROM (\\nSELECT \\n                FPK.Project_Identifier,\\n                FPK.tower,\\n                --FPK.[Level_ID],\\n                FPK.Flat,\\n                \\'Keep Out\\' AS sclicer,\\n                CAST(REPLACE(FPK.value,\\'%\\',\\'\\') AS DECIMAL) AS value,\\n                FPK.Type_of_work,\\n                FPK.ACTIVITY_ID\\n            FROM [DWH].[PLN_KEEPOUT_FACT] FPK \\n            WHERE\\n                LOWER(FPK.Type_of_work) IN (\\n                                            \\'Bathroom Stamp - Civil (L9)\\',\\n                                            \\'Kitchen Stamp - Civil (I9)\\',\\n                                            \\'Keep Out (QT)\\'\\n                                            )\\n                AND (FPK.value LIKE \\'1%\\'\\n                    OR FPK.value LIKE \\'2%\\'\\n                    OR FPK.value LIKE \\'3%\\'\\n                    OR FPK.value LIKE \\'4%\\'\\n                    OR FPK.value LIKE \\'5%\\'\\n                    OR FPK.value LIKE \\'6%\\'\\n                    OR FPK.value LIKE \\'7%\\'\\n                    OR FPK.value LIKE \\'8%\\'\\n                    OR FPK.value LIKE \\'9%\\'\\n                    )\\n) KAR\\nGROUP BY Project_Identifier,Type_of_work,tower,ACTIVITY_ID\\n)KAA\\nGROUP BY Project_Identifier,Type_of_work,SUM_ALL\\n',",
				"     format: 'query',",
				"     staged: true) ~> KEEPOUTGAANTFINAL",
				"source(output(",
				"          Project_Identifier as string,",
				"          Type_of_work as string,",
				"          SUM_ALL as decimal(38,1),",
				"          Source_Table as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT \\n                BGS.Project_Identifier,\\n                \\'Blockwork\\' AS Type_of_work,\\n                SUM(BGS.Multiply_Factor*BGS.SUM_ALL) AS SUM_ALL,\\n                \\'PLN_DRYAREA_FACT\\' AS Source_Table\\nFROM (\\nSELECT \\n                BWR.Project_Identifier,\\n                BWR.Type_of_work,\\n                SUM(BWR.value) AS SUM_ALL,\\n                    CASE \\n                    WHEN Type_of_work = \\'Blockwork First Layer\\'     THEN 0.2\\n                    WHEN Type_of_work = \\'Blockwork\\'                 THEN 0.4\\n                    WHEN Type_of_work = \\'GI Lintel\\'                 THEN 0.1\\n                    WHEN Type_of_work = \\'Above Lintel Block Work\\'     THEN 0.3\\n                END AS Multiply_Factor\\nFROM (\\nSELECT \\n            FPD.Project_Identifier,\\n            FPD.tower,\\n            FPD.[Level_ID],\\n            FPD.Flat,\\n            --FPD.sclicer,\\n            CAST(REPLACE(FPD.value,\\'%\\',\\'\\') AS DECIMAL) AS value,\\n            FPD.Type_of_work,\\n            FPD.ACTIVITY_ID\\n        FROM [DWH].[PLN_DRYAREA_FACT] FPD \\n        WHERE\\n            LOWER(FPD.Type_of_work) IN (\\'Blockwork First Layer\\',\\'Blockwork\\',\\'GI Lintel\\',\\'Above Lintel Block Work\\')\\n            AND (FPD.value LIKE \\'1%\\'OR FPD.value LIKE \\'2%\\'OR FPD.value LIKE \\'3%\\'OR FPD.value LIKE \\'4%\\'OR FPD.value LIKE \\'5%\\' OR FPD.value LIKE \\'6%\\'OR FPD.value LIKE \\'7%\\'OR FPD.value LIKE \\'8%\\'\\n                OR FPD.value LIKE \\'9%\\' )\\n) BWR\\nGROUP BY Project_Identifier,Type_of_work\\n)BGS\\nGROUP BY Project_Identifier\\n\\n',",
				"     format: 'query',",
				"     staged: true) ~> BLOCKWORKGAANTFINAL",
				"source(output(",
				"          Project_Identifier as string,",
				"          Type_of_work as string,",
				"          SUM_ALL as decimal(38,1),",
				"          Source_Table as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT \\n                BGS.Project_Identifier,\\n                \\'Balustrade Works\\' AS Type_of_work,\\n                SUM(BGS.Multiply_Factor*BGS.SUM_ALL) AS SUM_ALL,\\n                \\'PLN_DRYAREA_FACT\\' AS Source_Table\\nFROM (\\nSELECT \\n                BWR.Project_Identifier,\\n                BWR.Type_of_work,\\n                SUM(BWR.value) AS SUM_ALL,\\n                    CASE \\n                    WHEN Type_of_work = \\'F channel Installation\\'             THEN 0.2\\n                    WHEN Type_of_work = \\'Top Rail Bracket Installation\\'        THEN 0.2\\n                    WHEN Type_of_work = \\'Balustrade Glass Installation\\'        THEN 0.2\\n                    WHEN Type_of_work = \\'Balustrade Top Rail\\'                 THEN 0.2\\n                    WHEN Type_of_work = \\'Balustrade-Internal Flashing\\'        THEN 0.2\\n                END AS Multiply_Factor\\nFROM (\\nSELECT \\n            FPB.Project_Identifier,\\n            FPB.tower,\\n            FPB.[Level_ID],\\n            FPB.Flat,\\n            --FPB.sclicer,\\n            CAST(REPLACE(FPB.value,\\'%\\',\\'\\') AS DECIMAL) AS value,\\n            FPB.Type_of_work,\\n            FPB.ACTIVITY_ID\\n        FROM [DWH].[PLN_DRYAREA_FACT] FPB \\n        WHERE\\n            LOWER(FPB.Type_of_work) IN (\\'F channel Installation\\',\\'Top Rail Bracket Installation\\',\\'Balustrade Glass Installation\\',\\'Balustrade Top Rail\\',\\'Balustrade-Internal Flashing\\')\\n            AND (FPB.value LIKE \\'1%\\'OR FPB.value LIKE \\'2%\\'OR FPB.value LIKE \\'3%\\'OR FPB.value LIKE \\'4%\\'OR FPB.value LIKE \\'5%\\'OR FPB.value LIKE \\'6%\\'OR FPB.value LIKE \\'7%\\'OR FPB.value LIKE \\'8%\\'OR FPB.value LIKE \\'9%\\')\\n) BWR\\nGROUP BY Project_Identifier,Type_of_work\\n)BGS\\nGROUP BY Project_Identifier\\n',",
				"     format: 'query',",
				"     staged: true) ~> BALUSTRADEWORKSGAANTFINAL",
				"source(output(",
				"          Project_Identifier as string,",
				"          Type_of_work as string,",
				"          SUM_ALL as decimal(18,2),",
				"          Source_Table as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: ' SELECT SGF.Project_Identifier,SGF.Type_of_work,(SGF.SUM_ALL*P.FLAT_COUNT)*100 AS SUM_ALL,SGF.Source_Table\\nFROM (SELECT Project_Identifier , Area AS Type_of_work, Actuals AS SUM_ALL,\\'F_PLN_STRUCTURES\\' AS Source_Table\\nFROM (SELECT GSCU.*, \\'Grade Slab\\' AS Area, GSCM.GS_COMPLETED,\\nCASE WHEN GS_Count=0 THEN NULL ELSE CAST((GSCM.GS_COMPLETED/GS_Count) AS DECIMAL(3,2)) END AS Actuals\\nFROM  (SELECT P.Project_Identifier, COUNT(*) AS GS_Count FROM [STG].[O_PLN_STRUCTURES_POUR_MAP_STG] OSPM\\n       LEFT JOIN [DWH].[PLN_PROJECTS_DIM] P  ON OSPM.project_id  = P.Project_Identifier\\n       WHERE LOWER(OSPM.type_of_pour) LIKE \\'slab%\\' GROUP BY P.Project_Identifier ) GSCU \\n   LEFT JOIN (SELECT FPS.Project_Identifier,COUNT(FPS.Level) AS GS_COMPLETED\\n   FROM [DWH].[PLN_STRUCTURE_FACT] FPS WHERE LOWER(FPS.Level) LIKE \\'%grade slab%\\' AND value IS NOT NULL\\n   GROUP BY FPS.Project_Identifier) AS GSCM ON GSCU.Project_Identifier = GSCM.Project_Identifier) GRADE_SLAB_FINAL UNION ALL\\nSELECT Project_Identifier ,Area AS Type_of_work, Actuals AS SUM_ALL,\\'F_PLN_STRUCTURES\\' AS Source_Table\\nFROM (SELECT CV.Project_Identifier,CV.Area,CV.Value,A.Total_Completed, case when CV.Value =0 then null\\nelse FORMAT(CAST(A.Total_Completed AS DECIMAL(7,2) )/ CAST(CV.Value AS DECIMAL(7,2)),\\'N2\\') end as Actuals\\nFROM (SELECT P.Project_Identifier, Virtual_table.* FROM [DWH].[PLN_PROJECTS_DIM] P\\n     CROSS APPLY (SELECT \\'Podium\\',(P.Total_Podiums*P.Podium_Slab) UNION ALL SELECT \\'Typical Floor\\',\\n    (P.Total_Typical_Floor*P.Typical_Floor_Slab)) AS Virtual_table(Area,[Value])\\n    WHERE [Value] IS NOT NULL) CV  LEFT JOIN\\n     (SELECT FPS.Project_Identifier,OPTPM.Area ,COUNT(FPS.Pour) Total_Completed \\n     FROM [DWH].[PLN_STRUCTURE_FACT]  FPS LEFT JOIN [STG].[O_PLN_TOWER_PODIUM_MAP_STG] OPTPM\\n     ON FPS.Project_Identifier = OPTPM.Project AND FPS.Level = OPTPM.Level\\n     WHERE FPS.Pour LIKE \\'slab%\\' AND LOWER(TRIM(FPS.Level))!= \\'grade slab\\'\\n     GROUP BY FPS.Project_Identifier,OPTPM.Area) A \\n    ON CV.Project_Identifier = A.Project_Identifier AND CV.Area = A.Area)OTHER_SLABS_FINAL) SGF \\nLEFT JOIN [DWH].[PLN_PROJECTS_DIM] P \\n    ON SGF.Project_Identifier = P.Project_Identifier',",
				"     format: 'query',",
				"     staged: true) ~> STRUCTUREGAANTFINAL",
				"source(output(",
				"          Upload_Time as date,",
				"          Project_Identifier as string,",
				"          Group as string,",
				"          Activity_Description as string,",
				"          Actual_Start_Date as date,",
				"          Actual_Finish_Date as date,",
				"          Total_days as integer,",
				"          Days_elapsed as integer,",
				"          Source_Templet as string,",
				"          Sort_Group as integer,",
				"          Sort_Activity as integer,",
				"          Activity_New as string,",
				"          FLAT_COUNT as integer,",
				"          Actual_Percentage as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT DC.Upload_Time,  P.Project_Identifier, DC.[Group], DC.[Activity_Description],\\ncase when Actual_Start_Date = \\'1900-01-01\\' then NULL else DC.[Actual_Start_Date] end as Actual_Start_Date,\\ncase when Actual_Finish_Date =\\'1900-01-01\\' then NULL else DC.[Actual_Finish_Date] end as Actual_Finish_Date,\\nDATEDIFF(DAY, DC.[Actual_Start_Date],DC.[Actual_Finish_Date]) AS Total_days,\\n   DATEDIFF(DAY, DC.[Actual_Start_Date],GETDATE()) AS Days_elapsed,\\n   CASE\\n--             For Manual Entry\\n   WHEN DC.[Group] = \\'Structural Works\\' AND DC.[Activity_Description] IN (\\'Pile Cap\\',\\'Pile\\')  THEN \\'MANUAL_ENTRY\\'\\n   WHEN DC.[Group] = \\'External Elevation\\' AND DC.[Activity_Description] IN (\\'ACP Works\\')  THEN \\'MANUAL_ENTRY\\'\\n   WHEN DC.[Group] = \\'Other & Specialist\\' AND DC.[Activity_Description] IN (\\'Lift - CTU\\',\\'Lift - Balance passenger lifts\\',\\n   \\'Swimming Pool\\',\\'Kids Play Area/ Outdoor Play Area\\',\\'Changing Rooms / GYM\\',\\'Wooden Decking\\')  THEN \\'MANUAL_ENTRY\\'\\n   WHEN DC.[Group] = \\'Authority Approvals\\' AND DC.[Activity_Description] IN (\\'Transformer payment\\', \\'LV Inspection & Approval\\',\\n   \\'BCC - Inspection & Approval\\',\\'Power on\\') THEN \\'MANUAL_ENTRY\\'\\n--         For Structures\\n   WHEN DC.[Group] = \\'Structural Works\\' AND DC.[Activity_Description] IN (\\'Grade Slab\\',\\'Podium Slabs\\',\\'Typical Floor Slabs\\')\\n   THEN \\'PLN_STRUCTURE_FACT\\' WHEN DC.[Group] = \\'Structural Works\\' AND DC.[Activity_Description] NOT IN\\n   (\\'Pile\\',\\'Pile Cap\\',\\'Grade Slab\\',\\'Podium Slabs\\',\\'Typical Floor Slabs\\')  THEN \\'TBD\\'\\n--         For Dry Area\\n   WHEN DC.[Group] = \\'Masonary Works\\' AND DC.[Activity_Description] IN (\\'Blockworks\\')  THEN \\'PLN_DRYAREA_FACT\\' WHEN \\n   DC.[Group] = \\'Finishes - Dry Area\\' THEN \\'PLN_DRYAREA_FACT\\'\\n   WHEN DC.[Group] = \\'External Elevation\\' AND DC.[Activity_Description] IN (\\'Sliding Door\\')  THEN \\'PLN_DRYAREA_FACT\\'\\n--         For Wet Area    \\n   WHEN DC.[Group] = \\'Finishes - Wet Area\\' THEN \\'PLN_WETAREA_FACT\\'\\n   WHEN DC.[Group] = \\'Joinery Works\\' AND DC.[Activity_Description] IN (\\'Vanity Cabinet\\')  THEN \\'PLN_WETAREA_FACT\\'\\n--         For Corridor Area\\n   WHEN DC.[Group] = \\'Finishes - Corridor\\' THEN \\'PLN_CORRIDOR_FACT\\'\\n--         For Balcony Area\\n   WHEN DC.[Group] = \\'External Elevation\\' AND DC.[Activity_Description] IN (\\'EIFS\\',\\'Balustrade Works\\')  THEN \\'PLN_BALCONYAREA_FACT\\'\\n--         For Kitchen Area\\n   WHEN DC.[Group] = \\'Other & Specialist\\' AND DC.[Activity_Description] IN (\\'Kitchen Appliances\\')  THEN \\'PLN_KITCHENAREA_FACT\\'\\n   WHEN DC.[Group] = \\'Joinery Works\\' AND DC.[Activity_Description] IN (\\'Kitchen Cabinet\\')  THEN \\'PLN_KITCHENAREA_FACT\\'\\n--         For KeepOut Area\\n   WHEN DC.[Group] = \\'Keepout\\' THEN \\'PLN_KEEPOUT_FACT\\'\\n--         Yet to be Decided\\n   WHEN DC.[Group] = \\'Authority Approvals\\' AND DC.[Activity_Description] NOT IN (\\'Transformer payment\\',\\n   \\'LV Inspection & Approval\\',\\'BCC - Inspection & Approval\\',\\'Power on\\') THEN \\'TBD\\'\\n   WHEN DC.[Group] = \\'External Elevation\\' AND DC.[Activity_Description] NOT IN (\\'Sliding Door\\',\\'EIFS\\',\\'Balustrade Works\\',\\'ACP Works\\')  THEN \\'TBD\\'\\n   WHEN DC.[Group] = \\'Other & Specialist\\' AND DC.[Activity_Description] NOT IN (\\'Kitchen Appliances\\',\\n   \\'Lift - CTU\\',\\'Lift - Balance passenger lifts\\',\\'Swimming Pool\\',\\'Kids Play Area/ Outdoor Play Area\\',\\n    \\'Changing Rooms / GYM\\',\\'Wooden Decking\\')  THEN \\'TBD\\'\\n   WHEN DC.[Group] = \\'Joinery Works\\' AND DC.[Activity_Description] NOT IN (\\'Vanity Cabinet\\',\\'Kitchen Cabinet\\')  THEN \\'TBD\\'\\n   ELSE \\'MISSING\\' END AS Source_Templet, OLMP.Sort_Group, OLMP.Sort_Activity, OLMP.Activity_New, P.FLAT_COUNT,\\n        DC.[Actual_Percentage]\\nFROM (SELECT CAST(OPM.upload_time AS DATE) AS Upload_Time, OPM.project_id, OPM.[Group], OPM.Activity_Description,\\nCASE WHEN OPM.Actual_Forecast_Start IS NULL OR TRIM(OPM.Actual_Forecast_Start) IN (\\'\\',\\'-\\',\\' \\') THEN CAST(REPLACE(OPM.Baseline_Start,\\'-\\',\\'/\\') AS DATE)\\n        ELSE CAST(REPLACE(OPM.Actual_Forecast_Start,\\'-\\',\\'/\\') AS DATE)  END AS Actual_Start_Date,\\n    CASE WHEN OPM.Actual_Forecast_Finish IS NULL OR TRIM(OPM.Actual_Forecast_Finish ) IN (\\'\\',\\'-\\',\\' \\') THEN CAST(REPLACE(OPM.Baseline_Finish,\\'-\\',\\'/\\') AS DATE)\\n        ELSE CAST(REPLACE(OPM.Actual_Forecast_Finish ,\\'-\\',\\'/\\') AS DATE)  END Actual_Finish_Date,\\n    DENSE_RANK() OVER( PARTITION BY OPM.project_id ORDER BY CAST(OPM.upload_time AS DATE) DESC) DENSERANK,\\n    OPM.Actual_Percentage FROM [STG].[O_PLN_MILESTONE_STG] OPM WHERE  (OPM.[Group] IS NOT NULL AND TRIM(OPM.[Group]) NOT IN (\\'\\') \\n     AND OPM.Activity_Description IS NOT NULL AND TRIM(OPM.Activity_Description) NOT IN (\\'\\'))) DC\\nLEFT JOIN [STG].[O_PLN_MILESTONE_MAP_STG] OLMP ON DC.[Group] = OLMP.[Group] AND DC.[Activity_Description] = OLMP.Activity\\nLEFT JOIN [DWH].[PLN_PROJECTS_DIM] P ON DC.project_id = P.Project_Identifier WHERE DC.DENSERANK = 1',",
				"     format: 'query',",
				"     staged: true) ~> MILESTONEMAINTABLEActual",
				"source(output(",
				"          Upload_Time as date,",
				"          Project_Identifier as string,",
				"          Group as string,",
				"          Activity_Description as string,",
				"          Baseline_Start_Date as date,",
				"          Baseline_Finish_Date as date,",
				"          Total_days as integer,",
				"          Days_elapsed as integer,",
				"          Completion_plan as integer,",
				"          Source_Templet as string,",
				"          Sort_Group as integer,",
				"          Sort_Activity as integer,",
				"          Activity_New as string,",
				"          FLAT_COUNT as integer,",
				"          Actual_Percentage as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT DC.Upload_Time,  P.Project_Identifier, DC.[Group], DC.[Activity_Description],  DC.[Baseline_Start_Date],\\n   DC.[Baseline_Finish_Date], DATEDIFF(DAY, DC.[Baseline_Start_Date],DC.[Baseline_Finish_Date]) AS Total_days,\\n   DATEDIFF(DAY, DC.[Baseline_Start_Date],GETDATE()) AS Days_elapsed,\\n   CASE WHEN DATEDIFF(DAY,DC.[Baseline_Finish_Date], DC.[Baseline_Start_Date]) = 0 THEN 0\\n   WHEN (DATEDIFF(DAY,GETDATE(), DC.[Baseline_Start_Date])/ DATEDIFF(DAY,DC.[Baseline_Finish_Date], DC.[Baseline_Start_Date])) < 1\\n   AND (DATEDIFF(DAY,GETDATE(), DC.[Baseline_Start_Date])/ DATEDIFF(DAY,DC.[Baseline_Finish_Date], DC.[Baseline_Start_Date])) > 0 \\n   THEN (DATEDIFF(DAY,GETDATE(), DC.[Baseline_Start_Date])/ DATEDIFF(DAY,DC.[Baseline_Finish_Date], DC.[Baseline_Start_Date]))\\n   WHEN (DATEDIFF(DAY,GETDATE(), DC.[Baseline_Start_Date])/ DATEDIFF(DAY,DC.[Baseline_Finish_Date], DC.[Baseline_Start_Date])) < 0 THEN 0\\n   ELSE 1 END AS Completion_plan,\\n   CASE\\n--             For Manual Entry\\n   WHEN DC.[Group] = \\'Structural Works\\' AND DC.[Activity_Description] IN (\\'Pile Cap\\',\\'Pile\\')  THEN \\'MANUAL_ENTRY\\'\\n   WHEN DC.[Group] = \\'External Elevation\\' AND DC.[Activity_Description] IN (\\'ACP Works\\')  THEN \\'MANUAL_ENTRY\\'\\n   WHEN DC.[Group] = \\'Other & Specialist\\' AND DC.[Activity_Description] IN (\\'Lift - CTU\\',\\'Lift - Balance passenger lifts\\',\\n   \\'Swimming Pool\\',\\'Kids Play Area/ Outdoor Play Area\\',\\'Changing Rooms / GYM\\',\\'Wooden Decking\\')  THEN \\'MANUAL_ENTRY\\'\\n   WHEN DC.[Group] = \\'Authority Approvals\\' AND DC.[Activity_Description] IN (\\'Transformer payment\\', \\'LV Inspection & Approval\\',\\n   \\'BCC - Inspection & Approval\\',\\'Power on\\') THEN \\'MANUAL_ENTRY\\'\\n--         For Structures\\n   WHEN DC.[Group] = \\'Structural Works\\' AND DC.[Activity_Description] IN (\\'Grade Slab\\',\\'Podium Slabs\\',\\'Typical Floor Slabs\\')\\n   THEN \\'PLN_STRUCTURE_FACT\\' WHEN DC.[Group] = \\'Structural Works\\' AND DC.[Activity_Description] NOT IN\\n   (\\'Pile\\',\\'Pile Cap\\',\\'Grade Slab\\',\\'Podium Slabs\\',\\'Typical Floor Slabs\\')  THEN \\'TBD\\'\\n--         For Dry Area\\n   WHEN DC.[Group] = \\'Masonary Works\\' AND DC.[Activity_Description] IN (\\'Blockworks\\')  THEN \\'PLN_DRYAREA_FACT\\' WHEN \\n   DC.[Group] = \\'Finishes - Dry Area\\' THEN \\'PLN_DRYAREA_FACT\\'\\n   WHEN DC.[Group] = \\'External Elevation\\' AND DC.[Activity_Description] IN (\\'Sliding Door\\')  THEN \\'PLN_DRYAREA_FACT\\'\\n--         For Wet Area    \\n   WHEN DC.[Group] = \\'Finishes - Wet Area\\' THEN \\'PLN_WETAREA_FACT\\'\\n   WHEN DC.[Group] = \\'Joinery Works\\' AND DC.[Activity_Description] IN (\\'Vanity Cabinet\\')  THEN \\'PLN_WETAREA_FACT\\'\\n--         For Corridor Area\\n   WHEN DC.[Group] = \\'Finishes - Corridor\\' THEN \\'PLN_CORRIDOR_FACT\\'\\n--         For Balcony Area\\n   WHEN DC.[Group] = \\'External Elevation\\' AND DC.[Activity_Description] IN (\\'EIFS\\',\\'Balustrade Works\\')  THEN \\'PLN_BALCONYAREA_FACT\\'\\n--         For Kitchen Area\\n   WHEN DC.[Group] = \\'Other & Specialist\\' AND DC.[Activity_Description] IN (\\'Kitchen Appliances\\')  THEN \\'PLN_KITCHENAREA_FACT\\'\\n   WHEN DC.[Group] = \\'Joinery Works\\' AND DC.[Activity_Description] IN (\\'Kitchen Cabinet\\')  THEN \\'PLN_KITCHENAREA_FACT\\'\\n--         For KeepOut Area\\n   WHEN DC.[Group] = \\'Keepout\\' THEN \\'PLN_KEEPOUT_FACT\\'\\n--         Yet to be Decided\\n   WHEN DC.[Group] = \\'Authority Approvals\\' AND DC.[Activity_Description] NOT IN (\\'Transformer payment\\',\\n   \\'LV Inspection & Approval\\',\\'BCC - Inspection & Approval\\',\\'Power on\\') THEN \\'TBD\\'\\n   WHEN DC.[Group] = \\'External Elevation\\' AND DC.[Activity_Description] NOT IN (\\'Sliding Door\\',\\'EIFS\\',\\'Balustrade Works\\',\\'ACP Works\\')  THEN \\'TBD\\'\\n   WHEN DC.[Group] = \\'Other & Specialist\\' AND DC.[Activity_Description] NOT IN (\\'Kitchen Appliances\\',\\n   \\'Lift - CTU\\',\\'Lift - Balance passenger lifts\\',\\'Swimming Pool\\',\\'Kids Play Area/ Outdoor Play Area\\',\\n    \\'Changing Rooms / GYM\\',\\'Wooden Decking\\')  THEN \\'TBD\\'\\n   WHEN DC.[Group] = \\'Joinery Works\\' AND DC.[Activity_Description] NOT IN (\\'Vanity Cabinet\\',\\'Kitchen Cabinet\\')  THEN \\'TBD\\'\\n   ELSE \\'MISSING\\' END AS Source_Templet, OLMP.Sort_Group, OLMP.Sort_Activity, OLMP.Activity_New, P.FLAT_COUNT,\\n        DC.[Actual_Percentage]\\n--INTO #MILESTONE_MAIN_TABLE_Plan\\nFROM (SELECT CAST(OPM.upload_time AS DATE) AS Upload_Time,OPM.project_id, OPM.[Group], OPM.[Activity_Description],\\n       -- REPLACE(OPM.[Baseline_Start],\\'-\\',\\'/\\') AS  [Baseline_Start_Date],\\n CAST(REPLACE(OPM.[Baseline_Start],\\'-\\',\\'/\\') AS DATE) AS  [Baseline_Start_Date],[Baseline_Start],[Baseline_Finish],\\n CAST(REPLACE(OPM.[Baseline_Finish],\\'-\\',\\'/\\') AS DATE) AS [Baseline_Finish_Date],\\n DENSE_RANK() OVER( PARTITION BY OPM.project_id ORDER BY CAST(OPM.upload_time AS DATE) DESC) DENSERANK, OPM.[Actual_Percentage]\\n FROM [STG].[O_PLN_MILESTONE_STG] OPM WHERE (OPM.[Group] IS NOT NULL AND TRIM(OPM.[Group]) NOT IN (\\'\\')\\n AND OPM.[Activity_Description] IS NOT NULL AND TRIM(OPM.[Activity_Description]) NOT IN (\\'\\')\\n AND OPM.[Baseline_Start] IS NOT NULL AND TRIM(OPM.[Baseline_Start]) NOT IN (\\'\\')\\n AND OPM.[Baseline_Finish] IS NOT NULL AND TRIM(OPM.[Baseline_Finish]) NOT IN (\\'\\'))) DC\\nLEFT JOIN [STG].[O_PLN_MILESTONE_MAP_STG] OLMP ON DC.[Group] = OLMP.[Group] AND DC.[Activity_Description] = OLMP.Activity\\nLEFT JOIN [DWH].[PLN_PROJECTS_DIM] P ON DC.project_id = P.Project_Identifier WHERE DC.DENSERANK = 1',",
				"     format: 'query',",
				"     staged: true) ~> MILESTONEMAINTABLEPlan1",
				"DRYAREAGAANTFINAL, WETAREAGAANTFINAL, CORRIDORGAANTFINAL, KITCHENGAANTFINAL, BALCONYGAANTFINAL, SLIDINGDOORGAANTFINAL, KITCHENCABINETGAANTFINAL, KEEPOUTGAANTFINAL, BLOCKWORKGAANTFINAL, BALUSTRADEWORKSGAANTFINAL, STRUCTUREGAANTFINAL union(byName: true)~> unionfacttables",
				"unionfacttables derive(Milestone_Activity_Map = case(     \r",
				"     trim(Type_of_work) == 'FC BOARDING WITH JOINT TAPING' && Source_Table == 'PLN_DRYAREA_FACT','False Ceiling - Boarding',\r",
				"     trim(Type_of_work) == 'Plaster' && Source_Table == 'PLN_DRYAREA_FACT','Plaster',\r",
				"     trim(Type_of_work) == 'Screed' && Source_Table == 'PLN_DRYAREA_FACT','Screed',\r",
				"     trim(Type_of_work) == 'Floor Tiling' && Source_Table == 'PLN_DRYAREA_FACT','Floor Tiles',\r",
				"     trim(Type_of_work) == 'FC Framing' && Source_Table == 'PLN_DRYAREA_FACT','False Ceiling - Framing',\r",
				"     trim(Type_of_work) == 'Kitchen Cabinet' && Source_Table == 'PLN_KITCHENAREA_FACT','Kitchen Cabinet',\r",
				"     trim(Type_of_work) == 'KITCHEN APPLIANCES' && Source_Table == 'PLN_KITCHENAREA_FACT','Kitchen Appliances',\r",
				"     trim(Type_of_work) == 'Sliding Door' && Source_Table == 'PLN_DRYAREA_FACT','Sliding Door',\r",
				"     trim(Type_of_work) == 'Blockwork' && Source_Table == 'PLN_DRYAREA_FACT','Blockwork',\r",
				"     trim(Type_of_work) == 'Balustrade Works' && Source_Table == 'PLN_DRYAREA_FACT','Balustrade Works',\r",
				"     trim(Type_of_work) == 'Floor Tile' && Source_Table == 'PLN_CORRIDOR_FACT','Floor Tiles',\r",
				"    trim(Type_of_work) == 'CORRIDOR FLOOR TILE' && Source_Table == 'PLN_CORRIDOR_FACT','Floor Tiles',\r",
				"     trim(Type_of_work) == 'Wall Tile'  && Source_Table == 'PLN_CORRIDOR_FACT','Wall Tiles',\r",
				"    trim(Type_of_work) == 'CORRIDOR WALL TILE'  && Source_Table == 'PLN_CORRIDOR_FACT','Wall Tiles',\r",
				"     trim(Type_of_work) == 'FC Boarding' && Source_Table == 'PLN_CORRIDOR_FACT','False Ceiling - Boarding',\r",
				"    trim(Type_of_work) == 'CORRIDOR FC BOARDING' && Source_Table == 'PLN_CORRIDOR_FACT','False Ceiling - Boarding',\r",
				"     trim(Type_of_work)  == 'WET AREA SCREED'&& Source_Table == 'PLN_WETAREA_FACT','Screed',\r",
				"     trim(Type_of_work)  == 'Wet Area MEP H/L Boarding Clearance'&& Source_Table == 'PLN_WETAREA_FACT','MEP High Lvl',\r",
				"     trim(Type_of_work)  == 'WALL TILE BOTTOM TILE'&& Source_Table == 'PLN_WETAREA_FACT','Wall Tiles',\r",
				"     trim(Type_of_work)  == 'WET AREA FC FRAMING'&& Source_Table == 'PLN_WETAREA_FACT','False Ceiling - Framing',\r",
				"     trim(Type_of_work)  == 'FC BOARDING & JOINT TAPING'&& Source_Table == 'PLN_WETAREA_FACT','False Ceiling - Boarding',\r",
				"     trim(Type_of_work)  == 'Floor Tile'&& Source_Table == 'PLN_WETAREA_FACT','Floor Tiles',\r",
				"     trim(Type_of_work)  == 'Wet Area Final Fixtures Installation'&& Source_Table == 'PLN_WETAREA_FACT','MEP Final Fix',\r",
				"     trim(Type_of_work)  == 'Vanity Cabinet'&& Source_Table == 'PLN_WETAREA_FACT','Vanity Cabinet',\r",
				"     trim(Type_of_work)  == 'EIFS INSTALLATION'&& Source_Table == 'PLN_BALCONYAREA_FACT','EIFS',\r",
				"     trim(Type_of_work)  == 'Keep Out (QT)'&& Source_Table == 'PLN_KEEPOUT_FACT','CAP^Q Unit QT Keep-out approvals',\r",
				"     trim(Type_of_work)  == 'Kitchen Stamp - Civil (I9)'&& Source_Table == 'PLN_KEEPOUT_FACT','CAP^Q (Stamp - I9) Kitchen Keep-',\r",
				"     trim(Type_of_work)  == 'Bathroom Stamp - Civil (L9)'&& Source_Table == 'PLN_KEEPOUT_FACT','CAP^Q (Stamp - L9) Bathroom Keep',\r",
				"     trim(Type_of_work)  == 'Podium'&& Source_Table == 'PLN_STRUCTURE_FACT','Podium Slabs',\r",
				"     trim(Type_of_work)  == 'Grade Slab'&& Source_Table == 'PLN_STRUCTURE_FACT','Grade Slab',\r",
				"     trim(Type_of_work)  == 'Typical Floor'&& Source_Table == 'PLN_STRUCTURE_FACT','Typical Floor Slabs'\r",
				"     )) ~> addActivityMapping",
				"MILESTONEMAINTABLEPlan1 select(mapColumn(",
				"          Upload_Time,",
				"          Project_Identifier,",
				"          Group,",
				"          Activity_Description,",
				"          Actual_Start_Date = Baseline_Start_Date,",
				"          Actual_Finish_Date = Baseline_Finish_Date,",
				"          Total_days,",
				"          Days_elapsed,",
				"          Actual_Achived = Completion_plan,",
				"          Source_Templet,",
				"          Sort_Group,",
				"          Sort_Activity,",
				"          Activity_New,",
				"          Actual_Percentage",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectListforMILESTONEMAINTABLEPlan",
				"selectListforMILESTONEMAINTABLEPlan derive(Legend = 'Plan',",
				"          Source_Table = Source_Templet) ~> addLegendPlan",
				"MILESTONEMAINTABLEActual, addActivityMapping join(MILESTONEMAINTABLEActual@Project_Identifier == unionfacttables@Project_Identifier",
				"     && Source_Templet == Source_Table",
				"     && Activity_Description == Milestone_Activity_Map,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> Actualjoinwithforecast",
				"Actualjoinwithforecast select(mapColumn(",
				"          Upload_Time,",
				"          Project_Identifier = MILESTONEMAINTABLEActual@Project_Identifier,",
				"          Group,",
				"          Activity_Description,",
				"          Actual_Start_Date,",
				"          Actual_Finish_Date,",
				"          Total_days,",
				"          Days_elapsed,",
				"          Source_Templet,",
				"          Sort_Group,",
				"          Sort_Activity,",
				"          Activity_New,",
				"          Actual_Percentage,",
				"          Source_Table,",
				"          FLAT_COUNT,",
				"          SUM_ALL",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 derive(Actual_Achived = toDecimal(SUM_ALL/FLAT_COUNT)) ~> AddAchivedtoActuals",
				"AddAchivedtoActuals select(mapColumn(",
				"          Upload_Time,",
				"          Project_Identifier,",
				"          Group,",
				"          Activity_Description,",
				"          Actual_Start_Date,",
				"          Actual_Finish_Date,",
				"          Total_days,",
				"          Days_elapsed,",
				"          Source_Templet,",
				"          Sort_Group,",
				"          Sort_Activity,",
				"          Activity_New,",
				"          Actual_Percentage,",
				"          Source_Table,",
				"          Actual_Achived,",
				"          Source_Table",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select4 derive(Legend = 'Actuals') ~> addLegendActuals",
				"addLegendActuals, addLegendPlan union(byName: true)~> union1",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     preSQLs:['truncate table DWH.O_PLN_GAANT_HURRY_ALL'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> AutualandPlanSInk"
			]
		}
	}
}
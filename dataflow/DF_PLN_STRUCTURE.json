{
	"name": "DF_PLN_STRUCTURE",
	"properties": {
		"folder": {
			"name": "DWH/Facts"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_O_PLN_STRUCTURE_POURING_STG_TRG",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_PLN_STRACTURE_FACT_TRG",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     MAX_ID as integer (0)",
				"}",
				"source(output(",
				"          UPLOAD_DATE as timestamp,",
				"          PROJECT_Id as integer,",
				"          AREA as string,",
				"          Project_Identifier as string,",
				"          LEVEL_ID as integer,",
				"          SBU_ID as integer,",
				"          LEVEL as string,",
				"          POUR_COUNT as string,",
				"          POUR as string,",
				"          SEQUENCE_OF_APPEARANCE as integer,",
				"          VALUE as date,",
				"          NEXT_DATE as date,",
				"          AVG_DAYS as integer,",
				"          VIEW_MAP as integer,",
				"          VALUE_AVERAGE as integer",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT\\n       KA.UPLOAD_DATE,\\n      P.Sort_ID as PROJECT_Id,\\n       KA.AREA,\\n   P.Project_Identifier,\\n       \\n       LM.LEVEL_MAP_ID AS LEVEL_ID,\\n       SM.SBU_MAP_ID AS SBU_ID,\\n       KA.LEVEL,\\n       KA.POUR_COUNT,\\n       KA.POUR,\\n       KA.SEQUENCE_OF_APPEARANCE,\\n       KA.VALUE,\\n       LAG(KA.VALUE) OVER(PARTITION BY P.Project_Identifier,KA.POUR ORDER BY KA.POUR,VALUE) AS NEXT_DATE,\\n        DATEDIFF(day,LAG(KA.VALUE) OVER(PARTITION BY P.Project_Identifier ,KA.POUR ORDER BY KA.POUR,KA.VALUE),KA.VALUE) AS AVG_DAYS,\\n       CASE \\n           WHEN KA.AREA = \\'TOWER\\' THEN     1\\n           WHEN KA.AREA = \\'PODIUM\\' THEN     2\\n           WHEN KA.AREA = \\'PODIUM-TA\\' THEN 3\\n           WHEN KA.AREA = \\'TOWER A\\' THEN     4\\n           WHEN KA.AREA = \\'PODIUM-TB\\' THEN 5\\n           WHEN KA.AREA = \\'TOWER B\\' THEN     6\\n           WHEN KA.AREA = \\'TOWER C\\' THEN     7\\n           WHEN KA.AREA = \\'TOWER D\\' THEN     8\\n       ELSE NULL\\n       END AS VIEW_MAP,\\n       CASE \\n           WHEN KA.VALUE < GETDATE() THEN 1\\n           ELSE 0\\n       END AS VALUE_AVERAGE\\nFROM(\\n        SELECT\\n            SP.UPLOAD_TIME AS UPLOAD_DATE,\\n            SP.PROJECT_ID,\\n            SP.LEVEL,\\n            SP.SBU_ID,\\n            OPSPM.POUR_COUNT, \\n            OPSPM.SEQUENCE_OF_APPEARANCE, \\n            OPSPM.AREA, \\n            COLUMN_NAME.POUR,\\n               cast( COLUMN_NAME.VALUE as date) as VALUE,\\n            DENSE_RANK() OVER(PARTITION BY SP.PROJECT_ID ORDER BY UPLOAD_TIME  DESC) AS DRANK \\n       FROM STG.O_PLN_STRUCTURE_POURING_STG SP\\n        CROSS APPLY (\\n                    SELECT Core_Wall_1 , \\'Core Wall 1\\'\\n                    UNION ALL SELECT Core_Wall_2 , \\'Core Wall 2\\'\\n                    UNION ALL SELECT Core_Wall_3 , \\'Core Wall 3\\'\\n                    UNION ALL SELECT Core_Wall_4 , \\'Core Wall 4\\'\\n                    UNION ALL SELECT Core_Wall_5 , \\'Core Wall 5\\'\\n                    UNION ALL SELECT Core_Wall_6 , \\'Core Wall 6\\'\\n                    UNION ALL SELECT Core_Wall_7 , \\'Core Wall 7\\'\\n                    UNION ALL SELECT Core_Wall_8 , \\'Core Wall 8\\'\\n                    UNION ALL SELECT Core_Wall_9 , \\'Core Wall 9\\'\\n                    UNION ALL SELECT Core_Wall_10 , \\'Core Wall 10\\'\\n                    UNION ALL SELECT Core_Wall_11 , \\'Core Wall 11\\'\\n                    UNION ALL SELECT Core_Wall_12 , \\'Core Wall 12\\'\\n                    UNION ALL SELECT Core_Wall_13 , \\'Core Wall 13\\'\\n                    UNION ALL SELECT Core_Wall_14 , \\'Core Wall 14\\'\\n                    UNION ALL SELECT Core_Wall_15 , \\'Core Wall 15\\'\\n                    UNION ALL SELECT Core_Wall_16 , \\'Core Wall 16\\'\\n                    UNION ALL SELECT Core_Wall_17 , \\'Core Wall 17\\'\\n                    UNION ALL SELECT Core_Wall_18 , \\'Core Wall 18\\'\\n                    UNION ALL SELECT Core_Wall_19 , \\'Core Wall 19\\'\\n                    UNION ALL SELECT Core_Wall_20 , \\'Core Wall 20\\'\\n                    UNION ALL SELECT Slab_1 , \\'Slab 1\\'\\n                    UNION ALL SELECT Slab_2 , \\'Slab 2\\'\\n                    UNION ALL SELECT Slab_3 , \\'Slab 3\\'\\n                    UNION ALL SELECT Slab_4 , \\'Slab 4\\'\\n                    UNION ALL SELECT Slab_5 , \\'Slab 5\\'\\n                    UNION ALL SELECT Slab_6 , \\'Slab 6\\'\\n                    UNION ALL SELECT Slab_7 , \\'Slab 7\\'\\n                    UNION ALL SELECT Slab_8 , \\'Slab 8\\'\\n                    UNION ALL SELECT Slab_9 , \\'Slab 9\\'\\n                    UNION ALL SELECT Slab_10 , \\'Slab 10\\'\\n                    UNION ALL SELECT Slab_11 , \\'Slab 11\\'\\n                    UNION ALL SELECT Slab_12 , \\'Slab 12\\'\\n                    UNION ALL SELECT Slab_13 , \\'Slab 13\\'\\n                    UNION ALL SELECT Slab_14 , \\'Slab 14\\'\\n                    UNION ALL SELECT Slab_15 , \\'Slab 15\\'\\n                    UNION ALL SELECT Slab_16 , \\'Slab 16\\'\\n                    UNION ALL SELECT Slab_17 , \\'Slab 17\\'\\n                    UNION ALL SELECT Slab_18 , \\'Slab 18\\'\\n                    UNION ALL SELECT Slab_19 , \\'Slab 19\\'\\n                    UNION ALL SELECT Slab_20 , \\'Slab 20\\'\\n                    UNION ALL SELECT Staircase_1 , \\'Staircase 1\\'\\n                    UNION ALL SELECT Staircase_2 , \\'Staircase 2\\'\\n                    UNION ALL SELECT Staircase_3 , \\'Staircase 3\\'\\n                    UNION ALL SELECT Staircase_4 , \\'Staircase 4\\'\\n                    UNION ALL SELECT Staircase_5 , \\'Staircase 5\\'\\n                    UNION ALL SELECT Staircase_6 , \\'Staircase 6\\'\\n                    UNION ALL SELECT Staircase_7 , \\'Staircase 7\\'\\n                    UNION ALL SELECT Staircase_8 , \\'Staircase 8\\'\\n                    UNION ALL SELECT Staircase_9 , \\'Staircase 9\\'\\n                    UNION ALL SELECT Staircase_10 , \\'Staircase 10\\'\\n                    UNION ALL SELECT Staircase_11 , \\'Staircase 11\\'\\n                    UNION ALL SELECT Staircase_13 , \\'Staircase 13\\'\\n                    UNION ALL SELECT Staircase_14 , \\'Staircase 14\\'\\n                    UNION ALL SELECT Staircase_15 , \\'Staircase 15\\'\\n                    UNION ALL SELECT Staircase_16 , \\'Staircase 16\\'\\n                    UNION ALL SELECT Staircase_17 , \\'Staircase 17\\'\\n                    UNION ALL SELECT Staircase_18 , \\'Staircase 18\\'\\n                    UNION ALL SELECT Staircase_19 , \\'Staircase 19\\'\\n                    UNION ALL SELECT Staircase_20 , \\'Staircase 20\\'\\n                   )AS COLUMN_NAME(VALUE,POUR) \\n         JOIN  STG.O_PLN_STRUCTURES_POUR_MAP_STG  OPSPM \\n             ON        COLUMN_NAME.POUR = OPSPM.TYPE_OF_POUR\\n         WHERE        VALUE IS NOT NULL AND Lower(COLUMN_NAME.POUR)  like \\'slab%\\'  AND SP.LEVEL NOT LIKE \\'grade%\\' AND TRIM(COLUMN_NAME.VALUE) NOT IN (\\'\\') ) KA \\n JOIN    DWH.PLN_LEVEL_MAP_ALL_DIM LM \\n    ON        KA.LEVEL = LM.LEVEL \\nleft JOIN    [DWH].[PROJECTS_NEW_DIM] P\\n   ON        KA.PROJECT_ID=P.PROJECT_Identifier\\nLEFT JOIN    [DWH].[PLN_SBU_MAPPING_DIM] SM\\n    ON      KA.SBU_ID=SM.SBU_IDENTIFIER\\nWHERE       KA.DRANK = 1\\n\\n\\n',",
				"     format: 'query',",
				"     staged: true) ~> source1",
				"source1 keyGenerate(output(SurrogateKey_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
				"          LoadDateTime = currentUTC()) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as integer,",
				"          Upload_Date as date,",
				"          Project_Id as string,",
				"          Project_Identifier as string,",
				"          Level_Id as integer,",
				"          Sbu_id as integer,",
				"          Area as string,",
				"          Level as string,",
				"          Pour_count as string,",
				"          Pour as string,",
				"          Sequence_of_Appearance as integer,",
				"          value as string,",
				"          Next_Date as string,",
				"          Avg_days as integer,",
				"          View_Map as integer,",
				"          value_Average as integer,",
				"          LoadDateTime as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     preSQLs:['TRUNCATE TABLE [DWH].[PLN_STRUCTURE_FACT];'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Id = ID,",
				"          Upload_Date = UPLOAD_DATE,",
				"          Project_Id = PROJECT_Id,",
				"          Project_Identifier,",
				"          Level_Id = LEVEL_ID,",
				"          Sbu_id = SBU_ID,",
				"          Area = AREA,",
				"          Level = LEVEL,",
				"          Pour_count = POUR_COUNT,",
				"          Pour = POUR,",
				"          Sequence_of_Appearance = SEQUENCE_OF_APPEARANCE,",
				"          value = VALUE,",
				"          Next_Date = NEXT_DATE,",
				"          Avg_days = AVG_DAYS,",
				"          View_Map = VIEW_MAP,",
				"          value_Average = VALUE_AVERAGE,",
				"          LoadDateTime",
				"     )) ~> sink1"
			]
		}
	}
}
{
	"name": "DF_PLN_STRUCTURE",
	"properties": {
		"folder": {
			"name": "DWH/Facts"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_O_PLN_STRUCTURE_POURING_STG_TRG",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_PLN_STRACTURE_FACT_TRG",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     MAX_ID as integer (0)",
				"}",
				"source(output(",
				"          UPLOAD_DATE as timestamp,",
				"          PROJECT_Id as integer,",
				"          AREA as string,",
				"          Project_Identifier as string,",
				"          LEVEL_ID as integer,",
				"          SBU_ID as integer,",
				"          LEVEL as string,",
				"          POUR_COUNT as string,",
				"          POUR as string,",
				"          SEQUENCE_OF_APPEARANCE as integer,",
				"          VALUE as string,",
				"          NEXT_DATE as string,",
				"          AVG_DAYS as integer,",
				"          VIEW_MAP as integer,",
				"          VALUE_AVERAGE as integer",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'truncate table STG.O_PLN_STRUCTURE_POURING_STG1\\ninsert into STG.O_PLN_STRUCTURE_POURING_STG1\\nselect a.*, b.POUR_COUNT, b.AREA, b.SEQUENCE_OF_APPEARANCE, b.Type_Of_Pour ,b.Project_Identifier,b.Sort_ID\\nfrom (\\n\\n     SELECT\\n            cast(SP.UPLOAD_TIME as DATE) AS UPLOAD_DATE,\\n            SP.PROJECT_ID,\\n            SP.LEVEL,\\n            COLUMN_NAME.*,\\n               SP.sbu_id,\\n            DENSE_RANK() OVER(PARTITION BY SP.PROJECT_ID ORDER BY UPLOAD_TIME  DESC) AS DRANK \\n        FROM STG.O_PLN_STRUCTURE_POURING_STG SP\\n        CROSS APPLY (\\n                    SELECT Core_Wall_1 , \\'Core Wall 1\\'\\n                    UNION ALL SELECT Core_Wall_2 , \\'Core Wall 2\\'\\n                    UNION ALL SELECT Core_Wall_3 , \\'Core Wall 3\\'\\n                    UNION ALL SELECT Core_Wall_4 , \\'Core Wall 4\\'\\n                    UNION ALL SELECT Core_Wall_5 , \\'Core Wall 5\\'\\n                    UNION ALL SELECT Core_Wall_6 , \\'Core Wall 6\\'\\n                    UNION ALL SELECT Core_Wall_7 , \\'Core Wall 7\\'\\n                    UNION ALL SELECT Core_Wall_8 , \\'Core Wall 8\\'\\n                    UNION ALL SELECT Core_Wall_9 , \\'Core Wall 9\\'\\n                    UNION ALL SELECT Core_Wall_10 , \\'Core Wall 10\\'\\n                    UNION ALL SELECT Core_Wall_11 , \\'Core Wall 11\\'\\n                    UNION ALL SELECT Core_Wall_12 , \\'Core Wall 12\\'\\n                    UNION ALL SELECT Core_Wall_13 , \\'Core Wall 13\\'\\n                    UNION ALL SELECT Core_Wall_14 , \\'Core Wall 14\\'\\n                    UNION ALL SELECT Core_Wall_15 , \\'Core Wall 15\\'\\n                    UNION ALL SELECT Core_Wall_16 , \\'Core Wall 16\\'\\n                    UNION ALL SELECT Core_Wall_17 , \\'Core Wall 17\\'\\n                    UNION ALL SELECT Core_Wall_18 , \\'Core Wall 18\\'\\n                    UNION ALL SELECT Core_Wall_19 , \\'Core Wall 19\\'\\n                    UNION ALL SELECT Core_Wall_20 , \\'Core Wall 20\\'\\n                    UNION ALL SELECT Slab_1 , \\'Slab 1\\'\\n                    UNION ALL SELECT Slab_2 , \\'Slab 2\\'\\n                    UNION ALL SELECT Slab_3 , \\'Slab 3\\'\\n                    UNION ALL SELECT Slab_4 , \\'Slab 4\\'\\n                    UNION ALL SELECT Slab_5 , \\'Slab 5\\'\\n                    UNION ALL SELECT Slab_6 , \\'Slab 6\\'\\n                    UNION ALL SELECT Slab_7 , \\'Slab 7\\'\\n                    UNION ALL SELECT Slab_8 , \\'Slab 8\\'\\n                    UNION ALL SELECT Slab_9 , \\'Slab 9\\'\\n                    UNION ALL SELECT Slab_10 , \\'Slab 10\\'\\n                    UNION ALL SELECT Slab_11 , \\'Slab 11\\'\\n                    UNION ALL SELECT Slab_12 , \\'Slab 12\\'\\n                    UNION ALL SELECT Slab_13 , \\'Slab 13\\'\\n                    UNION ALL SELECT Slab_14 , \\'Slab 14\\'\\n                    UNION ALL SELECT Slab_15 , \\'Slab 15\\'\\n                    UNION ALL SELECT Slab_16 , \\'Slab 16\\'\\n                    UNION ALL SELECT Slab_17 , \\'Slab 17\\'\\n                    UNION ALL SELECT Slab_18 , \\'Slab 18\\'\\n                    UNION ALL SELECT Slab_19 , \\'Slab 19\\'\\n                    UNION ALL SELECT Slab_20 , \\'Slab 20\\'\\n                    UNION ALL SELECT Staircase_1 , \\'Staircase 1\\'\\n                    UNION ALL SELECT Staircase_2 , \\'Staircase 2\\'\\n                    UNION ALL SELECT Staircase_3 , \\'Staircase 3\\'\\n                    UNION ALL SELECT Staircase_4 , \\'Staircase 4\\'\\n                    UNION ALL SELECT Staircase_5 , \\'Staircase 5\\'\\n                    UNION ALL SELECT Staircase_6 , \\'Staircase 6\\'\\n                    UNION ALL SELECT Staircase_7 , \\'Staircase 7\\'\\n                    UNION ALL SELECT Staircase_8 , \\'Staircase 8\\'\\n                    UNION ALL SELECT Staircase_9 , \\'Staircase 9\\'\\n                    UNION ALL SELECT Staircase_10 , \\'Staircase 10\\'\\n                    UNION ALL SELECT Staircase_11 , \\'Staircase 11\\'\\n                    UNION ALL SELECT Staircase_13 , \\'Staircase 13\\'\\n                    UNION ALL SELECT Staircase_14 , \\'Staircase 14\\'\\n                    UNION ALL SELECT Staircase_15 , \\'Staircase 15\\'\\n                    UNION ALL SELECT Staircase_16 , \\'Staircase 16\\'\\n                    UNION ALL SELECT Staircase_17 , \\'Staircase 17\\'\\n                    UNION ALL SELECT Staircase_18 , \\'Staircase 18\\'\\n                    UNION ALL SELECT Staircase_19 , \\'Staircase 19\\'\\n                    UNION ALL SELECT Staircase_20 , \\'Staircase 20\\'\\n                   )AS COLUMN_NAME(VALUE,POUR)\\n\\n          WHERE VALUE IS NOT NULL AND TRIM(COLUMN_NAME.VALUE) not in (\\'\\')) a \\n           left join \\n           (select * from STG.O_PLN_STRUCTURES_POUR_MAP_STG OPSPM left join [DWH].[PROJECTS_NEW_DIM] p on OPSPM.project_id = p.Project_Identifier)b \\n           on a.POUR = b.TYPE_OF_POUR and a.PROJECT_ID = b.Project_Identifier where a.DRANK =1\\n\\nselect  a.Upload_Date,  a.Project_id as Proect_Identifier, a.Area, c.LEVEL_MAP_ID AS Level_Id, a.sbu_id,\\n        a.LEVEL, a.Pour_count, a.POUR, a.Sequence_of_Appearance,\\n        a.VALUE as value, b.Next_Date, b.AVG_DAYS as Avg_days,\\n        CASE \\n            WHEN a.AREA = \\'Tower\\' THEN     1\\n            WHEN a.AREA = \\'Podium\\' THEN     2\\n            WHEN a.AREA = \\'Podium-TA\\' THEN 3\\n            WHEN a.AREA = \\'Tower A\\' THEN     4\\n            WHEN a.AREA = \\'Podium-TB\\' THEN 5\\n            WHEN a.AREA = \\'Tower B\\' THEN     6\\n            WHEN a.AREA = \\'Tower C\\' THEN     7\\n            WHEN a.AREA = \\'Tower D\\' THEN     8\\n        ELSE NULL\\n        END AS View_Map,\\n        CASE WHEN a.VALUE < GETDATE() THEN 1 ELSE 0 END AS value_Average from \\n(select * from STG.O_PLN_STRUCTURE_POURING_STG1) a\\nleft join\\n(select a.Project_Identifier, a.AREA,a.LEVEL, a.POUR,a.VALUE,\\n    LAG(a.VALUE) over(partition by a.Project_Identifier,a.Pour order by a.Pour,value) as Next_Date,\\n    DATEDIFF(day,LAG(a.VALUE) OVER(PARTITION BY a.Project_Identifier ,a.POUR ORDER BY a.POUR,a.VALUE),a.VALUE) AS AVG_DAYS from\\n     (select * from STG.O_PLN_STRUCTURE_POURING_STG1 where LOWER(POUR) like \\'slab%\\'  AND LOWER(LEVEL) NOT LIKE \\'grade%\\') a) b\\nON a.Project_Identifier = b.Project_Identifier AND a.Pour = b.Pour AND a.VALUE = b.value\\nleft join\\n(select * from DWH.PLN_LEVEL_MAP_ALL_DIM) c ON  a.LEVEL = c.LEVEL order by 1,2,3,4,5,6,8',",
				"     format: 'query',",
				"     staged: true) ~> source1",
				"source1 keyGenerate(output(SurrogateKey_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(ID = SurrogateKey_ID+$MAX_ID,",
				"          LoadDateTime = currentUTC()) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as integer,",
				"          Upload_Date as date,",
				"          Project_Identifier as string,",
				"          Project_Id as string,",
				"          Level_Id as integer,",
				"          Sbu_id as integer,",
				"          Area as string,",
				"          Level as string,",
				"          Pour_count as string,",
				"          Pour as string,",
				"          Sequence_of_Appearance as integer,",
				"          value as string,",
				"          Next_Date as string,",
				"          Avg_days as integer,",
				"          View_Map as integer,",
				"          value_Average as integer,",
				"          LoadDateTime as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     preSQLs:['TRUNCATE TABLE [DWH].[PLN_STRUCTURE_FACT];'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Id = ID,",
				"          Upload_Date = UPLOAD_DATE,",
				"          Project_Identifier,",
				"          Project_Id = PROJECT_Id,",
				"          Level_Id = LEVEL_ID,",
				"          Sbu_id = SBU_ID,",
				"          Area = AREA,",
				"          Level = LEVEL,",
				"          Pour_count = POUR_COUNT,",
				"          Pour = POUR,",
				"          Sequence_of_Appearance = SEQUENCE_OF_APPEARANCE,",
				"          value = VALUE,",
				"          Next_Date = NEXT_DATE,",
				"          Avg_days = AVG_DAYS,",
				"          View_Map = VIEW_MAP,",
				"          value_Average = VALUE_AVERAGE,",
				"          LoadDateTime",
				"     )) ~> sink1"
			]
		}
	}
}
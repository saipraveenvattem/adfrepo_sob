{
	"name": "DF_PLN_FIRELIFTLOBBY",
	"properties": {
		"folder": {
			"name": "DWH/Facts"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_O_PLN_FIRELIFTLOBBY_MAP_STG_TRG",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_PLN_FIRELIFTLOBBY_TRG",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     MAX_ID as integer (0)",
				"}",
				"source(output(",
				"          PROJECT_ID as integer,",
				"          LEVEL_ID as integer,",
				"          PROJECT_IDENTIFIER as string,",
				"          SBU_ID as integer,",
				"          TOWER as string,",
				"          ACTIVITY_ID as integer,",
				"          Level as string,",
				"          Sclicer as string,",
				"          VALUE as string,",
				"          TYPE_OF_WORK as string,",
				"          CATEGORY as string,",
				"          UPLOAD_DATE as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT \\n    P.Sort_ID as PROJECT_ID,\\n    LM.LEVEL_MAP_ID AS LEVEL_ID,\\n    P.PROJECT_IDENTIFIER ,\\n    SM.SBU_MAP_ID AS SBU_ID,\\n    F.TOWER,\\n    F.ACTIVITY_ID,\\n    F.Level,\\n    \\'Fire Lift Lobby\\' as Sclicer,\\n    CASE \\n        WHEN F.VALUE IN (\\'\\',\\'NA\\') THEN \\'0%\\'\\n        ELSE F.VALUE\\n    END AS VALUE,\\n    F.TYPE_OF_WORK,\\n    F.CATEGORY,\\n    F.UPLOAD_DATE\\n     from (\\n        SELECT CAST(FR.upload_time as DATE) AS Upload_Date,\\n        FR.project_id,\\n        FR.tower,\\n        FR.Level,\\n        Column_Name.*,\\n        FM.ACTIVITY_ID,\\n        FM.SBU_ID,\\n        FM.CATEGORY,\\n        DENSE_RANK () OVER     (PARTITION BY  project_id , FR.SBU_ID\\n                            ORDER BY  CAST(upload_time as DATE) DESC\\n                            )     DRANK\\n    FROM STG.O_PLN_FIRELIFTLOBBY_RAW_STG FR\\n    CROSS apply (\\n                        SELECT    MEP_Marking_for_Builders_Work    ,    \\'MEP Marking for Builders Work\\'\\n                        UNION ALL SELECT    Cutting_and_Chasing_of_Blockwork    ,    \\'Cutting & Chasing of Blockwork\\'\\n                        UNION ALL SELECT    MEP_Services_Installation    ,    \\'MEP Services Installation\\'\\n                        UNION ALL SELECT    Wall_MEP_Services_Packing    ,    \\'Wall MEP Services Packing\\'\\n                        UNION ALL SELECT    Plaster    ,    \\'Plaster\\'\\n                        UNION ALL SELECT    Screed    ,    \\'Screed\\'\\n                        UNION ALL SELECT    Lift_Door_Installation_and_Jamb_Installation    ,    \\'Lift Door Installation & Jamb Installation\\'\\n                        UNION ALL SELECT    Beside_Lift_Door_Blockwork    ,    \\'Beside Lift Door Blockwork\\'\\n                        UNION ALL SELECT    Beside_Lift_Door_Plaster    ,    \\'Beside Lift Door Plaster\\'\\n                        UNION ALL SELECT    MEP_High_Level_Works    ,    \\'MEP High Level Works\\'\\n                        UNION ALL SELECT    FC_Framing    ,    \\'FC Framing\\'\\n                        UNION ALL SELECT    MEP_Boarding_Clearance    ,    \\'MEP Boarding Clearance\\'\\n                        UNION ALL SELECT    FC_Boarding    ,    \\'FC Boarding\\'\\n                        UNION ALL SELECT    Joint_Taping_and_Sanding    ,    \\'Joint Taping and Sanding\\'\\n                        UNION ALL SELECT    Ceiling_Primer    ,    \\'Ceiling Primer\\'\\n                        UNION ALL SELECT    Ceiling_Stucco_1st_and_2nd_Coat    ,    \\'Ceiling Stucco 1st and 2nd Coat\\'\\n                        UNION ALL SELECT    Ceiling_First_Coat_Paint    ,    \\'Ceiling First Coat Paint\\'\\n                        UNION ALL SELECT    Wall_Primer    ,    \\'Wall Primer\\'\\n                        UNION ALL SELECT    Wall_Stucco_1st_and_2nd_Coat    ,    \\'Wall Stucco 1st and 2nd Coat\\'\\n                        UNION ALL SELECT    Wall_First_Coat_Paint    ,    \\'Wall First Coat Paint\\'\\n                        UNION ALL SELECT    Floor_Tile    ,    \\'Floor Tile\\'\\n                        UNION ALL SELECT    Door_Frame_Installation    ,    \\'Door-Frame Installation\\'\\n                        UNION ALL SELECT    Door_Architrave_Installation    ,    \\'Door-Architrave Installation\\'\\n                        UNION ALL SELECT    Door_Shutter_Installation    ,    \\'Door-Shutter Installation\\'\\n                        UNION ALL SELECT    Door_Ironmongery_Installation    ,    \\'Door-Ironmongery Installation\\'\\n                        UNION ALL SELECT    Door_Silicone    ,    \\'Door-Silicone\\'\\n                        UNION ALL SELECT    Epoxy_Grinding    ,    \\'Epoxy Grinding\\'\\n                        UNION ALL SELECT    Epoxy_Bug_Fill    ,    \\'Epoxy Bug Fill\\'\\n                        UNION ALL SELECT    Epoxy_Primer    ,    \\'Epoxy Primer\\'\\n                        UNION ALL SELECT    Epoxy_First_Coat    ,    \\'Epoxy First Coat\\'\\n                        UNION ALL SELECT    Epoxy_Final_Coat    ,    \\'Epoxy Final Coat\\'\\n                        UNION ALL SELECT    Skirting    ,    \\'Skirting\\'\\n                        UNION ALL SELECT    Grout    ,    \\'Grout\\'\\n                        UNION ALL SELECT    Silicone    ,    \\'Silicone\\'\\n                        UNION ALL SELECT    Signage    ,    \\'Signage\\'\\n                        UNION ALL SELECT    MEP_Final_Fixtures    ,    \\'MEP Final Fixtures\\'\\n                        UNION ALL SELECT    Final_Coat    ,    \\'Final Coat\\'\\n                        )as Column_Name(value,Type_of_work)\\n    INNER JOIN STG.O_PLN_FIRELIFTLOBBY_MAP_STG FM\\n    ON Column_Name.Type_of_work = FM.ACTIVITY_SEQUENCE\\n    WHERE VALUE IS NOT NULL\\n       ) F\\nLEFT JOIN [DWH].[PLN_LEVEL_MAP_ALL_DIM] AS LM\\n     ON          F.[LEVEL] = LM.[LEVEL]\\nLEFT JOIN [DWH].[PROJECTS_NEW_DIM] P\\n      ON          F.PROJECT_ID=P.PROJECT_IDENTIFIER \\nLEFT JOIN [DWH].[PLN_SBU_MAPPING_DIM] SM\\n     ON          F.SBU_ID=SM.SBU_IDENTIFIER\\nWHERE          F.DRANK = 1',",
				"     format: 'query',",
				"     staged: true) ~> source1",
				"source1 keyGenerate(output(SurrogateKey_Id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(Id = SurrogateKey_Id+$MAX_ID,",
				"          LoadDateTime = currentUTC()) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as integer,",
				"          Project_Id as integer,",
				"          Project_Identifier as string,",
				"          SBU_ID as integer,",
				"          Level_Id as integer,",
				"          Tower as string,",
				"          Level as string,",
				"          Sclicer as string,",
				"          Activity_ID as integer,",
				"          Value as string,",
				"          Type_of_work as string,",
				"          Category as string,",
				"          Upload_Date as date,",
				"          LoadDateTime as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     preSQLs:['Truncate Table [DWH].[PLN_FIRELIFTLOBBY_FACT]'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Id,",
				"          Project_Id = PROJECT_ID,",
				"          Project_Identifier = PROJECT_IDENTIFIER,",
				"          SBU_ID,",
				"          Level_Id = LEVEL_ID,",
				"          Tower = TOWER,",
				"          Level,",
				"          Sclicer,",
				"          Activity_ID = ACTIVITY_ID,",
				"          Value = VALUE,",
				"          Type_of_work = TYPE_OF_WORK,",
				"          Category = CATEGORY,",
				"          Upload_Date = UPLOAD_DATE,",
				"          LoadDateTime",
				"     )) ~> sink1"
			]
		}
	}
}
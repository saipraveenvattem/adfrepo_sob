{
	"name": "PL_Pln_Common",
	"properties": {
		"activities": [
			{
				"name": "Executive",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureMySqlSource",
						"query": "TRUNCATE TABLE for_executive;\r\nINSERT INTO for_executive\r\nWITH AA AS (\r\n SELECT\r\n DATE(OPBSR.upload_time) AS Upload_Date,\r\n OPBSR.Project_id,\r\n CAST(REPLACE(OPBSR.`Achieved Revenue (Till 2021)`,',','') AS DECIMAL) AS `Achieved Revenue (Till 2021)`,\r\n CAST(REPLACE(OPBSR.`Total Revenue (BOQ)`,',','') AS DECIMAL) AS `Total Revenue (BOQ)`,\r\n AA.value AS TILL_DATE_2022,\r\n BB.Projection_Actuals,\r\n(IFNULL(OPBSR.`Achieved Revenue (Till 2021)`,0)+IFNULL(AA.value,0)+IFNULL(BB.Projection_Actuals,0)) AS Total\r\n FROM O_PLN_BUSINESS_PLAN_RAW OPBSR LEFT JOIN (SELECT \r\n Upload_Date,\r\n Project_id,\r\n SUM(value) AS value\r\n FROM F_PLN_BUSINESS_PLAN\r\n WHERE `Type` = 'Actuals' GROUP BY 1,2) AS AA \r\n ON OPBSR.Project_id = AA.Project_id\r\n LEFT JOIN (SELECT \r\n Upload_Date,\r\n `Project Sclicer` AS Project_id,\r\n SUM(`Actual as on date`) AS Projection_Actuals\r\n FROM F_PLN_PROJECTION GROUP BY 1,2) BB\r\n ON OPBSR.Project_id = BB.Project_id\r\n WHERE TRIM(SBU)= 'Overall' \r\n AND `Type` = 'Actuals'),\r\n Stagging AS (\r\n SELECT \r\n Upload_Date,\r\n Project_id,\r\n `Total Revenue (BOQ)` AS Denominator,\r\n `Achieved Revenue (Till 2021)`,\r\n TILL_DATE_2022,\r\n Projection_Actuals,\r\n IFNULL(`Achieved Revenue (Till 2021)`,0)+IFNULL(TILL_DATE_2022,0)+IFNULL(Projection_Actuals,0) AS Numarator\r\n FROM AA) \r\n SELECT *,cast((Numarator/Denominator) as decimal(38,4)) AS Completed,cast((1-(Numarator/Denominator)) as decimal(39,4)) AS Pending FROM Stagging;\r\n\r\n\r\n/**/\r\n\r\nSELECT 1;",
						"queryTimeout": "02:00:00"
					},
					"dataset": {
						"referenceName": "DS_MySQL_Data_Loads_DB",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Paginated Keepout",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureMySqlSource",
						"query": "TRUNCATE TABLE paginated_keepout;\nINSERT INTO paginated_keepout\nWITH Total AS (\nSELECT project_id,Activity,count(`Flat No.`) AS Total\nFROM F_PLN_KEEPOUT_2 GROUP BY 1,2\n),\nCompleted AS (\nSELECT project_id,Activity,count(`Actual`) AS Completed\nFROM F_PLN_KEEPOUT_2 GROUP BY 1,2\n),\nWork_Front AS (\nSELECT project_id,Activity,Predecessor,count(`Predecessor Actual Work Front`) AS `Work Front`\nFROM F_PLN_KEEPOUT_2 GROUP BY 1,2,3\n),\nPlanned AS (\nSELECT project_id,Activity,count(`Flat No.`) AS `Planned`\nFROM F_PLN_KEEPOUT_2  WHERE (Plan <= `Date`)GROUP BY 1,2\n),\nFOR_THE_DAY AS (\nSELECT project_id,Activity,count(`Actual`) AS `FOR THE DAY`\nFROM F_PLN_KEEPOUT_2  WHERE (`Actual` = `Date`) GROUP BY 1,2\n),\nWITHIN_TIME AS (\nSELECT  project_id,\n        Activity,\n        COUNT(`SLA Actual`) AS `Within Allowable Time`\nFROM F_PLN_KEEPOUT_2  WHERE `SLA Actual`= 0 GROUP BY 1,2),\nDAY_1 AS (\nSELECT  project_id,\n        Activity,\n        COUNT(`SLA Actual`) AS `1 DAY`\nFROM F_PLN_KEEPOUT_2  WHERE `SLA Actual`= 1 GROUP BY 1,2),\nDAY_2 AS (\nSELECT  project_id,\n        Activity,\n        COUNT(`SLA Actual`) AS `2 DAY`\nFROM F_PLN_KEEPOUT_2  WHERE `SLA Actual`= 2 GROUP BY 1,2),\nDAY_3 AS (\nSELECT  project_id,\n        Activity,\n        COUNT(`SLA Actual`) AS `3 DAY`\nFROM F_PLN_KEEPOUT_2  WHERE `SLA Actual`= 3 GROUP BY 1,2),\nDAY_4 AS (\nSELECT  project_id,\n        Activity,\n        COUNT(`SLA Actual`) AS `4 DAY`\nFROM F_PLN_KEEPOUT_2  WHERE `SLA Actual`= 4 GROUP BY 1,2),\nDAY_5 AS (\nSELECT  project_id,\n        Activity,\n        COUNT(`SLA Actual`) AS `5 DAY`\nFROM F_PLN_KEEPOUT_2  WHERE `SLA Actual`= 5 GROUP BY 1,2),\nDAY_6 AS (\nSELECT  project_id,\n        Activity,\n        COUNT(`SLA Actual`) AS `6 DAY`\nFROM F_PLN_KEEPOUT_2  WHERE `SLA Actual`= 6 GROUP BY 1,2),\nDAY_7 AS (\nSELECT  project_id,\n        Activity,\n        COUNT(`SLA Actual`) AS `7 DAY`\nFROM F_PLN_KEEPOUT_2  WHERE `SLA Actual`= 7 GROUP BY 1,2),\nDAY_MORETHAN_7 AS (\nSELECT project_id,\n        Activity,\n        COUNT(`SLA Actual`) AS `>7 DAYS`\nFROM F_PLN_KEEPOUT_2 WHERE `SLA Actual` > 7 GROUP BY 1,2),\nTOTAL_DELAYED AS (\nSELECT project_id,\n        Activity,\n        SUM(`SLA Actual`) AS `Total Days Delayed`\nFROM F_PLN_KEEPOUT_2 WHERE `SLA Actual` != 0 GROUP BY 1,2),\n-- Need to Fix this\nSHORT_AGAINST_WORKFRONT AS (\nSELECT  project_id,\n        Activity,\n        COUNT(Actual)-COUNT(`Predecessor Actual`) AS `ShortFall Against WorkFront`\nFROM F_PLN_KEEPOUT_2 WHERE `SLA Actual` != 0 GROUP BY 1,2),\nACTIVITY AS (\nSELECT \n     `Date`,\n     project_id,\n     ACTIVITY,\n    `Engineer Responsible`,\n     Predecessor,\n     ACTIVITY_ID\nFROM F_PLN_KEEPOUT_2 group by 1,2,3,4,5,6),\nJOINING_TABLES AS (\nSELECT\nACT.`Date`,\nACT.project_id AS `Project Id`,\nACT.ACTIVITY_ID AS `Activity Id`,\nACT.ACTIVITY AS Activity,\nACT.`Engineer Responsible`,\nACT.Predecessor,\nTOT.Total,\nPLN.Planned,\nCOM.Completed,\n(PLN.Planned-COM.Completed) AS ShortFall,\nWF.`Work Front`, -- Need to check this\nFTD.`FOR THE DAY` AS `For The Day`,\nWT.`Within Allowable Time`,\nD1.`1 DAY`,\nD2.`2 DAY`,\nD3.`3 DAY`,\nD4.`4 DAY`,\nD5.`5 DAY`,\nD6.`6 DAY`,\nD7.`7 DAY`,\nDS7.`>7 DAYS`,\n(IFNULL(D1.`1 DAY`,0)+IFNULL(D2.`2 DAY`,0)+IFNULL(D3.`3 DAY`,0)+IFNULL(D4.`4 DAY`,0)+IFNULL(D5.`5 DAY`,0)+IFNULL(D6.`6 DAY`,0)+IFNULL(D7.`7 DAY`,0)+IFNULL(DS7.`>7 DAYS`,0)) AS `Total Activities Delayed`,\nTD.`Total Days Delayed`\nFROM ACTIVITY ACT\nLEFT JOIN Total TOT ON ACT.ACTIVITY = TOT.ACTIVITY\nLEFT JOIN Completed COM ON ACT.ACTIVITY = COM.ACTIVITY\nLEFT JOIN Work_Front WF ON ACT.ACTIVITY = WF.ACTIVITY\nLEFT JOIN Planned PLN ON ACT.ACTIVITY = PLN.ACTIVITY\nLEFT JOIN FOR_THE_DAY FTD ON ACT.ACTIVITY = FTD.ACTIVITY\nLEFT JOIN WITHIN_TIME WT ON ACT.ACTIVITY = WT.ACTIVITY\nLEFT JOIN DAY_1 D1 ON ACT.ACTIVITY = D1.ACTIVITY\nLEFT JOIN DAY_2 D2 ON ACT.ACTIVITY = D2.ACTIVITY\nLEFT JOIN DAY_3 D3 ON ACT.ACTIVITY = D3.ACTIVITY\nLEFT JOIN DAY_4 D4 ON ACT.ACTIVITY = D4.ACTIVITY\nLEFT JOIN DAY_5 D5 ON ACT.ACTIVITY = D5.ACTIVITY\nLEFT JOIN DAY_6 D6 ON ACT.ACTIVITY = D6.ACTIVITY\nLEFT JOIN DAY_7 D7 ON ACT.ACTIVITY = D7.ACTIVITY\nLEFT JOIN DAY_MORETHAN_7 DS7 ON ACT.ACTIVITY = DS7.ACTIVITY\nLEFT JOIN TOTAL_DELAYED TD ON ACT.ACTIVITY = TD.ACTIVITY) \nSELECT * FROM JOINING_TABLES ORDER BY `Activity Id`;\n\n/**/\n\nSELECT 1;",
						"queryTimeout": "02:00:00"
					},
					"dataset": {
						"referenceName": "DS_MySQL_Data_Loads_DB",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Project Progress Summary",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureMySqlSource",
						"query": "TRUNCATE TABLE f_pln_project_progress_summary;\r\nINSERT INTO f_pln_project_progress_summary\r\nWITH MAP_MERGE_FWP AS (\r\n        SELECT *, 'Dry Area' AS Area FROM O_PLN_DRYAREA_MAP\r\n        UNION ALL\r\n        SELECT *, 'Wet Area' AS Area FROM O_PLN_WETAREA_MAP\r\n        UNION ALL\r\n        SELECT *, 'Kitchen Area' AS Area FROM O_PLN_KITCHENAREA_MAP\r\n        UNION ALL\r\n        SELECT *, 'Balcony Area' AS Area FROM O_PLN_BALCONYAREA_MAP),\r\n    Total_Activities_FWP AS (\r\n        SELECT \r\n            Flat_count.Project_Identifier AS Project,\r\n            OPD.ACTIVITY_ID,\r\n            OPD.SBU_ID,\r\n            OPD.Area,\r\n            'Flatwise Progress' AS `Progress Type`,\r\n            OPD.CATEGORY,\r\n            OPD.ACTIVITY_SEQUENCE,\r\n            Flat_count.`Flats`,\r\n            Flat_count.`Total Floors`,\r\n            Flat_count.`Scheduled Activities`\r\n        FROM MAP_MERGE_FWP OPD CROSS JOIN (SELECT \r\n                                           Project_Identifier,\r\n                                           FLAT_COUNT AS `Scheduled Activities`,\r\n                                           FLAT_COUNT AS `Flats`,\r\n                                           Total_Floors AS `Total Floors`\r\n                                       FROM PROJECTS WHERE Project_Identifier !='Creek Vista Grande') AS Flat_count),\r\n    PROGRESS_TRACKER_FWP AS (\r\n        SELECT \r\n            Upload_Date, -- For Date\r\n            project_id, -- Project Match\r\n            ACTIVITY_ID, -- For Match\r\n            SBU_ID, -- For Match\r\n            tower, -- To get the Tower Map\r\n            sclicer AS Area, -- For Match \r\n            'Flatwise Progress' AS `Progress Type`, -- For Map\r\n            Category, -- For Match\r\n            Type_of_work AS ACTIVITY_SEQUENCE,-- For Match\r\n            value,\r\n            CASE WHEN value = 0 THEN 1 ELSE NULL END AS `Yet To Start`,\r\n            CASE WHEN value = 1 THEN 1 ELSE NULL END AS `Completed`,\r\n            CASE WHEN value BETWEEN 0.01 AND 0.999 THEN 1 ELSE NULL END AS `In Progress`\r\n        FROM F_PLN_FLATFINISHES WHERE project_id IN ('Sobha Waves','Sobha Waves Grande','One Park Avenue','Creek Vista Reserve')),\r\n    PROGRESS_TRACKER_FINAL_FWP AS (\r\n        SELECT \r\n            Upload_Date, -- For Date\r\n            project_id AS Project, -- Project Match\r\n            ACTIVITY_ID, -- For Match\r\n            SBU_ID, -- For Match\r\n            tower, -- To get the Tower Map\r\n            Area, -- For Match \r\n            `Progress Type`, -- For Map\r\n            Category, -- For Match\r\n            ACTIVITY_SEQUENCE,-- For Match\r\n            AVG(value) AS `Average Achived`,\r\n            SUM(value) AS `SUM Achived`,\r\n            COUNT(value) AS `Count Achived`,\r\n            SUM(`Yet To Start`) AS `Yet To Start`,\r\n            SUM(Completed) AS Completed,\r\n            SUM(`In Progress`) AS `In Progress`\r\n        FROM PROGRESS_TRACKER_FWP GROUP BY Upload_Date,project_id,ACTIVITY_ID,SBU_ID,tower,Area,Category,ACTIVITY_SEQUENCE),\r\n    _FWP_FINAL AS (\r\n    SELECT \r\n        PTF.Upload_Date,\r\n        TA.Project,\r\n        PTF.tower,\r\n        TA.ACTIVITY_ID,\r\n        TA.SBU_ID,\r\n        TA.Area,\r\n        TA.`Progress Type`,\r\n        TA.CATEGORY,\r\n        TA.ACTIVITY_SEQUENCE,\r\n        TA.`Flats`,\r\n        TA.`Total Floors`,\r\n        TA.`Scheduled Activities`,\r\n        PTF.`SUM Achived`,\r\n        PTF.`Count Achived`,\r\n        PTF.`Average Achived`,\r\n        PTF.Completed,\r\n        PTF.`In Progress`,\r\n        PTF.`Yet To Start`,\r\n        (IFNULL(`Scheduled Activities`,0)-(IFNULL(Completed,0)+IFNULL(`In Progress`,0))) AS `Yet To Start Manual`\r\n    FROM Total_Activities_FWP TA LEFT JOIN PROGRESS_TRACKER_FINAL_FWP PTF\r\n        ON TA.Project = PTF.Project\r\n        AND TA.ACTIVITY_SEQUENCE = PTF.ACTIVITY_SEQUENCE\r\n        AND TA.CATEGORY = PTF.CATEGORY\r\n        AND TA.Area = PTF.Area\r\n        AND TA.SBU_ID = PTF.SBU_ID\r\n        AND TA.ACTIVITY_ID = PTF.ACTIVITY_ID),\r\n-- End Of Flatwise Progress -- \r\n-- Start Of Service Rooms Progress -- \r\nMAP_MERGE_SRP AS (\r\n    SELECT *, 'Water Room' AS Area FROM O_PLN_WATERROOM_MAP \r\n    UNION ALL\r\n    SELECT *, 'Electrical Room' AS Area FROM O_PLN_ELECTRICALROOM_MAP\r\n    UNION ALL\r\n    SELECT *, 'Telephone Room' AS Area FROM O_PLN_TELEPHONEROOM_MAP\r\n    UNION ALL\r\n    SELECT *, 'Fire-Lift Lobby' AS Area FROM O_PLN_FIRELIFTLOBBY_MAP\r\n    UNION ALL\r\n    SELECT *, 'Garbage Room' AS Area FROM O_PLN_GARBAGEROOM_MAP),\r\nTotal_Activities_SRP AS (\r\n        SELECT \r\n            Flat_count.Project_Identifier AS Project,\r\n               OPD.ACTIVITY_ID,\r\n            OPD.SBU_ID,\r\n            OPD.Area,\r\n            'Service Room Progress' AS `Progress Type`,\r\n            OPD.CATEGORY,\r\n            OPD.ACTIVITY_SEQUENCE,\r\n            Flat_count.*\r\n           FROM MAP_MERGE_SRP OPD CROSS JOIN (SELECT \r\n                                           Project_Identifier,\r\n                                           Total_Floors AS `Scheduled Activities`, \r\n                                           FLAT_COUNT AS `Flats`,\r\n                                           Total_Floors AS `Total Floors`\r\n                                       FROM PROJECTS) AS Flat_count),\r\n    PROGRESS_TRACKER_SRP AS (\r\n        SELECT \r\n            Upload_Date, -- For Date\r\n            project_id, -- Project Match\r\n            ACTIVITY_ID, -- For Match\r\n            SBU_ID, -- For Match\r\n            tower, -- To get the Tower Map\r\n            sclicer AS Area, -- For Match \r\n            'Flatwise Progress' AS `Progress Type`, -- For Map\r\n            Category, -- For Match\r\n            Type_of_work AS ACTIVITY_SEQUENCE,-- For Match\r\n            value,\r\n            CASE WHEN value = 0 THEN 1 ELSE NULL END AS `Yet To Start`,\r\n            CASE WHEN value = 1 THEN 1 ELSE NULL END AS `Completed`,\r\n            CASE WHEN value BETWEEN 0.01 AND 0.999 THEN 1 ELSE NULL END AS `In Progress`\r\n        FROM F_PLN_SERVICEROOMS WHERE project_id IN ('Sobha Waves','Sobha Waves Grande','One Park Avenue','Creek Vista Reserve')),\r\n    PROGRESS_TRACKER_FINAL_SRP AS (\r\n        SELECT \r\n            Upload_Date, -- For Date\r\n            project_id AS Project, -- Project Match\r\n            ACTIVITY_ID, -- For Match\r\n            SBU_ID, -- For Match\r\n            tower, -- To get the Tower Map\r\n            Area, -- For Match \r\n            `Progress Type`, -- For Map\r\n            Category, -- For Match\r\n            ACTIVITY_SEQUENCE,-- For Match\r\n            AVG(value) AS `Average Achived`,\r\n            SUM(value) AS `SUM Achived`,\r\n            COUNT(value) AS `Count Achived`,\r\n            SUM(`Yet To Start`) AS `Yet To Start`,\r\n            SUM(Completed) AS Completed,\r\n            SUM(`In Progress`) AS `In Progress`\r\n        FROM PROGRESS_TRACKER_SRP GROUP BY Upload_Date,project_id,ACTIVITY_ID,SBU_ID,tower,Area,Category,ACTIVITY_SEQUENCE),\r\n_SRP_FINAL AS (\r\n    SELECT \r\n        PTF.Upload_Date,\r\n        TA.Project,\r\n        PTF.tower,\r\n        TA.ACTIVITY_ID,\r\n        TA.SBU_ID,\r\n        TA.Area,\r\n        TA.`Progress Type`,\r\n        TA.CATEGORY,\r\n        TA.ACTIVITY_SEQUENCE,\r\n        TA.`Flats`,\r\n           TA.`Total Floors`,\r\n           TA.`Scheduled Activities`,\r\n        PTF.`SUM Achived`,\r\n        PTF.`Count Achived`,\r\n        PTF.`Average Achived`,\r\n        PTF.Completed,\r\n        PTF.`In Progress`,\r\n        PTF.`Yet To Start`,\r\n        (IFNULL(`Scheduled Activities`,0)-(IFNULL(Completed,0)+IFNULL(`In Progress`,0))) AS `Yet To Start Manual`\r\n    FROM Total_Activities_SRP TA LEFT JOIN PROGRESS_TRACKER_FINAL_SRP PTF\r\n        ON TA.Project = PTF.Project\r\n        AND TA.ACTIVITY_SEQUENCE = PTF.ACTIVITY_SEQUENCE\r\n        AND TA.CATEGORY = PTF.CATEGORY\r\n        AND TA.Area = PTF.Area\r\n        AND TA.SBU_ID = PTF.SBU_ID\r\n        AND TA.ACTIVITY_ID = PTF.ACTIVITY_ID WHERE TA.Project IN ('Sobha Waves','Sobha Waves Grande','One Park Avenue','Creek Vista Reserve')), \r\n-- End Of Service Rooms Progress -- \r\n-- Start Of Structures Progress -- \r\nTotal_Activities_STP AS\r\n(SELECT \r\n    OPD.project_id AS Project,\r\n    OPD.Sequence_of_Appearance AS ACTIVITY_ID,\r\n    'SBU 3' AS SBU_ID,\r\n    'Slab' AS Area,\r\n    'Structure Progress' AS `Progress Type`,\r\n    OPD.area AS CATEGORY,\r\n    OPD.Pour_count AS ACTIVITY_SEQUENCE,\r\n    Flat_count.`Flats`,\r\n    Flat_count.`Total Floors`,\r\n    Flat_count.`Scheduled Activities`\r\nFROM O_PLN_STRUCTURES_POUR_MAP OPD CROSS JOIN (SELECT \r\n                                   0 AS `Scheduled Activities`,\r\n                                   NULL AS `Flats`,\r\n                                   Total_Floors AS `Total Floors`\r\n                               FROM PROJECTS WHERE Project_Identifier !='Creek Vista Grande') AS Flat_count\r\nWHERE type_of_pour LIKE 'slab%' GROUP BY 1,2,3,4,5,6,7,8,9,10),\r\nPROGRESS_TRACKER_FINAL_STP AS (\r\n    SELECT \r\n    Upload_Date,\r\n    Project_Identifier AS Project,\r\n    'Overall' AS tower,\r\n    Sequence_of_Appearance AS ACTIVITY_ID,\r\n    'SBU 3' AS SBU_ID,\r\n    'Slab' AS Area,\r\n    'Structure Progress' AS `Progress Type`,\r\n    area AS Category,\r\n    Pour_count AS ACTIVITY_SEQUENCE,\r\n    COUNT(`Level`) AS `Completed`,\r\n    NULL AS `In Progress`,\r\n    NULL AS `Yet To Start`\r\nFROM F_PLN_STRUCTURES \r\nWHERE Pour LIKE ('slab%') GROUP BY 1,2,3,4,5,6,7,8,9),\r\n_STP_FINAL AS (\r\n    SELECT \r\n        PTF.Upload_Date,\r\n        TA.Project,\r\n        PTF.tower,\r\n        TA.ACTIVITY_ID,\r\n        TA.SBU_ID,\r\n        TA.Area,\r\n        TA.`Progress Type`,\r\n        TA.CATEGORY,\r\n        TA.ACTIVITY_SEQUENCE,\r\n        TA.`Flats`,\r\n           TA.`Total Floors`,\r\n           TA.`Scheduled Activities`,\r\n        PTF.Completed AS `SUM Achived`,\r\n        PTF.Completed AS `Count Achived`,\r\n         NULL AS `Average Achived`,\r\n        PTF.Completed,\r\n        PTF.`In Progress`,\r\n        PTF.`Yet To Start`,\r\n        (IFNULL(`Scheduled Activities`,0)-(IFNULL(Completed,0)+IFNULL(`In Progress`,0))) AS `Yet To Start Manual`\r\n    FROM Total_Activities_STP TA LEFT JOIN PROGRESS_TRACKER_FINAL_STP PTF\r\n        ON TA.Project = PTF.Project\r\n        AND TA.ACTIVITY_SEQUENCE = PTF.ACTIVITY_SEQUENCE\r\n        AND TA.CATEGORY = PTF.CATEGORY\r\n        AND TA.Area = PTF.Area\r\n        AND TA.SBU_ID = PTF.SBU_ID\r\n        AND TA.ACTIVITY_ID = PTF.ACTIVITY_ID WHERE TA.Project IN ('Sobha Waves','Sobha Waves Grande','One Park Avenue','Creek Vista Reserve')),\r\n-- End Of Structures Progress -- \r\n-- Start Of Corridor Progress -- \r\n    MAP_MERGE_CRA AS (\r\n        SELECT *, 'Corridor' AS Area FROM O_PLN_CORRIDOR_MAP),\r\n    Total_Activities_CRA AS (\r\n        SELECT \r\n            Flat_count.Project_Identifier AS Project,\r\n            OPD.ACTIVITY_ID,\r\n            OPD.SBU_ID,\r\n            OPD.Area,\r\n            'Corridor Progress' AS `Progress Type`,\r\n            OPD.CATEGORY,\r\n            OPD.ACTIVITY_SEQUENCE,\r\n            Flat_count.`Flats`,\r\n            Flat_count.`Total Floors`,\r\n            Flat_count.`Scheduled Activities`\r\n        FROM MAP_MERGE_CRA OPD CROSS JOIN (SELECT \r\n                                           Project_Identifier,\r\n                                           Total_Floors AS `Scheduled Activities`,\r\n                                           FLAT_COUNT AS `Flats`,\r\n                                           Total_Floors AS `Total Floors`\r\n                                       FROM PROJECTS WHERE Project_Identifier !='Creek Vista Grande') AS Flat_count),\r\n    PROGRESS_TRACKER_CRA AS (\r\n        SELECT \r\n            Upload_Date, -- For Date\r\n            project_id, -- Project Match\r\n            ACTIVITY_ID, -- For Match\r\n            SBU_ID, -- For Match\r\n            tower, -- To get the Tower Map\r\n            sclicer AS Area, -- For Match \r\n            'Corridor Progress' AS `Progress Type`, -- For Map\r\n            Category, -- For Match\r\n            Type_of_work AS ACTIVITY_SEQUENCE,-- For Match\r\n            value,\r\n            CASE WHEN value = 0 THEN 1 ELSE NULL END AS `Yet To Start`,\r\n            CASE WHEN value = 1 THEN 1 ELSE NULL END AS `Completed`,\r\n            CASE WHEN value BETWEEN 0.01 AND 0.999 THEN 1 ELSE NULL END AS `In Progress`\r\n        FROM F_PLN_CORRIDOR WHERE project_id IN ('Sobha Waves','Sobha Waves Grande','One Park Avenue','Creek Vista Reserve')),\r\n    PROGRESS_TRACKER_FINAL_CRA AS (\r\n        SELECT \r\n            Upload_Date, -- For Date\r\n            project_id AS Project, -- Project Match\r\n            ACTIVITY_ID, -- For Match\r\n            SBU_ID, -- For Match\r\n            tower, -- To get the Tower Map\r\n            Area, -- For Match \r\n            `Progress Type`, -- For Map\r\n            Category, -- For Match\r\n            ACTIVITY_SEQUENCE,-- For Match\r\n            AVG(value) AS `Average Achived`,\r\n            SUM(value) AS `SUM Achived`,\r\n            COUNT(value) AS `Count Achived`,\r\n            SUM(`Yet To Start`) AS `Yet To Start`,\r\n            SUM(Completed) AS Completed,\r\n            SUM(`In Progress`) AS `In Progress`\r\n        FROM PROGRESS_TRACKER_CRA GROUP BY Upload_Date,project_id,ACTIVITY_ID,SBU_ID,tower,Area,Category,ACTIVITY_SEQUENCE),\r\n    _CRA_FINAL AS (\r\n    SELECT \r\n        PTF.Upload_Date,\r\n        TA.Project,\r\n        PTF.tower,\r\n        TA.ACTIVITY_ID,\r\n        TA.SBU_ID,\r\n        TA.Area,\r\n        TA.`Progress Type`,\r\n        TA.CATEGORY,\r\n        TA.ACTIVITY_SEQUENCE,\r\n        TA.`Flats`,\r\n           TA.`Total Floors`,\r\n           TA.`Scheduled Activities`,\r\n        PTF.`SUM Achived`,\r\n        PTF.`Count Achived`,\r\n        PTF.`Average Achived`,\r\n        PTF.Completed,\r\n        PTF.`In Progress`,\r\n        PTF.`Yet To Start`,\r\n        (IFNULL(`Scheduled Activities`,0)-(IFNULL(Completed,0)+IFNULL(`In Progress`,0))) AS `Yet To Start Manual`\r\n    FROM Total_Activities_CRA TA LEFT JOIN PROGRESS_TRACKER_FINAL_CRA PTF\r\n        ON TA.Project = PTF.Project\r\n        AND TA.ACTIVITY_SEQUENCE = PTF.ACTIVITY_SEQUENCE\r\n        AND TA.CATEGORY = PTF.CATEGORY\r\n        AND TA.Area = PTF.Area\r\n        AND TA.SBU_ID = PTF.SBU_ID\r\n        AND TA.ACTIVITY_ID = PTF.ACTIVITY_ID WHERE TA.Project IN ('Sobha Waves','Sobha Waves Grande','One Park Avenue','Creek Vista Reserve')),\r\n-- End Of Corridor Progress -- \r\n-- Start Of KeppOut Progress -- \r\n    MAP_MERGE_KOA AS (\r\n        SELECT *, 'KeepOut Area' AS Area FROM O_PLN_KEEPOUT_MAP),\r\n    Total_Activities_KOA AS (\r\n        SELECT \r\n            Flat_count.Project_Identifier AS Project,\r\n            OPD.ACTIVITY_ID,\r\n            OPD.SBU_ID,\r\n            OPD.Area,\r\n            'KeepOut Progress' AS `Progress Type`,\r\n            OPD.CATEGORY,\r\n            OPD.ACTIVITY_SEQUENCE,\r\n            Flat_count.`Flats`,\r\n            Flat_count.`Total Floors`,\r\n            Flat_count.`Scheduled Activities`\r\n        FROM MAP_MERGE_KOA OPD CROSS JOIN (SELECT \r\n                                           Project_Identifier,\r\n                                           FLAT_COUNT AS `Scheduled Activities`,\r\n                                           FLAT_COUNT AS `Flats`,\r\n                                           Total_Floors AS `Total Floors`\r\n                                       FROM PROJECTS WHERE Project_Identifier !='Creek Vista Grande') AS Flat_count)\r\n   ,\r\n    PROGRESS_TRACKER_KOA AS (\r\n        SELECT \r\n            Upload_Date, -- For Date\r\n            project_id, -- Project Match\r\n            ACTIVITY_ID, -- For Match\r\n            SBU_Filter AS SBU_ID, -- For Match\r\n            tower, -- To get the Tower Map\r\n            'KeepOut Area' AS Area, -- For Match \r\n            'KeepOut Progress' AS `Progress Type`, -- For Map\r\n            Category, -- For Match\r\n            Type_of_work AS ACTIVITY_SEQUENCE,-- For Match\r\n            value,\r\n            CASE WHEN value = 0 THEN 1 ELSE NULL END AS `Yet To Start`,\r\n            CASE WHEN value = 1 THEN 1 ELSE NULL END AS `Completed`,\r\n            CASE WHEN value BETWEEN 0.01 AND 0.999 THEN 1 ELSE NULL END AS `In Progress`\r\n        FROM F_PLN_KEEPOUT WHERE project_id IN ('Sobha Waves','Sobha Waves Grande','One Park Avenue','Creek Vista Reserve')),\r\n    PROGRESS_TRACKER_FINAL_KOA AS (\r\n        SELECT \r\n            Upload_Date, -- For Date\r\n            project_id AS Project, -- Project Match\r\n            ACTIVITY_ID, -- For Match\r\n            SBU_ID, -- For Match\r\n            tower, -- To get the Tower Map\r\n            Area, -- For Match \r\n            `Progress Type`, -- For Map\r\n            Category, -- For Match\r\n            ACTIVITY_SEQUENCE,-- For Match\r\n            AVG(value) AS `Average Achived`,\r\n            SUM(value) AS `SUM Achived`,\r\n            COUNT(value) AS `Count Achived`,\r\n            SUM(`Yet To Start`) AS `Yet To Start`,\r\n            SUM(Completed) AS Completed,\r\n            SUM(`In Progress`) AS `In Progress`\r\n        FROM PROGRESS_TRACKER_KOA GROUP BY Upload_Date,project_id,ACTIVITY_ID,SBU_ID,tower,Area,Category,ACTIVITY_SEQUENCE),\r\n    _KOA_FINAL AS (\r\n    SELECT \r\n        PTF.Upload_Date,\r\n        TA.Project,\r\n        PTF.tower,\r\n        TA.ACTIVITY_ID,\r\n        TA.SBU_ID,\r\n        TA.Area,\r\n        TA.`Progress Type`,\r\n        TA.CATEGORY,\r\n        TA.ACTIVITY_SEQUENCE,\r\n        TA.`Flats`,\r\n           TA.`Total Floors`,\r\n           TA.`Scheduled Activities`,\r\n        PTF.`SUM Achived`,\r\n        PTF.`Count Achived`,\r\n        PTF.`Average Achived`,\r\n        PTF.Completed,\r\n        PTF.`In Progress`,\r\n        PTF.`Yet To Start`,\r\n        (IFNULL(`Scheduled Activities`,0)-(IFNULL(Completed,0)+IFNULL(`In Progress`,0))) AS `Yet To Start Manual`\r\n    FROM Total_Activities_KOA TA LEFT JOIN PROGRESS_TRACKER_FINAL_KOA PTF\r\n        ON TA.Project = PTF.Project\r\n        AND TA.ACTIVITY_SEQUENCE = PTF.ACTIVITY_SEQUENCE\r\n        AND TA.CATEGORY = PTF.CATEGORY\r\n        AND TA.Area = PTF.Area\r\n        AND TA.SBU_ID = PTF.SBU_ID\r\n        AND TA.ACTIVITY_ID = PTF.ACTIVITY_ID WHERE TA.Project IN ('Sobha Waves','Sobha Waves Grande','One Park Avenue','Creek Vista Reserve'))\r\n-- End Of KeppOut Progress -- \r\n-- This is only to Merge all Data -- \r\nSELECT *, 2 AS SORT_MAIN FROM _FWP_FINAL -- Flatwise Progress\r\nUNION ALL\r\nSELECT *, 4 AS SORT_MAIN FROM _SRP_FINAL -- Service Room Progress\r\nUNION ALL\r\nSELECT *, 1 AS SORT_MAIN FROM _STP_FINAL -- Structures Progress\r\nUNION ALL\r\nSELECT *, 5 AS SORT_MAIN FROM _CRA_FINAL -- Corridor Progress\r\nUNION ALL\r\nSELECT *, 6 AS SORT_MAIN FROM _KOA_FINAL -- KeepOut Progress\r\n-- End of Code -- \r\n;\r\n\r\n/**/\r\n\r\nSELECT 1;",
						"queryTimeout": "02:00:00"
					},
					"dataset": {
						"referenceName": "DS_MySQL_Data_Loads_DB",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "BathRoom-CapQ - SaiBath",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureMySqlSource",
						"query": "TRUNCATE TABLE Sai_Bath;\r\nINSERT INTO Sai_Bath\r\nSELECT DATE(`upload_time`) AS Upload_Date,`project_id`,`tower`,\r\nCASE WHEN `Level` = 'Level 1' THEN 'Level 01'\r\n     WHEN `Level` = 'Level 2' THEN 'Level 02'\r\n     WHEN `Level` = 'Level 3' THEN 'Level 03'\r\n     WHEN `Level` = 'Level 4' THEN 'Level 04'\r\n     WHEN `Level` = 'Level 5' THEN 'Level 05'\r\n     WHEN `Level` = 'Level 6' THEN 'Level 06'\r\n     WHEN `Level` = 'Level 7' THEN 'Level 07'\r\n     WHEN `Level` = 'Level 8' THEN 'Level 08'\r\n     WHEN `Level` = 'Level 9' THEN 'Level 09'\r\n     ELSE `Level` END AS 'Level'\r\n,`Flat`,`Apartment Type`,`Count of Bathrooms`,Unpivoted.Type_of_work,\r\n#Unpivoted.Type_of_work,STR_TO_DATE(Unpivoted.Value,'%d-%b%') AS Actual_Closure,\r\ncase\r\nwhen Unpivoted.value='' then str_to_date(concat(Unpivoted.value,'1900-01-01') ,'%Y-%m-%d')\r\nwhen length(Unpivoted.value)<=6  then date_format(str_to_date(concat(Unpivoted.value,'-00'),'%d-%b-%y'),'0000-%m-%d')\r\nelse date_format(str_to_date(Unpivoted.value,'%d-%b-%y'),'0000-%m-%d') \r\nend as Actual_Closure,\r\n `Sequence`,`Day`\r\n-- DENSE_RANK() OVER (PARTITION BY `Level` ORDER BY id_)\r\nFROM BATHROOM_CAPQ CROSS JOIN LATERAL \r\n            (SELECT    `Final Coat Stamp Plan (L7)`,    'Final Coat Stamp Plan (L7)'\r\n                UNION ALL    SELECT    `Final Coat Stamp Actual (L7)`,    'Final Coat Stamp Actual (L7)'\r\n                UNION ALL   SELECT    `Deep Cleaning Plan`, 'Deep Cleaning Plan'\r\n                UNION ALL    SELECT    `Deep Cleaning Actual`,    'Deep Cleaning Actual'\r\n                UNION ALL   SELECT  `MEP T & C Plan` , 'MEP T & C Plan'\r\n                UNION ALL    SELECT    `MEP T & C Actual`,    'MEP T & C Actual'\r\n                UNION ALL   SELECT  `MEP Stamp Closure Plan (L8)`, 'MEP Stamp Closure Plan (L8)'\r\n                UNION ALL    SELECT    `MEP Stamp Closure Actual (L8)`,    'MEP Stamp Closure Actual (L8)'\r\n                UNION ALL   SELECT  `Civil Stamp Closure Plan (L9)`, 'Civil Stamp Closure Plan (L9)'\r\n                UNION ALL    SELECT    `Civil Stamp Closure Actual (L9)`,    'Civil Stamp Closure Actual (L9)'\r\n) AS Unpivoted(Value,Type_of_work)\r\nLEFT JOIN BATHROOM_CAPQ_MAP bcm ON bcm.Activity = Unpivoted.Type_of_work;\r\n\r\n/**/\r\nSELECT 1;\r\n\r\n",
						"queryTimeout": "02:00:00"
					},
					"dataset": {
						"referenceName": "DS_MySQL_Data_Loads_DB",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Engineering Drawing",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureMySqlSource",
						"query": "TRUNCATE TABLE f_pln_engineeringdrawing;\r\nINSERT INTO f_pln_engineeringdrawing\r\nWITH AA AS (\r\n    SELECT \r\n        DATE(upload_time) AS Upload_Date,\r\n        project_id,\r\n        `Type`,\r\n        `Villa Type`,\r\n        Category,\r\n        `Drawing Number`,\r\n        `Drawing Title`,\r\n        NULLIF(`Scheduled Date`,'') AS `Scheduled Date`,\r\n        `PNCA commitment`,\r\n        DENSE_RANK () OVER (PARTITION BY  project_id ORDER BY  DATE(upload_time) DESC) Project_Udate_DRANK,\r\n        NULLIF(R0,'') AS R0,\r\n        NULLIF(`R0-Trans_Id`,'') AS `R0-Trans_Id`,\r\n        NULLIF(R1,'') AS R1,\r\n        NULLIF(`R1-Trans_Id`,'') AS `R1-Trans_Id`,\r\n        NULLIF(R2,'') AS R2,\r\n        NULLIF(`R2-Trans_Id`,'') AS `R2-Trans_Id`,\r\n        NULLIF(R3,'') AS R3,\r\n        NULLIF(`R3-Trans_Id`,'') AS `R3-Trans_Id`,\r\n        NULLIF(R4,'') AS R4,\r\n        NULLIF(`R4-Trans_Id`,'') AS `R4-Trans_Id`,\r\n        NULLIF(R5,'') AS R5,\r\n        NULLIF(`R5-Trans_Id`,'') AS `R5-Trans_Id`,\r\n        NULLIF(R6,'') AS R6,\r\n        NULLIF(`R6-Trans_Id`,'') AS `R6-Trans_Id`,\r\n        NULLIF(R7,'') AS R7,\r\n        NULLIF(`R7-Trans_Id`,'') AS `R7-Trans_Id`,\r\n        NULLIF(R8,'') AS R8,\r\n        NULLIF(`R8-Trans_Id`,'') AS `R8-Trans_Id`,\r\n        NULLIF(R9,'') AS R9,\r\n        NULLIF(`R9-Trans_Id`,'') AS `R9-Trans_Id`,\r\n        NULLIF(R10,'') AS R10,\r\n        NULLIF(`R10-Trans_Id`,'') AS `R10-Trans_Id`,\r\n        NULLIF(R11,'') AS R11,\r\n        NULLIF(`R11-Trans_Id`,'') AS `R11-Trans_Id`,\r\n        NULLIF(R12,'') AS R12,\r\n        NULLIF(`R12-Trans_Id`,'') AS `R12-Trans_Id`,\r\n        NULLIF(R11,'') AS R13,\r\n        NULLIF(`R11-Trans_Id`,'') AS `R13-Trans_Id`,\r\n        NULLIF(R12,'') AS R14,\r\n        NULLIF(`R12-Trans_Id`,'') AS `R14-Trans_Id`,\r\n        NULLIF(R13,'') AS R15,\r\n        NULLIF(`R13-Trans_Id`,'') AS `R15-Trans_Id`,\r\n        NULLIF(R14,'') AS R16,\r\n        NULLIF(`R14-Trans_Id`,'') AS `R16-Trans_Id`,\r\n        NULLIF(R15,'') AS R17,\r\n        NULLIF(`R15-Trans_Id`,'') AS `R17-Trans_Id`,\r\n        NULLIF(R16,'') AS R18,\r\n        NULLIF(`R16-Trans_Id`,'') AS `R18-Trans_Id`,\r\n        NULLIF(R17,'') AS R19,\r\n        NULLIF(`R17-Trans_Id`,'') AS `R19-Trans_Id`,\r\n        NULLIF(R18,'') AS R20,\r\n        NULLIF(`R18-Trans_Id`,'') AS `R20-Trans_Id`,\r\n        NULLIF(R19,'') AS R21,\r\n        NULLIF(`R19-Trans_Id`,'') AS `R21-Trans_Id`,\r\n        NULLIF(R20,'') AS R22,\r\n        NULLIF(`R20-Trans_Id`,'') AS `R22-Trans_Id`,\r\n        NULLIF(R21,'') AS R23,\r\n        NULLIF(`R21-Trans_Id`,'') AS `R23-Trans_Id`,\r\n        NULLIF(R22,'') AS R24,\r\n        NULLIF(`R22-Trans_Id`,'') AS `R24-Trans_Id`,\r\n        NULLIF(R23,'') AS R25,\r\n        NULLIF(`R23-Trans_Id`,'') AS `R25-Trans_Id`\r\n    FROM O_PLN_DRAWING_DETAIL_DRAW\r\n    WHERE (`Type` IS NOT NULL AND TRIM(`Type`) NOT IN (''))),\r\nAB AS (\r\nSELECT * FROM AA\r\nWHERE Project_Udate_DRANK = 1) SELECT * FROM  AB;\r\n\r\n/**/\r\n\r\nSELECT 1;",
						"queryTimeout": "02:00:00"
					},
					"dataset": {
						"referenceName": "DS_MySQL_Data_Loads_DB",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Corrider",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureMySqlSource",
						"query": "TRUNCATE TABLE f_pln_corridor;\r\nINSERT INTO f_pln_corridor\r\nWITH PRE_STAGGING AS(\r\n        SELECT DATE(O_PLN_CORRIDOR_RAW.upload_time) AS Upload_Date,\r\n        O_PLN_CORRIDOR_RAW.project_id,\r\n        O_PLN_CORRIDOR_RAW.tower,\r\n        O_PLN_CORRIDOR_RAW.Level,\r\n        'Corridor' AS sclicer,\r\n        Column_Name.*,\r\n        O_PLN_CORRIDOR_MAP.ACTIVITY_ID,\r\n        O_PLN_CORRIDOR_MAP.SBU_ID,\r\n        O_PLN_CORRIDOR_MAP.CATEGORY,\r\n        DENSE_RANK () OVER     (PARTITION BY  project_id\r\n                            ORDER BY  DATE(upload_time) DESC\r\n                            )     Project_Udate_DRANK\r\n    FROM O_PLN_CORRIDOR_RAW\r\n    CROSS JOIN LATERAL (\r\n                        SELECT\t`Corridor MEP Marking for Builders Work`\t,\t'Corridor MEP Marking for Builders Work'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Corridor Cutting & Chasing of Blockwork`\t,\t'Corridor Cutting & Chasing of Blockwork'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Corridor MEP Services Installation`\t,\t'Corridor MEP Services Installation'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Corridor Wall MEP Services Packing`\t,\t'Corridor Wall MEP Services Packing'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Corridor Plaster`\t,\t'Corridor Plaster'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Corridor Screed`\t,\t'Corridor Screed'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Grinding Clearance for Tile`\t,\t'Grinding Clearance for Tile'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Tile Marking`\t,\t'Tile Marking'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Bull Marking`\t,\t'Bull Marking'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Electrical Conduits`\t,\t'Electrical Conduits'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Cold water supply`\t,\t'Cold water supply'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Fire Fighting Pipe Support`\t,\t'Fire Fighting Pipe Support'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Modular Instalation`\t,\t'Modular Instalation'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Framing Clearance by MEP`\t,\t'Framing Clearance by MEP'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Center line marking for Facade Installation`\t,\t'Center line marking for Facade Installation'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Corridor Curtain Wall Box Installation`\t,\t'Corridor Curtain Wall Box Installation'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Corridor Curtain Wall Frame Installation`\t,\t'Corridor Curtain Wall Frame Installation'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Corridor Curtain Wall Glass Installation`\t,\t'Corridor Curtain Wall Glass Installation'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Corridor Curtain Wall Flashing Installation`\t,\t'Corridor Curtain Wall Flashing Installation'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Corridor Floor Tile`\t,\t'Corridor Floor Tile'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Corridor Wall Tile`\t,\t'Corridor Wall Tile'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Fire Hose Reel Cabinet Installation`\t,\t'Fire Hose Reel Cabinet Installation'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Grouting for Framing Clearance`\t,\t'Grouting for Framing Clearance'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Corridor FC Framing`\t,\t'Corridor FC Framing'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`MEP Access Panel Markings & Inspection`\t,\t'MEP Access Panel Markings & Inspection'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`MEP Works for Boarding Clearance `\t,\t'MEP Works for Boarding Clearance '\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Framing Levelling`\t,\t'Framing Levelling'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Corridor FC Boarding`\t,\t'Corridor FC Boarding'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Joint Taping & Sanding`\t,\t'Joint Taping & Sanding'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Corridor Ceiling Primer`\t,\t'Corridor Ceiling Primer'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Corridor Ceiling Stucco (1st and 2nd Coat)`\t,\t'Corridor Ceiling Stucco (1st and 2nd Coat)'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Corridor Ceiling First Coat Paint`\t,\t'Corridor Ceiling First Coat Paint'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Corridor Grouting`\t,\t'Corridor Grouting'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Corridor Silicone`\t,\t'Corridor Silicone'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Left over Screed`\t,\t'Left over Screed'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Left Over Area Floor Tile`\t,\t'Left Over Area Floor Tile'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Left Over Area Wall Tile`\t,\t'Left Over Area Wall Tile'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Remaining Grout and Silicone Works`\t,\t'Remaining Grout and Silicone Works'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Corridor MEP Final Fixtures`\t,\t'Corridor MEP Final Fixtures'\r\n\t\t\t\t\t\tUNION ALL SELECT\t`Corridor Final Coat Paint`\t,\t'Corridor Final Coat Paint'\r\n                        )as Column_Name(value,Type_of_work)\r\n    JOIN O_PLN_CORRIDOR_MAP \r\n    ON Column_Name.Type_of_work = O_PLN_CORRIDOR_MAP.ACTIVITY_SEQUENCE\r\n    WHERE VALUE IS NOT NULL),\r\nOUTPUT_FINAL AS (\r\n    SELECT \r\n        PS.Upload_Date ,\r\n        PS.project_id    ,\r\n        PS.tower    ,\r\n        PS.`Level`    ,\r\n        PS.sclicer    ,\r\n        CASE \r\n            WHEN PS.value IN ('','NA') THEN '0%'\r\n            ELSE PS.value\r\n        END AS value,\r\n        PS.Type_of_work    ,\r\n        PS.ACTIVITY_ID    ,\r\n        PS.SBU_ID    ,\r\n        PS.CATEGORY    ,\r\n        OLMA.level_map,\r\n        CASE \r\n            WHEN TRIM(PS.CATEGORY) IN('Builders Work') THEN  2\r\n            WHEN TRIM(PS.CATEGORY) IN('MEP') THEN  12\r\n            WHEN TRIM(PS.CATEGORY) IN('Plaster') THEN  3\r\n            WHEN TRIM(PS.CATEGORY) IN('Screed') THEN  5\r\n            WHEN TRIM(PS.CATEGORY) IN('Tile') THEN  9\r\n            WHEN TRIM(PS.CATEGORY) IN('Marble') THEN  10\r\n            WHEN TRIM(PS.CATEGORY) IN('Facade') THEN  11\r\n            WHEN TRIM(PS.CATEGORY) IN('Gypsum') THEN  6\r\n            WHEN TRIM(PS.CATEGORY) IN('Paint') THEN  8\r\n            ELSE 20\r\n        END AS CATEGORY_SORT\r\n    FROM PRE_STAGGING PS\r\n        LEFT JOIN O_LEVEL_MAP_ALL OLMA\r\n            ON PS.`Level` = OLMA.`level`\r\n    WHERE PS.Project_Udate_DRANK = 1)\r\n    SELECT \r\n        Upload_Date,\r\n        project_id,\r\n        tower,\r\n        `Level`,\r\n        sclicer,\r\n        CAST(REPLACE(value,'%','') AS DECIMAL)/100 AS value,\r\n        Type_of_work,\r\n        ACTIVITY_ID,\r\n        SBU_ID,\r\n        CATEGORY,\r\n        level_map,\r\n        CATEGORY_SORT\r\n    FROM OUTPUT_FINAL;\r\n\r\n    /**/\r\n\r\n    SELECT 1;",
						"queryTimeout": "02:00:00"
					},
					"dataset": {
						"referenceName": "DS_MySQL_Data_Loads_DB",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Keep Out SLA",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureMySqlSource",
						"query": "TRUNCATE TABLE f_pln_keepout_2;\r\nINSERT INTO f_pln_keepout_2\r\nWITH KEEPOUTS_MAIN AS(\r\n    SELECT\r\n        DATE(OPKDR.upload_time) AS Upload_Date,\r\n        OPKDR.project_id    ,\r\n        OPKDR.tower    ,\r\n        OPKDR.`Level`,\r\n        OPKDR.`Flat No.`,\r\n        OPKDR.`Apartment Type`,\r\n        OPKM.SBU_ID,\r\n        OPKM.ACTIVITY_ID,\r\n        OPKM.ENGINEER_RESPONSIBLE,\r\n        OPKM.PREDECESSOR_DATA,\r\n        Column_Name.Types_of_Activities,\r\n        Column_Name.value_plan,\r\n        Column_Name.value_act,\r\n        DENSE_RANK() OVER(PARTITION BY OPKDR.project_id ORDER BY DATE(OPKDR.upload_time) DESC) AS Dense_Ranker\r\n    FROM O_PLN_KEEPOUT_DETAILED_RAW OPKDR\r\n    CROSS JOIN LATERAL (\r\n                        SELECT         `WIR - Final Coat Paint Plan`                    ,`WIR - Final Coat Paint Actual` ,'WIR - Final Coat Paint'\r\n                UNION ALL SELECT      `F6 / F7 Final Coat Paint - Stamp Closure Plan`     ,`F6 / F7 Final Coat Paint - Stamp Closure Actual`,'F6 / F7 Final Coat Paint - Stamp Closure'\r\n                UNION ALL SELECT      `Deep Cleaning Plan`                                 ,`Deep Cleaning Actual`,'Deep Cleaning'\r\n                UNION ALL SELECT      `Facade Stamp Closing Plan`                         ,`Facade Stamp Closing Actual`,'Facade Stamp Closing'\r\n                UNION ALL SELECT      `MEP Final Fixtures Plan`                         ,`MEP Final Fixtures Actual`,'MEP Final Fixtures'\r\n                UNION ALL SELECT      `MEP T&C Stamps Closure Plan`                     ,`MEP T&C Stamps Closure Actual` ,'MEP T&C Stamps Closure'\r\n                UNION ALL SELECT      `F7 Stamp Closure Plan`                             ,`F7 Stamp Closure Actual` ,'F7 Stamp Closure'\r\n                UNION ALL SELECT      `MEP NOC in Draft / Assign to MEP QC Plan`         ,`MEP NOC in Draft / Assign to MEP QC Actual`,'MEP NOC in Draft / Assign to MEP QC'\r\n                UNION ALL SELECT      `Civil NOC in Draft / Assign to Civil QC Plan`     ,`Civil NOC in Draft / Assign to Civil QC Actual` ,'Civil NOC in Draft / Assign to Civil QC'\r\n                UNION ALL SELECT      `MEP NOC Submission Plan`                         ,`MEP NOC Submission Actual`,'MEP NOC Submission' ##\r\n                UNION ALL SELECT      `CIVIL NOC Submission Plan`                         ,`CIVIL NOC Submission Actual`,'CIVIL NOC Submission' ##\r\n                UNION ALL SELECT      `Facade Field report 1st inspection Plan`         ,`Facade Field report 1st inspection Actual`,'Facade Field report 1st inspection'\r\n                UNION ALL SELECT      `Facade Field Report assign to MEP Plan`             ,`Facade Field Report assign to MEP Actual` ,'Facade Field Report assign to MEP'\r\n                UNION ALL SELECT      `MEP Stamp Field report 1st inspection Plan`         ,`MEP Stamp Field report 1st inspection Actual`,'MEP Stamp Field report 1st inspection'\r\n                UNION ALL SELECT      `MEP Field report submission Plan`                 ,`MEP Field report submission Actual` ,'MEP Field report submission'\r\n                UNION ALL SELECT      `Civil Field report 1st inspection Plan`             ,`Civil Field report 1st inspection Actual` ,'Civil Field report 1st inspection'\r\n                UNION ALL SELECT      `Civil Field Report Submission Plan`                 ,`Civil Field Report Submission Actual` ,'Civil Field Report Submission'\r\n                UNION ALL SELECT      `SCL Keep-out Stamp (N1) -Into Review Plan`         ,`SCL Keep-out Stamp (N1) -Into Review Actual` ,'SCL Keep-out Stamp (N1) -Into Review'\r\n                UNION ALL SELECT      `PNCA Keep-out (N1) Into Pending Plan`             ,`PNCA Keep-out (N1) Into Pending Actual` ,'PNCA Keep-out (N1) Into Pending'\r\n                UNION ALL SELECT      `QT Inspection Keep-out Stamp (N1) Plan`             ,`QT Inspection Keep-out Stamp (N1) Actual` ,'QT Inspection Keep-out Stamp (N1)'\r\n    ) AS Column_Name(value_plan,value_act,Types_of_Activities)\r\n    JOIN O_PLN_KEEPOUTS_MAP OPKM\r\n    ON Column_Name.Types_of_Activities = OPKM.ACTIVITY_SEQUENCE\r\n    WHERE Column_Name.value_act !='0-Jan-00'),\r\nPRE_VALIDATION_DATA AS(\r\n    SELECT \r\n        Upload_Date,\r\n        project_id,\r\n        tower,\r\n        `Level`,\r\n        `Flat No.`,\r\n        `Apartment Type`,\r\n        SBU_ID,\r\n        ACTIVITY_ID,\r\n        ENGINEER_RESPONSIBLE,\r\n        PREDECESSOR_DATA,\r\n        Types_of_Activities,\r\n        value_plan,\r\n        value_act\r\n    FROM KEEPOUTS_MAIN \r\n    WHERE Dense_Ranker=1),\r\nOUTPUT_1 AS (\r\n    SELECT \r\n        PVD1.Upload_Date,\r\n        PVD1.project_id,\r\n        PVD1.tower,\r\n        PVD1.`Level`,\r\n        PVD1.`Flat No.`,\r\n        PVD1.`Apartment Type`,\r\n        PVD1.SBU_ID,\r\n        PVD1.ACTIVITY_ID,\r\n        PVD1.ENGINEER_RESPONSIBLE,\r\n        PVD1.Types_of_Activities,\r\n        PVD1.PREDECESSOR_DATA,\r\n        CASE\r\n            WHEN TRIM(PVD1.value_act) IN ('','-') THEN NULL\r\n            ELSE STR_TO_DATE(PVD1.value_act,'%d-%b-%y')\r\n        END AS value_act,\r\n        CASE\r\n            WHEN TRIM(PVD2.value_act) IN ('','-') THEN NULL\r\n            ELSE STR_TO_DATE(PVD2.value_act,'%d-%b-%y')\r\n        END AS Predes_value_act,\r\n        CASE\r\n            WHEN TRIM(PVD1.value_plan) IN ('','-') THEN NULL\r\n            ELSE STR_TO_DATE(PVD1.value_plan,'%d-%b-%y')\r\n        END AS value_plan,\r\n        CASE\r\n            WHEN TRIM(PVD2.value_plan) IN ('','-') THEN NULL\r\n            ELSE STR_TO_DATE(PVD2.value_plan,'%d-%b-%y')\r\n        END AS Predes_value_plan\r\n    FROM PRE_VALIDATION_DATA PVD1 \r\n    LEFT JOIN PRE_VALIDATION_DATA PVD2\r\n         ON PVD1.project_id = PVD2.project_id\r\n        AND PVD1.tower = PVD2.tower\r\n        AND PVD1.`Level` = PVD2.`Level`\r\n        AND PVD1.`Flat No.` = PVD2.`Flat No.`\r\n        AND PVD1.PREDECESSOR_DATA = PVD2.Types_of_Activities),\r\nPRE_VALIDATION_DATA2 AS (\r\n    SELECT \r\n            PVD1.project_id,\r\n            PVD1.tower,\r\n            PVD1.`Level`,\r\n            PVD1.`Flat No.`,\r\n            PVD1.`Apartment Type`,\r\n            PVD1.Types_of_Activities,\r\n            CASE \r\n                WHEN TRIM(PVD1.value_act) IN ('','-') THEN NULL\r\n                ELSE STR_TO_DATE(PVD1.value_act,'%d-%b-%y')\r\n            END AS value_act,\r\n            CASE \r\n                WHEN TRIM(PVD1.value_plan) IN ('','-') THEN NULL\r\n                ELSE STR_TO_DATE(PVD1.value_plan,'%d-%b-%y')\r\n            END AS value_plan,\r\n            CASE \r\n                WHEN TRIM(PVD1.Types_of_Activities) IN ('MEP T&C Stamps Closure'\r\n                                            ,'Facade Field Report assign to MEP'\r\n                                            ,'MEP NOC Submission') THEN 'FROM CTE 1'\r\n                ELSE 'FROM CTE 2'\r\n            END AS Types_of_Activities_group\r\n    FROM PRE_VALIDATION_DATA PVD1\r\n    WHERE TRIM(PVD1.Types_of_Activities) IN ('MEP T&C Stamps Closure'\r\n                                    ,'Facade Field Report assign to MEP'\r\n                                    ,'MEP NOC Submission'\r\n                                    ,'MEP Field report submission'\r\n                                    ,'CIVIL NOC Submission')),\r\nAggeregate_Prdes_act AS (\r\n    SELECT \r\n        *,\r\n        DENSE_RANK() OVER(PARTITION BY project_id,tower,`Level`,`Flat No.`,`Apartment Type`,Types_of_Activities_group ORDER BY value_act DESC) AS Date_Ranker_act,\r\n    COUNT(value_act) AS Count_Act\r\n    FROM PRE_VALIDATION_DATA2 PVD1\r\n    GROUP BY project_id,tower,`Level`,`Flat No.`,`Apartment Type`,Types_of_Activities,value_act,value_plan,Types_of_Activities_group),\r\nAggeregate_Prdes_Pln AS (\r\n    SELECT \r\n        *,\r\n        DENSE_RANK() OVER(PARTITION BY project_id,tower,`Level`,`Flat No.`,`Apartment Type`,Types_of_Activities_group ORDER BY value_plan DESC) AS Date_Ranker_pln,\r\n        COUNT(value_plan) AS Count_Pln\r\n    FROM PRE_VALIDATION_DATA2 PVD1\r\n    GROUP BY project_id,tower,`Level`,`Flat No.`,`Apartment Type`,Types_of_Activities,value_act,value_plan,Types_of_Activities_group),\r\n-- Need to rework this part\r\nAggeregate_Prdes_Pln_Final AS (\r\n    SELECT \r\n        project_id,\r\n        tower,\r\n        `Level`,\r\n        `Flat No.`,\r\n        `Apartment Type`,\r\n        Types_of_Activities,\r\n        value_plan,\r\n        Types_of_Activities_group,\r\n        Date_Ranker_pln,\r\n        SUM(Count_Pln) AS Count_Pln\r\n    FROM Aggeregate_Prdes_Pln   GROUP BY 1,2,3,4,5,6,7,8 ORDER BY Date_Ranker_pln),\r\nAggeregate_Prdes_Act_Final AS (\r\n    SELECT \r\n        project_id,\r\n        tower,\r\n        `Level`,\r\n        `Flat No.`,\r\n        `Apartment Type`,\r\n        Types_of_Activities,\r\n        value_act,\r\n        Types_of_Activities_group,\r\n        Date_Ranker_act,\r\n        SUM(Count_act) AS Count_act\r\n    FROM Aggeregate_Prdes_act  GROUP BY 1,2,3,4,5,6,7,8 ORDER BY Date_Ranker_act),\r\nAggeregate_Prdes AS (\r\n    SELECT \r\n        APP.project_id,\r\n        APP.tower,\r\n        APP.`Level`,\r\n        APP.`Flat No.`,\r\n        APP.`Apartment Type`,\r\n        APP.Types_of_Activities_group,\r\n        APP.value_plan,\r\n        APA.value_act,\r\n        APA.Date_Ranker_act,\r\n        APP.Date_Ranker_Pln,\r\n--         APA.Count_Act,\r\n--         APP.Count_Pln,\r\n--         Chnaged this based on sai's Requirement\r\n        CASE \r\n            WHEN APP.Types_of_Activities_group = 'FROM CTE 1' AND APA.Count_Act = 3 THEN 1\r\n            WHEN APP.Types_of_Activities_group = 'FROM CTE 2' AND APA.Count_Act = 2 THEN 1\r\n            ELSE NULL\r\n        END AS Count_Act,\r\n        CASE \r\n            WHEN APP.Types_of_Activities_group = 'FROM CTE 1' AND APP.Count_Pln = 3 THEN 1\r\n            WHEN APP.Types_of_Activities_group = 'FROM CTE 2' AND APP.Count_Pln = 2 THEN 1\r\n            ELSE NULL\r\n        END AS Count_Pln\r\n    FROM Aggeregate_Prdes_Pln_Final APP\r\n    LEFT JOIN Aggeregate_Prdes_Act_Final APA\r\n        ON APP.project_id = APA.project_id\r\n        AND APP.tower = APA.tower\r\n        AND APP.`Level` = APA.`Level`\r\n        AND APP.`Flat No.` = APA.`Flat No.`\r\n        AND APP.`Apartment Type` = APA.`Apartment Type`\r\n        AND APP.Types_of_Activities_group = APA.Types_of_Activities_group\r\n        AND APP.Date_Ranker_Pln = APA.Date_Ranker_act\r\n),\r\n-- Till Here\r\n-- Aggeregate_Prdes_Dranker AS (\r\n--     SELECT \r\n--         APP.project_id,\r\n--         APP.tower,\r\n--         APP.`Level`,\r\n--         APP.`Flat No.`,\r\n--         APP.`Apartment Type`,\r\n--         APP.Types_of_Activities_group,\r\n--         APP.value_plan,\r\n--         APA.value_act,\r\n--         APA.Date_Ranker_act,\r\n--         APP.Date_Ranker_Pln\r\n--     FROM Aggeregate_Prdes_Pln APP\r\n--     LEFT JOIN Aggeregate_Prdes_act APA\r\n--         ON APP.project_id = APA.project_id\r\n--         AND APP.tower = APA.tower\r\n--         AND APP.`Level` = APA.`Level`\r\n--         AND APP.`Flat No.` = APA.`Flat No.`\r\n--         AND APP.`Apartment Type` = APA.`Apartment Type`\r\n--         AND APP.Types_of_Activities = APA.Types_of_Activities\r\n--         AND APP.Types_of_Activities_group = APA.Types_of_Activities_group),\r\nOUTPUT_Final_A as (\r\n    SELECT \r\n        PVD1.Upload_Date,\r\n        PVD1.project_id,\r\n        PVD1.tower,\r\n        PVD1.`Level`,\r\n        PVD1.`Flat No.`,\r\n        PVD1.`Apartment Type`,\r\n        PVD1.SBU_ID,\r\n        PVD1.ACTIVITY_ID,\r\n        PVD1.ENGINEER_RESPONSIBLE,\r\n        PVD1.Types_of_Activities,\r\n        PVD1.PREDECESSOR_DATA,\r\n        PVD1.value_plan,\r\n        PVD2.Count_Pln,\r\n        CASE\r\n            WHEN TRIM(PVD1.PREDECESSOR_DATA) IN ('FROM CTE 1','FROM CTE 2') THEN PVD2.value_plan\r\n            ELSE Predes_value_plan\r\n        END AS Predes_value_plan,\r\n        PVD1.value_act,\r\n        PVD2.Count_Act,\r\n        CASE\r\n            WHEN TRIM(PVD1.PREDECESSOR_DATA) IN ('FROM CTE 1','FROM CTE 2') THEN PVD2.value_act\r\n            ELSE Predes_value_act\r\n        END AS Predes_value_act\r\n    FROM OUTPUT_1 PVD1 LEFT JOIN Aggeregate_Prdes PVD2\r\n        ON PVD1.project_id = PVD2.project_id\r\n        AND PVD1.tower = PVD2.tower\r\n        AND PVD1.`Level` = PVD2.`Level`\r\n        AND PVD1.`Flat No.` = PVD2.`Flat No.`\r\n        AND PVD1.PREDECESSOR_DATA = PVD2.Types_of_Activities_group),\r\nADD_DATE_FORMAT AS (\r\n    SELECT \r\n        Upload_Date,\r\n        project_id,\r\n        tower,\r\n        `Level`,\r\n        `Flat No.`,\r\n        SBU_ID,\r\n        `Apartment Type`,\r\n        ACTIVITY_ID,\r\n        ENGINEER_RESPONSIBLE,\r\n        Types_of_Activities,\r\n        CASE \r\n            WHEN (value_plan IS NULL OR TRIM(value_plan) = ('')) \r\n                AND  (Predes_value_plan IS NOT NULL OR TRIM(Predes_value_plan) != ('')) THEN Upload_Date\r\n            ELSE value_plan\r\n        END AS delay_pln,\r\n        value_plan,\r\n        Count_Pln,\r\n        Predes_value_plan,\r\n        PREDECESSOR_DATA AS Predecessor_Activities,\r\n        CASE \r\n            WHEN (value_act IS NULL OR TRIM(value_act) = ('')) \r\n                AND (Predes_value_act IS NOT NULL OR TRIM(Predes_value_act) != ('')) THEN Upload_Date\r\n            ELSE value_act \r\n        END AS delay_act,\r\n        value_act,\r\n        Count_act,\r\n        Predes_value_act\r\n    FROM OUTPUT_Final_A\r\n) ,\r\nOUTPUT_Final_B AS (\r\n    SELECT \r\n        ADF.*,\r\n        DATEDIFF(ADF.delay_pln,ADF.Predes_value_plan) AS Planned_SLA,\r\n        DATEDIFF(ADF.delay_act,ADF.Predes_value_act) AS Actual_SLA,\r\n        OPKM.Predecessor_Activity_allowed_lag AS Given_SLA\r\n    FROM ADD_DATE_FORMAT ADF\r\n        LEFT JOIN O_LEVEL_MAP_ALL OLMA\r\n            ON ADF.`Level` = OLMA.`level`\r\n        LEFT JOIN O_PLN_KEEPOUTS_MAP OPKM \r\n            ON ADF.Types_of_Activities = OPKM.ACTIVITY_SEQUENCE),\r\nOUTPUT_ AS (\r\n    SELECT \r\n        ADF.*,\r\n        CASE \r\n            WHEN ADF.Actual_SLA <= 0 THEN     '<= 0'\r\n            WHEN ADF.Actual_SLA = 1 THEN     '= 1'\r\n            WHEN ADF.Actual_SLA = 2 THEN     '= 2'\r\n            WHEN ADF.Actual_SLA = 3 THEN     '= 3'\r\n            WHEN ADF.Actual_SLA = 4 THEN     '= 4'\r\n            WHEN ADF.Actual_SLA = 5 THEN     '= 5'\r\n            WHEN ADF.Actual_SLA = 6 THEN     '= 6'\r\n            WHEN ADF.Actual_SLA = 7 THEN     '= 7'\r\n            WHEN ADF.Actual_SLA > 7 THEN     '> 7'\r\n            ELSE NULL\r\n        END AS Actual_SLA_Title \r\n    FROM OUTPUT_Final_B ADF) \r\nSELECT \r\n    Upload_Date AS `Date`,\r\n    project_id,\r\n    tower AS `Tower`,\r\n    `Level`,\r\n    `Flat No.`,\r\n    SBU_ID,\r\n    `Apartment Type`,\r\n    ACTIVITY_ID,\r\n    ENGINEER_RESPONSIBLE AS `Engineer Responsible`,\r\n    Types_of_Activities AS `Activity`,\r\n    delay_pln,\r\n    value_plan AS `Plan`,\r\n    Count_Pln,\r\n    Predes_value_plan AS `Predecessor Plan`,\r\n    CASE \r\n        WHEN TRIM(Predecessor_Activities) IN ('FROM CTE 1','FROM CTE 2') AND Count_Pln = 1 THEN value_plan \r\n        WHEN TRIM(Predecessor_Activities) IN ('FROM CTE 1','FROM CTE 2') AND Count_Pln != 1 THEN NULL\r\n        ELSE Predes_value_plan\r\n    END AS `Predecessor Plan Work Front`,\r\n    Predecessor_Activities AS Predecessor,\r\n    delay_act,\r\n    value_act AS `Actual`,\r\n    Count_act,\r\n    Predes_value_act AS `Predecessor Actual`,\r\n    CASE\r\n        WHEN TRIM(Predecessor_Activities) IN ('FROM CTE 1','FROM CTE 2') AND Count_Act = 1 THEN value_act\r\n        WHEN TRIM(Predecessor_Activities) IN ('FROM CTE 1','FROM CTE 2') AND Count_Act != 1 THEN NULL\r\n        ELSE Predes_value_act\r\n    END AS `Predecessor Actual Work Front`,\r\n    CASE WHEN Planned_SLA <= 0 THEN 0 ELSE Planned_SLA END AS `SLA Planned`,\r\n    CASE WHEN Actual_SLA <= 0 THEN 0 ELSE Actual_SLA END AS `SLA Actual`,\r\n    Given_SLA AS SLA,\r\n    Actual_SLA_Title  AS `Actual SLA Title`\r\nFROM OUTPUT_ ;\r\n\r\n/**/\r\n\r\nSELECT 1;",
						"queryTimeout": "02:00:00"
					},
					"dataset": {
						"referenceName": "DS_MySQL_Data_Loads_DB",
						"type": "DatasetReference"
					}
				}
			}
		],
		"annotations": [],
		"lastPublishTime": "2023-01-16T23:08:27Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}